
GPS_READ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b1d4  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  0800b360  0800b360  0001b360  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b4c0  0800b4c0  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800b4c0  0800b4c0  0001b4c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b4c8  0800b4c8  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b4c8  0800b4c8  0001b4c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b4cc  0800b4cc  0001b4cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800b4d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020094  2**0
                  CONTENTS
 10 .bss          00000a00  20000094  20000094  00020094  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000a94  20000a94  00020094  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001865b  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003ee7  00000000  00000000  0003871f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011c8  00000000  00000000  0003c608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001058  00000000  00000000  0003d7d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000245a9  00000000  00000000  0003e828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000187de  00000000  00000000  00062dd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc252  00000000  00000000  0007b5af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00147801  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004ff8  00000000  00000000  00147854  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000094 	.word	0x20000094
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800b344 	.word	0x0800b344

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000098 	.word	0x20000098
 80001c4:	0800b344 	.word	0x0800b344

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2f>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ab8:	bf24      	itt	cs
 8000aba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000abe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ac2:	d90d      	bls.n	8000ae0 <__aeabi_d2f+0x30>
 8000ac4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000acc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ad4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad8:	bf08      	it	eq
 8000ada:	f020 0001 	biceq.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ae4:	d121      	bne.n	8000b2a <__aeabi_d2f+0x7a>
 8000ae6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aea:	bfbc      	itt	lt
 8000aec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	4770      	bxlt	lr
 8000af2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000af6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afa:	f1c2 0218 	rsb	r2, r2, #24
 8000afe:	f1c2 0c20 	rsb	ip, r2, #32
 8000b02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b06:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	f040 0001 	orrne.w	r0, r0, #1
 8000b10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b1c:	ea40 000c 	orr.w	r0, r0, ip
 8000b20:	fa23 f302 	lsr.w	r3, r3, r2
 8000b24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b28:	e7cc      	b.n	8000ac4 <__aeabi_d2f+0x14>
 8000b2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b2e:	d107      	bne.n	8000b40 <__aeabi_d2f+0x90>
 8000b30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b34:	bf1e      	ittt	ne
 8000b36:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b3a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b3e:	4770      	bxne	lr
 8000b40:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_uldivmod>:
 8000b50:	b953      	cbnz	r3, 8000b68 <__aeabi_uldivmod+0x18>
 8000b52:	b94a      	cbnz	r2, 8000b68 <__aeabi_uldivmod+0x18>
 8000b54:	2900      	cmp	r1, #0
 8000b56:	bf08      	it	eq
 8000b58:	2800      	cmpeq	r0, #0
 8000b5a:	bf1c      	itt	ne
 8000b5c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b60:	f04f 30ff 	movne.w	r0, #4294967295
 8000b64:	f000 b974 	b.w	8000e50 <__aeabi_idiv0>
 8000b68:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b6c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b70:	f000 f806 	bl	8000b80 <__udivmoddi4>
 8000b74:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b7c:	b004      	add	sp, #16
 8000b7e:	4770      	bx	lr

08000b80 <__udivmoddi4>:
 8000b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b84:	9d08      	ldr	r5, [sp, #32]
 8000b86:	4604      	mov	r4, r0
 8000b88:	468e      	mov	lr, r1
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d14d      	bne.n	8000c2a <__udivmoddi4+0xaa>
 8000b8e:	428a      	cmp	r2, r1
 8000b90:	4694      	mov	ip, r2
 8000b92:	d969      	bls.n	8000c68 <__udivmoddi4+0xe8>
 8000b94:	fab2 f282 	clz	r2, r2
 8000b98:	b152      	cbz	r2, 8000bb0 <__udivmoddi4+0x30>
 8000b9a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b9e:	f1c2 0120 	rsb	r1, r2, #32
 8000ba2:	fa20 f101 	lsr.w	r1, r0, r1
 8000ba6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000baa:	ea41 0e03 	orr.w	lr, r1, r3
 8000bae:	4094      	lsls	r4, r2
 8000bb0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bb4:	0c21      	lsrs	r1, r4, #16
 8000bb6:	fbbe f6f8 	udiv	r6, lr, r8
 8000bba:	fa1f f78c 	uxth.w	r7, ip
 8000bbe:	fb08 e316 	mls	r3, r8, r6, lr
 8000bc2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bc6:	fb06 f107 	mul.w	r1, r6, r7
 8000bca:	4299      	cmp	r1, r3
 8000bcc:	d90a      	bls.n	8000be4 <__udivmoddi4+0x64>
 8000bce:	eb1c 0303 	adds.w	r3, ip, r3
 8000bd2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bd6:	f080 811f 	bcs.w	8000e18 <__udivmoddi4+0x298>
 8000bda:	4299      	cmp	r1, r3
 8000bdc:	f240 811c 	bls.w	8000e18 <__udivmoddi4+0x298>
 8000be0:	3e02      	subs	r6, #2
 8000be2:	4463      	add	r3, ip
 8000be4:	1a5b      	subs	r3, r3, r1
 8000be6:	b2a4      	uxth	r4, r4
 8000be8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bec:	fb08 3310 	mls	r3, r8, r0, r3
 8000bf0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bf4:	fb00 f707 	mul.w	r7, r0, r7
 8000bf8:	42a7      	cmp	r7, r4
 8000bfa:	d90a      	bls.n	8000c12 <__udivmoddi4+0x92>
 8000bfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000c00:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c04:	f080 810a 	bcs.w	8000e1c <__udivmoddi4+0x29c>
 8000c08:	42a7      	cmp	r7, r4
 8000c0a:	f240 8107 	bls.w	8000e1c <__udivmoddi4+0x29c>
 8000c0e:	4464      	add	r4, ip
 8000c10:	3802      	subs	r0, #2
 8000c12:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c16:	1be4      	subs	r4, r4, r7
 8000c18:	2600      	movs	r6, #0
 8000c1a:	b11d      	cbz	r5, 8000c24 <__udivmoddi4+0xa4>
 8000c1c:	40d4      	lsrs	r4, r2
 8000c1e:	2300      	movs	r3, #0
 8000c20:	e9c5 4300 	strd	r4, r3, [r5]
 8000c24:	4631      	mov	r1, r6
 8000c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2a:	428b      	cmp	r3, r1
 8000c2c:	d909      	bls.n	8000c42 <__udivmoddi4+0xc2>
 8000c2e:	2d00      	cmp	r5, #0
 8000c30:	f000 80ef 	beq.w	8000e12 <__udivmoddi4+0x292>
 8000c34:	2600      	movs	r6, #0
 8000c36:	e9c5 0100 	strd	r0, r1, [r5]
 8000c3a:	4630      	mov	r0, r6
 8000c3c:	4631      	mov	r1, r6
 8000c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c42:	fab3 f683 	clz	r6, r3
 8000c46:	2e00      	cmp	r6, #0
 8000c48:	d14a      	bne.n	8000ce0 <__udivmoddi4+0x160>
 8000c4a:	428b      	cmp	r3, r1
 8000c4c:	d302      	bcc.n	8000c54 <__udivmoddi4+0xd4>
 8000c4e:	4282      	cmp	r2, r0
 8000c50:	f200 80f9 	bhi.w	8000e46 <__udivmoddi4+0x2c6>
 8000c54:	1a84      	subs	r4, r0, r2
 8000c56:	eb61 0303 	sbc.w	r3, r1, r3
 8000c5a:	2001      	movs	r0, #1
 8000c5c:	469e      	mov	lr, r3
 8000c5e:	2d00      	cmp	r5, #0
 8000c60:	d0e0      	beq.n	8000c24 <__udivmoddi4+0xa4>
 8000c62:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c66:	e7dd      	b.n	8000c24 <__udivmoddi4+0xa4>
 8000c68:	b902      	cbnz	r2, 8000c6c <__udivmoddi4+0xec>
 8000c6a:	deff      	udf	#255	; 0xff
 8000c6c:	fab2 f282 	clz	r2, r2
 8000c70:	2a00      	cmp	r2, #0
 8000c72:	f040 8092 	bne.w	8000d9a <__udivmoddi4+0x21a>
 8000c76:	eba1 010c 	sub.w	r1, r1, ip
 8000c7a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c7e:	fa1f fe8c 	uxth.w	lr, ip
 8000c82:	2601      	movs	r6, #1
 8000c84:	0c20      	lsrs	r0, r4, #16
 8000c86:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c8a:	fb07 1113 	mls	r1, r7, r3, r1
 8000c8e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c92:	fb0e f003 	mul.w	r0, lr, r3
 8000c96:	4288      	cmp	r0, r1
 8000c98:	d908      	bls.n	8000cac <__udivmoddi4+0x12c>
 8000c9a:	eb1c 0101 	adds.w	r1, ip, r1
 8000c9e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ca2:	d202      	bcs.n	8000caa <__udivmoddi4+0x12a>
 8000ca4:	4288      	cmp	r0, r1
 8000ca6:	f200 80cb 	bhi.w	8000e40 <__udivmoddi4+0x2c0>
 8000caa:	4643      	mov	r3, r8
 8000cac:	1a09      	subs	r1, r1, r0
 8000cae:	b2a4      	uxth	r4, r4
 8000cb0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cb4:	fb07 1110 	mls	r1, r7, r0, r1
 8000cb8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cbc:	fb0e fe00 	mul.w	lr, lr, r0
 8000cc0:	45a6      	cmp	lr, r4
 8000cc2:	d908      	bls.n	8000cd6 <__udivmoddi4+0x156>
 8000cc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ccc:	d202      	bcs.n	8000cd4 <__udivmoddi4+0x154>
 8000cce:	45a6      	cmp	lr, r4
 8000cd0:	f200 80bb 	bhi.w	8000e4a <__udivmoddi4+0x2ca>
 8000cd4:	4608      	mov	r0, r1
 8000cd6:	eba4 040e 	sub.w	r4, r4, lr
 8000cda:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000cde:	e79c      	b.n	8000c1a <__udivmoddi4+0x9a>
 8000ce0:	f1c6 0720 	rsb	r7, r6, #32
 8000ce4:	40b3      	lsls	r3, r6
 8000ce6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cea:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cee:	fa20 f407 	lsr.w	r4, r0, r7
 8000cf2:	fa01 f306 	lsl.w	r3, r1, r6
 8000cf6:	431c      	orrs	r4, r3
 8000cf8:	40f9      	lsrs	r1, r7
 8000cfa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cfe:	fa00 f306 	lsl.w	r3, r0, r6
 8000d02:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d06:	0c20      	lsrs	r0, r4, #16
 8000d08:	fa1f fe8c 	uxth.w	lr, ip
 8000d0c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d10:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d14:	fb08 f00e 	mul.w	r0, r8, lr
 8000d18:	4288      	cmp	r0, r1
 8000d1a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d1e:	d90b      	bls.n	8000d38 <__udivmoddi4+0x1b8>
 8000d20:	eb1c 0101 	adds.w	r1, ip, r1
 8000d24:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d28:	f080 8088 	bcs.w	8000e3c <__udivmoddi4+0x2bc>
 8000d2c:	4288      	cmp	r0, r1
 8000d2e:	f240 8085 	bls.w	8000e3c <__udivmoddi4+0x2bc>
 8000d32:	f1a8 0802 	sub.w	r8, r8, #2
 8000d36:	4461      	add	r1, ip
 8000d38:	1a09      	subs	r1, r1, r0
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d40:	fb09 1110 	mls	r1, r9, r0, r1
 8000d44:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d4c:	458e      	cmp	lr, r1
 8000d4e:	d908      	bls.n	8000d62 <__udivmoddi4+0x1e2>
 8000d50:	eb1c 0101 	adds.w	r1, ip, r1
 8000d54:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d58:	d26c      	bcs.n	8000e34 <__udivmoddi4+0x2b4>
 8000d5a:	458e      	cmp	lr, r1
 8000d5c:	d96a      	bls.n	8000e34 <__udivmoddi4+0x2b4>
 8000d5e:	3802      	subs	r0, #2
 8000d60:	4461      	add	r1, ip
 8000d62:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d66:	fba0 9402 	umull	r9, r4, r0, r2
 8000d6a:	eba1 010e 	sub.w	r1, r1, lr
 8000d6e:	42a1      	cmp	r1, r4
 8000d70:	46c8      	mov	r8, r9
 8000d72:	46a6      	mov	lr, r4
 8000d74:	d356      	bcc.n	8000e24 <__udivmoddi4+0x2a4>
 8000d76:	d053      	beq.n	8000e20 <__udivmoddi4+0x2a0>
 8000d78:	b15d      	cbz	r5, 8000d92 <__udivmoddi4+0x212>
 8000d7a:	ebb3 0208 	subs.w	r2, r3, r8
 8000d7e:	eb61 010e 	sbc.w	r1, r1, lr
 8000d82:	fa01 f707 	lsl.w	r7, r1, r7
 8000d86:	fa22 f306 	lsr.w	r3, r2, r6
 8000d8a:	40f1      	lsrs	r1, r6
 8000d8c:	431f      	orrs	r7, r3
 8000d8e:	e9c5 7100 	strd	r7, r1, [r5]
 8000d92:	2600      	movs	r6, #0
 8000d94:	4631      	mov	r1, r6
 8000d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9a:	f1c2 0320 	rsb	r3, r2, #32
 8000d9e:	40d8      	lsrs	r0, r3
 8000da0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000da4:	fa21 f303 	lsr.w	r3, r1, r3
 8000da8:	4091      	lsls	r1, r2
 8000daa:	4301      	orrs	r1, r0
 8000dac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db0:	fa1f fe8c 	uxth.w	lr, ip
 8000db4:	fbb3 f0f7 	udiv	r0, r3, r7
 8000db8:	fb07 3610 	mls	r6, r7, r0, r3
 8000dbc:	0c0b      	lsrs	r3, r1, #16
 8000dbe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000dc2:	fb00 f60e 	mul.w	r6, r0, lr
 8000dc6:	429e      	cmp	r6, r3
 8000dc8:	fa04 f402 	lsl.w	r4, r4, r2
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0x260>
 8000dce:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dd6:	d22f      	bcs.n	8000e38 <__udivmoddi4+0x2b8>
 8000dd8:	429e      	cmp	r6, r3
 8000dda:	d92d      	bls.n	8000e38 <__udivmoddi4+0x2b8>
 8000ddc:	3802      	subs	r0, #2
 8000dde:	4463      	add	r3, ip
 8000de0:	1b9b      	subs	r3, r3, r6
 8000de2:	b289      	uxth	r1, r1
 8000de4:	fbb3 f6f7 	udiv	r6, r3, r7
 8000de8:	fb07 3316 	mls	r3, r7, r6, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb06 f30e 	mul.w	r3, r6, lr
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x28a>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e00:	d216      	bcs.n	8000e30 <__udivmoddi4+0x2b0>
 8000e02:	428b      	cmp	r3, r1
 8000e04:	d914      	bls.n	8000e30 <__udivmoddi4+0x2b0>
 8000e06:	3e02      	subs	r6, #2
 8000e08:	4461      	add	r1, ip
 8000e0a:	1ac9      	subs	r1, r1, r3
 8000e0c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e10:	e738      	b.n	8000c84 <__udivmoddi4+0x104>
 8000e12:	462e      	mov	r6, r5
 8000e14:	4628      	mov	r0, r5
 8000e16:	e705      	b.n	8000c24 <__udivmoddi4+0xa4>
 8000e18:	4606      	mov	r6, r0
 8000e1a:	e6e3      	b.n	8000be4 <__udivmoddi4+0x64>
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	e6f8      	b.n	8000c12 <__udivmoddi4+0x92>
 8000e20:	454b      	cmp	r3, r9
 8000e22:	d2a9      	bcs.n	8000d78 <__udivmoddi4+0x1f8>
 8000e24:	ebb9 0802 	subs.w	r8, r9, r2
 8000e28:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e2c:	3801      	subs	r0, #1
 8000e2e:	e7a3      	b.n	8000d78 <__udivmoddi4+0x1f8>
 8000e30:	4646      	mov	r6, r8
 8000e32:	e7ea      	b.n	8000e0a <__udivmoddi4+0x28a>
 8000e34:	4620      	mov	r0, r4
 8000e36:	e794      	b.n	8000d62 <__udivmoddi4+0x1e2>
 8000e38:	4640      	mov	r0, r8
 8000e3a:	e7d1      	b.n	8000de0 <__udivmoddi4+0x260>
 8000e3c:	46d0      	mov	r8, sl
 8000e3e:	e77b      	b.n	8000d38 <__udivmoddi4+0x1b8>
 8000e40:	3b02      	subs	r3, #2
 8000e42:	4461      	add	r1, ip
 8000e44:	e732      	b.n	8000cac <__udivmoddi4+0x12c>
 8000e46:	4630      	mov	r0, r6
 8000e48:	e709      	b.n	8000c5e <__udivmoddi4+0xde>
 8000e4a:	4464      	add	r4, ip
 8000e4c:	3802      	subs	r0, #2
 8000e4e:	e742      	b.n	8000cd6 <__udivmoddi4+0x156>

08000e50 <__aeabi_idiv0>:
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	0000      	movs	r0, r0
	...

08000e58 <decodeGGA>:
   @Returns 0 on success
   @ returns 1, 2 depending on where the return statement is excuted, check function for more details
*/

int decodeGGA (char *GGAbuffer, GGASTRUCT *gga)
{
 8000e58:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000e5c:	b08c      	sub	sp, #48	; 0x30
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	6078      	str	r0, [r7, #4]
 8000e62:	6039      	str	r1, [r7, #0]
	inx = 0;
 8000e64:	4b5b      	ldr	r3, [pc, #364]	; (8000fd4 <decodeGGA+0x17c>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	601a      	str	r2, [r3, #0]
	char buffer[12];
	int i = 0;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 8000e6e:	e004      	b.n	8000e7a <decodeGGA+0x22>
 8000e70:	4b58      	ldr	r3, [pc, #352]	; (8000fd4 <decodeGGA+0x17c>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	3301      	adds	r3, #1
 8000e76:	4a57      	ldr	r2, [pc, #348]	; (8000fd4 <decodeGGA+0x17c>)
 8000e78:	6013      	str	r3, [r2, #0]
 8000e7a:	4b56      	ldr	r3, [pc, #344]	; (8000fd4 <decodeGGA+0x17c>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	461a      	mov	r2, r3
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	4413      	add	r3, r2
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	2b2c      	cmp	r3, #44	; 0x2c
 8000e88:	d1f2      	bne.n	8000e70 <decodeGGA+0x18>
	inx++;
 8000e8a:	4b52      	ldr	r3, [pc, #328]	; (8000fd4 <decodeGGA+0x17c>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	3301      	adds	r3, #1
 8000e90:	4a50      	ldr	r2, [pc, #320]	; (8000fd4 <decodeGGA+0x17c>)
 8000e92:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // After time ','
 8000e94:	e004      	b.n	8000ea0 <decodeGGA+0x48>
 8000e96:	4b4f      	ldr	r3, [pc, #316]	; (8000fd4 <decodeGGA+0x17c>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	4a4d      	ldr	r2, [pc, #308]	; (8000fd4 <decodeGGA+0x17c>)
 8000e9e:	6013      	str	r3, [r2, #0]
 8000ea0:	4b4c      	ldr	r3, [pc, #304]	; (8000fd4 <decodeGGA+0x17c>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4413      	add	r3, r2
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	2b2c      	cmp	r3, #44	; 0x2c
 8000eae:	d1f2      	bne.n	8000e96 <decodeGGA+0x3e>
	inx++;
 8000eb0:	4b48      	ldr	r3, [pc, #288]	; (8000fd4 <decodeGGA+0x17c>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	4a47      	ldr	r2, [pc, #284]	; (8000fd4 <decodeGGA+0x17c>)
 8000eb8:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after latitude ','
 8000eba:	e004      	b.n	8000ec6 <decodeGGA+0x6e>
 8000ebc:	4b45      	ldr	r3, [pc, #276]	; (8000fd4 <decodeGGA+0x17c>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	3301      	adds	r3, #1
 8000ec2:	4a44      	ldr	r2, [pc, #272]	; (8000fd4 <decodeGGA+0x17c>)
 8000ec4:	6013      	str	r3, [r2, #0]
 8000ec6:	4b43      	ldr	r3, [pc, #268]	; (8000fd4 <decodeGGA+0x17c>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	461a      	mov	r2, r3
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	4413      	add	r3, r2
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	2b2c      	cmp	r3, #44	; 0x2c
 8000ed4:	d1f2      	bne.n	8000ebc <decodeGGA+0x64>
	inx++;
 8000ed6:	4b3f      	ldr	r3, [pc, #252]	; (8000fd4 <decodeGGA+0x17c>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	3301      	adds	r3, #1
 8000edc:	4a3d      	ldr	r2, [pc, #244]	; (8000fd4 <decodeGGA+0x17c>)
 8000ede:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after NS ','
 8000ee0:	e004      	b.n	8000eec <decodeGGA+0x94>
 8000ee2:	4b3c      	ldr	r3, [pc, #240]	; (8000fd4 <decodeGGA+0x17c>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	4a3a      	ldr	r2, [pc, #232]	; (8000fd4 <decodeGGA+0x17c>)
 8000eea:	6013      	str	r3, [r2, #0]
 8000eec:	4b39      	ldr	r3, [pc, #228]	; (8000fd4 <decodeGGA+0x17c>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	2b2c      	cmp	r3, #44	; 0x2c
 8000efa:	d1f2      	bne.n	8000ee2 <decodeGGA+0x8a>
	inx++;
 8000efc:	4b35      	ldr	r3, [pc, #212]	; (8000fd4 <decodeGGA+0x17c>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	3301      	adds	r3, #1
 8000f02:	4a34      	ldr	r2, [pc, #208]	; (8000fd4 <decodeGGA+0x17c>)
 8000f04:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after longitude ','
 8000f06:	e004      	b.n	8000f12 <decodeGGA+0xba>
 8000f08:	4b32      	ldr	r3, [pc, #200]	; (8000fd4 <decodeGGA+0x17c>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	4a31      	ldr	r2, [pc, #196]	; (8000fd4 <decodeGGA+0x17c>)
 8000f10:	6013      	str	r3, [r2, #0]
 8000f12:	4b30      	ldr	r3, [pc, #192]	; (8000fd4 <decodeGGA+0x17c>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	461a      	mov	r2, r3
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	2b2c      	cmp	r3, #44	; 0x2c
 8000f20:	d1f2      	bne.n	8000f08 <decodeGGA+0xb0>
	inx++;
 8000f22:	4b2c      	ldr	r3, [pc, #176]	; (8000fd4 <decodeGGA+0x17c>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	3301      	adds	r3, #1
 8000f28:	4a2a      	ldr	r2, [pc, #168]	; (8000fd4 <decodeGGA+0x17c>)
 8000f2a:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after EW ','
 8000f2c:	e004      	b.n	8000f38 <decodeGGA+0xe0>
 8000f2e:	4b29      	ldr	r3, [pc, #164]	; (8000fd4 <decodeGGA+0x17c>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	3301      	adds	r3, #1
 8000f34:	4a27      	ldr	r2, [pc, #156]	; (8000fd4 <decodeGGA+0x17c>)
 8000f36:	6013      	str	r3, [r2, #0]
 8000f38:	4b26      	ldr	r3, [pc, #152]	; (8000fd4 <decodeGGA+0x17c>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4413      	add	r3, r2
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	2b2c      	cmp	r3, #44	; 0x2c
 8000f46:	d1f2      	bne.n	8000f2e <decodeGGA+0xd6>
	inx++;  // reached the character to identify the fix
 8000f48:	4b22      	ldr	r3, [pc, #136]	; (8000fd4 <decodeGGA+0x17c>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	4a21      	ldr	r2, [pc, #132]	; (8000fd4 <decodeGGA+0x17c>)
 8000f50:	6013      	str	r3, [r2, #0]
	if ((GGAbuffer[inx] == '1') || (GGAbuffer[inx] == '2') || (GGAbuffer[inx] == '6'))   // 0 indicates no fix yet
 8000f52:	4b20      	ldr	r3, [pc, #128]	; (8000fd4 <decodeGGA+0x17c>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	461a      	mov	r2, r3
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	2b31      	cmp	r3, #49	; 0x31
 8000f60:	d00f      	beq.n	8000f82 <decodeGGA+0x12a>
 8000f62:	4b1c      	ldr	r3, [pc, #112]	; (8000fd4 <decodeGGA+0x17c>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	461a      	mov	r2, r3
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	2b32      	cmp	r3, #50	; 0x32
 8000f70:	d007      	beq.n	8000f82 <decodeGGA+0x12a>
 8000f72:	4b18      	ldr	r3, [pc, #96]	; (8000fd4 <decodeGGA+0x17c>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	461a      	mov	r2, r3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	2b36      	cmp	r3, #54	; 0x36
 8000f80:	d106      	bne.n	8000f90 <decodeGGA+0x138>
	{
		gga->isfixValid = 1;   // fix available
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	2201      	movs	r2, #1
 8000f86:	61da      	str	r2, [r3, #28]
		inx = 0;   // reset the index. We will start from the inx=0 and extract information now
 8000f88:	4b12      	ldr	r3, [pc, #72]	; (8000fd4 <decodeGGA+0x17c>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	601a      	str	r2, [r3, #0]
	else
	{
		gga->isfixValid = 0;   // If the fix is not available
		return 1;  // return error
	}
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 8000f8e:	e009      	b.n	8000fa4 <decodeGGA+0x14c>
		gga->isfixValid = 0;   // If the fix is not available
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	2200      	movs	r2, #0
 8000f94:	61da      	str	r2, [r3, #28]
		return 1;  // return error
 8000f96:	2301      	movs	r3, #1
 8000f98:	e2fd      	b.n	8001596 <decodeGGA+0x73e>
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 8000f9a:	4b0e      	ldr	r3, [pc, #56]	; (8000fd4 <decodeGGA+0x17c>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	4a0c      	ldr	r2, [pc, #48]	; (8000fd4 <decodeGGA+0x17c>)
 8000fa2:	6013      	str	r3, [r2, #0]
 8000fa4:	4b0b      	ldr	r3, [pc, #44]	; (8000fd4 <decodeGGA+0x17c>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	461a      	mov	r2, r3
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4413      	add	r3, r2
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	2b2c      	cmp	r3, #44	; 0x2c
 8000fb2:	d1f2      	bne.n	8000f9a <decodeGGA+0x142>


/*********************** Get TIME ***************************/
//(Update the GMT Offset at the top of this file)

	inx++;   // reach the first number in time
 8000fb4:	4b07      	ldr	r3, [pc, #28]	; (8000fd4 <decodeGGA+0x17c>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	3301      	adds	r3, #1
 8000fba:	4a06      	ldr	r2, [pc, #24]	; (8000fd4 <decodeGGA+0x17c>)
 8000fbc:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8000fbe:	f107 030c 	add.w	r3, r7, #12
 8000fc2:	220c      	movs	r2, #12
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f009 f910 	bl	800a1ec <memset>
	i=0;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 8000fd0:	e016      	b.n	8001000 <decodeGGA+0x1a8>
 8000fd2:	bf00      	nop
 8000fd4:	200000b0 	.word	0x200000b0
	{
		buffer[i] = GGAbuffer[inx];
 8000fd8:	4bab      	ldr	r3, [pc, #684]	; (8001288 <decodeGGA+0x430>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	461a      	mov	r2, r3
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	7819      	ldrb	r1, [r3, #0]
 8000fe4:	f107 020c 	add.w	r2, r7, #12
 8000fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fea:	4413      	add	r3, r2
 8000fec:	460a      	mov	r2, r1
 8000fee:	701a      	strb	r2, [r3, #0]
		i++;
 8000ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 8000ff6:	4ba4      	ldr	r3, [pc, #656]	; (8001288 <decodeGGA+0x430>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	4aa2      	ldr	r2, [pc, #648]	; (8001288 <decodeGGA+0x430>)
 8000ffe:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 8001000:	4ba1      	ldr	r3, [pc, #644]	; (8001288 <decodeGGA+0x430>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	461a      	mov	r2, r3
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4413      	add	r3, r2
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	2b2c      	cmp	r3, #44	; 0x2c
 800100e:	d1e3      	bne.n	8000fd8 <decodeGGA+0x180>
	}

	hr = (atoi(buffer)/10000) + GMT/100;   // get the hours from the 6 digit number
 8001010:	f107 030c 	add.w	r3, r7, #12
 8001014:	4618      	mov	r0, r3
 8001016:	f009 f8ab 	bl	800a170 <atoi>
 800101a:	4603      	mov	r3, r0
 800101c:	4a9b      	ldr	r2, [pc, #620]	; (800128c <decodeGGA+0x434>)
 800101e:	fb82 1203 	smull	r1, r2, r2, r3
 8001022:	1312      	asrs	r2, r2, #12
 8001024:	17db      	asrs	r3, r3, #31
 8001026:	1ad2      	subs	r2, r2, r3
 8001028:	4b99      	ldr	r3, [pc, #612]	; (8001290 <decodeGGA+0x438>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4999      	ldr	r1, [pc, #612]	; (8001294 <decodeGGA+0x43c>)
 800102e:	fb81 0103 	smull	r0, r1, r1, r3
 8001032:	1149      	asrs	r1, r1, #5
 8001034:	17db      	asrs	r3, r3, #31
 8001036:	1acb      	subs	r3, r1, r3
 8001038:	4413      	add	r3, r2
 800103a:	4a97      	ldr	r2, [pc, #604]	; (8001298 <decodeGGA+0x440>)
 800103c:	6013      	str	r3, [r2, #0]

	min = ((atoi(buffer)/100)%100) + GMT%100;  // get the minutes from the 6 digit number
 800103e:	f107 030c 	add.w	r3, r7, #12
 8001042:	4618      	mov	r0, r3
 8001044:	f009 f894 	bl	800a170 <atoi>
 8001048:	4603      	mov	r3, r0
 800104a:	4a92      	ldr	r2, [pc, #584]	; (8001294 <decodeGGA+0x43c>)
 800104c:	fb82 1203 	smull	r1, r2, r2, r3
 8001050:	1152      	asrs	r2, r2, #5
 8001052:	17db      	asrs	r3, r3, #31
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	4a8f      	ldr	r2, [pc, #572]	; (8001294 <decodeGGA+0x43c>)
 8001058:	fb82 1203 	smull	r1, r2, r2, r3
 800105c:	1151      	asrs	r1, r2, #5
 800105e:	17da      	asrs	r2, r3, #31
 8001060:	1a8a      	subs	r2, r1, r2
 8001062:	2164      	movs	r1, #100	; 0x64
 8001064:	fb01 f202 	mul.w	r2, r1, r2
 8001068:	1a9a      	subs	r2, r3, r2
 800106a:	4b89      	ldr	r3, [pc, #548]	; (8001290 <decodeGGA+0x438>)
 800106c:	6819      	ldr	r1, [r3, #0]
 800106e:	4b89      	ldr	r3, [pc, #548]	; (8001294 <decodeGGA+0x43c>)
 8001070:	fb83 0301 	smull	r0, r3, r3, r1
 8001074:	1158      	asrs	r0, r3, #5
 8001076:	17cb      	asrs	r3, r1, #31
 8001078:	1ac3      	subs	r3, r0, r3
 800107a:	2064      	movs	r0, #100	; 0x64
 800107c:	fb00 f303 	mul.w	r3, r0, r3
 8001080:	1acb      	subs	r3, r1, r3
 8001082:	4413      	add	r3, r2
 8001084:	4a85      	ldr	r2, [pc, #532]	; (800129c <decodeGGA+0x444>)
 8001086:	6013      	str	r3, [r2, #0]

	// adjust time.. This part still needs to be tested
	if (min > 59) 
 8001088:	4b84      	ldr	r3, [pc, #528]	; (800129c <decodeGGA+0x444>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2b3b      	cmp	r3, #59	; 0x3b
 800108e:	dd09      	ble.n	80010a4 <decodeGGA+0x24c>
	{
		min = min-60;
 8001090:	4b82      	ldr	r3, [pc, #520]	; (800129c <decodeGGA+0x444>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	3b3c      	subs	r3, #60	; 0x3c
 8001096:	4a81      	ldr	r2, [pc, #516]	; (800129c <decodeGGA+0x444>)
 8001098:	6013      	str	r3, [r2, #0]
		hr++;
 800109a:	4b7f      	ldr	r3, [pc, #508]	; (8001298 <decodeGGA+0x440>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	3301      	adds	r3, #1
 80010a0:	4a7d      	ldr	r2, [pc, #500]	; (8001298 <decodeGGA+0x440>)
 80010a2:	6013      	str	r3, [r2, #0]
	}
	if (hr<0)
 80010a4:	4b7c      	ldr	r3, [pc, #496]	; (8001298 <decodeGGA+0x440>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	da09      	bge.n	80010c0 <decodeGGA+0x268>
	{
		hr=24+hr;
 80010ac:	4b7a      	ldr	r3, [pc, #488]	; (8001298 <decodeGGA+0x440>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	3318      	adds	r3, #24
 80010b2:	4a79      	ldr	r2, [pc, #484]	; (8001298 <decodeGGA+0x440>)
 80010b4:	6013      	str	r3, [r2, #0]
		daychange--;
 80010b6:	4b7a      	ldr	r3, [pc, #488]	; (80012a0 <decodeGGA+0x448>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	3b01      	subs	r3, #1
 80010bc:	4a78      	ldr	r2, [pc, #480]	; (80012a0 <decodeGGA+0x448>)
 80010be:	6013      	str	r3, [r2, #0]
	}
	if (hr>=24)
 80010c0:	4b75      	ldr	r3, [pc, #468]	; (8001298 <decodeGGA+0x440>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2b17      	cmp	r3, #23
 80010c6:	dd09      	ble.n	80010dc <decodeGGA+0x284>
	{
		hr=hr-24;
 80010c8:	4b73      	ldr	r3, [pc, #460]	; (8001298 <decodeGGA+0x440>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	3b18      	subs	r3, #24
 80010ce:	4a72      	ldr	r2, [pc, #456]	; (8001298 <decodeGGA+0x440>)
 80010d0:	6013      	str	r3, [r2, #0]
		daychange++;
 80010d2:	4b73      	ldr	r3, [pc, #460]	; (80012a0 <decodeGGA+0x448>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	3301      	adds	r3, #1
 80010d8:	4a71      	ldr	r2, [pc, #452]	; (80012a0 <decodeGGA+0x448>)
 80010da:	6013      	str	r3, [r2, #0]
	}

	// Store the time in the GGA structure
	gga->tim.hour = hr;
 80010dc:	4b6e      	ldr	r3, [pc, #440]	; (8001298 <decodeGGA+0x440>)
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	611a      	str	r2, [r3, #16]
	gga->tim.min = min;
 80010e4:	4b6d      	ldr	r3, [pc, #436]	; (800129c <decodeGGA+0x444>)
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	615a      	str	r2, [r3, #20]
	gga->tim.sec = atoi(buffer)%100;
 80010ec:	f107 030c 	add.w	r3, r7, #12
 80010f0:	4618      	mov	r0, r3
 80010f2:	f009 f83d 	bl	800a170 <atoi>
 80010f6:	4602      	mov	r2, r0
 80010f8:	4b66      	ldr	r3, [pc, #408]	; (8001294 <decodeGGA+0x43c>)
 80010fa:	fb83 1302 	smull	r1, r3, r3, r2
 80010fe:	1159      	asrs	r1, r3, #5
 8001100:	17d3      	asrs	r3, r2, #31
 8001102:	1acb      	subs	r3, r1, r3
 8001104:	2164      	movs	r1, #100	; 0x64
 8001106:	fb01 f303 	mul.w	r3, r1, r3
 800110a:	1ad3      	subs	r3, r2, r3
 800110c:	683a      	ldr	r2, [r7, #0]
 800110e:	6193      	str	r3, [r2, #24]

/***************** Get LATITUDE  **********************/
	inx++;   // Reach the first number in the lattitude
 8001110:	4b5d      	ldr	r3, [pc, #372]	; (8001288 <decodeGGA+0x430>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	3301      	adds	r3, #1
 8001116:	4a5c      	ldr	r2, [pc, #368]	; (8001288 <decodeGGA+0x430>)
 8001118:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 800111a:	f107 030c 	add.w	r3, r7, #12
 800111e:	220c      	movs	r2, #12
 8001120:	2100      	movs	r1, #0
 8001122:	4618      	mov	r0, r3
 8001124:	f009 f862 	bl	800a1ec <memset>
	i=0;
 8001128:	2300      	movs	r3, #0
 800112a:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')   // copy upto the we reach the after lattitude ','
 800112c:	e013      	b.n	8001156 <decodeGGA+0x2fe>
	{
		buffer[i] = GGAbuffer[inx];
 800112e:	4b56      	ldr	r3, [pc, #344]	; (8001288 <decodeGGA+0x430>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	461a      	mov	r2, r3
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	4413      	add	r3, r2
 8001138:	7819      	ldrb	r1, [r3, #0]
 800113a:	f107 020c 	add.w	r2, r7, #12
 800113e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001140:	4413      	add	r3, r2
 8001142:	460a      	mov	r2, r1
 8001144:	701a      	strb	r2, [r3, #0]
		i++;
 8001146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001148:	3301      	adds	r3, #1
 800114a:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 800114c:	4b4e      	ldr	r3, [pc, #312]	; (8001288 <decodeGGA+0x430>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	3301      	adds	r3, #1
 8001152:	4a4d      	ldr	r2, [pc, #308]	; (8001288 <decodeGGA+0x430>)
 8001154:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')   // copy upto the we reach the after lattitude ','
 8001156:	4b4c      	ldr	r3, [pc, #304]	; (8001288 <decodeGGA+0x430>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	461a      	mov	r2, r3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	4413      	add	r3, r2
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	2b2c      	cmp	r3, #44	; 0x2c
 8001164:	d1e3      	bne.n	800112e <decodeGGA+0x2d6>
	}
	if (strlen(buffer) < 6) return 2;  // If the buffer length is not appropriate, return error
 8001166:	f107 030c 	add.w	r3, r7, #12
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff f82c 	bl	80001c8 <strlen>
 8001170:	4603      	mov	r3, r0
 8001172:	2b05      	cmp	r3, #5
 8001174:	d801      	bhi.n	800117a <decodeGGA+0x322>
 8001176:	2302      	movs	r3, #2
 8001178:	e20d      	b.n	8001596 <decodeGGA+0x73e>
	int16_t num = (atoi(buffer));   // change the buffer to the number. It will only convert upto decimal
 800117a:	f107 030c 	add.w	r3, r7, #12
 800117e:	4618      	mov	r0, r3
 8001180:	f008 fff6 	bl	800a170 <atoi>
 8001184:	4603      	mov	r3, r0
 8001186:	84fb      	strh	r3, [r7, #38]	; 0x26
	int j = 0;
 8001188:	2300      	movs	r3, #0
 800118a:	62bb      	str	r3, [r7, #40]	; 0x28
	while (buffer[j] != '.') j++;   // Figure out how many digits before the decimal
 800118c:	e002      	b.n	8001194 <decodeGGA+0x33c>
 800118e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001190:	3301      	adds	r3, #1
 8001192:	62bb      	str	r3, [r7, #40]	; 0x28
 8001194:	f107 020c 	add.w	r2, r7, #12
 8001198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800119a:	4413      	add	r3, r2
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	2b2e      	cmp	r3, #46	; 0x2e
 80011a0:	d1f5      	bne.n	800118e <decodeGGA+0x336>
	j++;
 80011a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011a4:	3301      	adds	r3, #1
 80011a6:	62bb      	str	r3, [r7, #40]	; 0x28
	int declen = (strlen(buffer))-j;  // calculate the number of digit after decimal
 80011a8:	f107 030c 	add.w	r3, r7, #12
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff f80b 	bl	80001c8 <strlen>
 80011b2:	4602      	mov	r2, r0
 80011b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011b6:	1ad3      	subs	r3, r2, r3
 80011b8:	623b      	str	r3, [r7, #32]
	int dec = atoi ((char *) buffer+j);  // conver the decimal part a a separate number
 80011ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011bc:	f107 020c 	add.w	r2, r7, #12
 80011c0:	4413      	add	r3, r2
 80011c2:	4618      	mov	r0, r3
 80011c4:	f008 ffd4 	bl	800a170 <atoi>
 80011c8:	61f8      	str	r0, [r7, #28]
	float lat = (num/100.0) + (dec/pow(10, (declen+2)));  // 1234.56789 = 12.3456789
 80011ca:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80011ce:	4618      	mov	r0, r3
 80011d0:	f7ff f954 	bl	800047c <__aeabi_i2d>
 80011d4:	f04f 0200 	mov.w	r2, #0
 80011d8:	4b32      	ldr	r3, [pc, #200]	; (80012a4 <decodeGGA+0x44c>)
 80011da:	f7ff fae3 	bl	80007a4 <__aeabi_ddiv>
 80011de:	4602      	mov	r2, r0
 80011e0:	460b      	mov	r3, r1
 80011e2:	4690      	mov	r8, r2
 80011e4:	4699      	mov	r9, r3
 80011e6:	69f8      	ldr	r0, [r7, #28]
 80011e8:	f7ff f948 	bl	800047c <__aeabi_i2d>
 80011ec:	4604      	mov	r4, r0
 80011ee:	460d      	mov	r5, r1
 80011f0:	6a3b      	ldr	r3, [r7, #32]
 80011f2:	3302      	adds	r3, #2
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff f941 	bl	800047c <__aeabi_i2d>
 80011fa:	4602      	mov	r2, r0
 80011fc:	460b      	mov	r3, r1
 80011fe:	ec43 2b11 	vmov	d1, r2, r3
 8001202:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 8001280 <decodeGGA+0x428>
 8001206:	f009 f983 	bl	800a510 <pow>
 800120a:	ec53 2b10 	vmov	r2, r3, d0
 800120e:	4620      	mov	r0, r4
 8001210:	4629      	mov	r1, r5
 8001212:	f7ff fac7 	bl	80007a4 <__aeabi_ddiv>
 8001216:	4602      	mov	r2, r0
 8001218:	460b      	mov	r3, r1
 800121a:	4640      	mov	r0, r8
 800121c:	4649      	mov	r1, r9
 800121e:	f7fe ffe1 	bl	80001e4 <__adddf3>
 8001222:	4602      	mov	r2, r0
 8001224:	460b      	mov	r3, r1
 8001226:	4610      	mov	r0, r2
 8001228:	4619      	mov	r1, r3
 800122a:	f7ff fc41 	bl	8000ab0 <__aeabi_d2f>
 800122e:	4603      	mov	r3, r0
 8001230:	61bb      	str	r3, [r7, #24]
	gga->lcation.latitude = lat;  // save the lattitude data into the strucure
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	601a      	str	r2, [r3, #0]
	inx++;  
 8001238:	4b13      	ldr	r3, [pc, #76]	; (8001288 <decodeGGA+0x430>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	3301      	adds	r3, #1
 800123e:	4a12      	ldr	r2, [pc, #72]	; (8001288 <decodeGGA+0x430>)
 8001240:	6013      	str	r3, [r2, #0]
	gga->lcation.NS = GGAbuffer[inx];  // save the N/S into the structure
 8001242:	4b11      	ldr	r3, [pc, #68]	; (8001288 <decodeGGA+0x430>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	461a      	mov	r2, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	4413      	add	r3, r2
 800124c:	781a      	ldrb	r2, [r3, #0]
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	711a      	strb	r2, [r3, #4]


/***********************  GET LONGITUDE **********************/
	inx++;  // ',' after NS character
 8001252:	4b0d      	ldr	r3, [pc, #52]	; (8001288 <decodeGGA+0x430>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	3301      	adds	r3, #1
 8001258:	4a0b      	ldr	r2, [pc, #44]	; (8001288 <decodeGGA+0x430>)
 800125a:	6013      	str	r3, [r2, #0]
	inx++;  // Reach the first number in the longitude
 800125c:	4b0a      	ldr	r3, [pc, #40]	; (8001288 <decodeGGA+0x430>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	3301      	adds	r3, #1
 8001262:	4a09      	ldr	r2, [pc, #36]	; (8001288 <decodeGGA+0x430>)
 8001264:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8001266:	f107 030c 	add.w	r3, r7, #12
 800126a:	220c      	movs	r2, #12
 800126c:	2100      	movs	r1, #0
 800126e:	4618      	mov	r0, r3
 8001270:	f008 ffbc 	bl	800a1ec <memset>
	i=0;
 8001274:	2300      	movs	r3, #0
 8001276:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after longitude ','
 8001278:	e02a      	b.n	80012d0 <decodeGGA+0x478>
 800127a:	bf00      	nop
 800127c:	f3af 8000 	nop.w
 8001280:	00000000 	.word	0x00000000
 8001284:	40240000 	.word	0x40240000
 8001288:	200000b0 	.word	0x200000b0
 800128c:	68db8bad 	.word	0x68db8bad
 8001290:	20000000 	.word	0x20000000
 8001294:	51eb851f 	.word	0x51eb851f
 8001298:	200000b4 	.word	0x200000b4
 800129c:	200000b8 	.word	0x200000b8
 80012a0:	200000c8 	.word	0x200000c8
 80012a4:	40590000 	.word	0x40590000
	{
		buffer[i] = GGAbuffer[inx];
 80012a8:	4b8b      	ldr	r3, [pc, #556]	; (80014d8 <decodeGGA+0x680>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	461a      	mov	r2, r3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4413      	add	r3, r2
 80012b2:	7819      	ldrb	r1, [r3, #0]
 80012b4:	f107 020c 	add.w	r2, r7, #12
 80012b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012ba:	4413      	add	r3, r2
 80012bc:	460a      	mov	r2, r1
 80012be:	701a      	strb	r2, [r3, #0]
		i++;
 80012c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012c2:	3301      	adds	r3, #1
 80012c4:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 80012c6:	4b84      	ldr	r3, [pc, #528]	; (80014d8 <decodeGGA+0x680>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	3301      	adds	r3, #1
 80012cc:	4a82      	ldr	r2, [pc, #520]	; (80014d8 <decodeGGA+0x680>)
 80012ce:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after longitude ','
 80012d0:	4b81      	ldr	r3, [pc, #516]	; (80014d8 <decodeGGA+0x680>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	461a      	mov	r2, r3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4413      	add	r3, r2
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	2b2c      	cmp	r3, #44	; 0x2c
 80012de:	d1e3      	bne.n	80012a8 <decodeGGA+0x450>
	}
	num = (atoi(buffer));  // change the buffer to the number. It will only convert upto decimal
 80012e0:	f107 030c 	add.w	r3, r7, #12
 80012e4:	4618      	mov	r0, r3
 80012e6:	f008 ff43 	bl	800a170 <atoi>
 80012ea:	4603      	mov	r3, r0
 80012ec:	84fb      	strh	r3, [r7, #38]	; 0x26
	j = 0;
 80012ee:	2300      	movs	r3, #0
 80012f0:	62bb      	str	r3, [r7, #40]	; 0x28
	while (buffer[j] != '.') j++;  // Figure out how many digits before the decimal
 80012f2:	e002      	b.n	80012fa <decodeGGA+0x4a2>
 80012f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012f6:	3301      	adds	r3, #1
 80012f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80012fa:	f107 020c 	add.w	r2, r7, #12
 80012fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001300:	4413      	add	r3, r2
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	2b2e      	cmp	r3, #46	; 0x2e
 8001306:	d1f5      	bne.n	80012f4 <decodeGGA+0x49c>
	j++;
 8001308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800130a:	3301      	adds	r3, #1
 800130c:	62bb      	str	r3, [r7, #40]	; 0x28
	declen = (strlen(buffer))-j;  // calculate the number of digit after decimal
 800130e:	f107 030c 	add.w	r3, r7, #12
 8001312:	4618      	mov	r0, r3
 8001314:	f7fe ff58 	bl	80001c8 <strlen>
 8001318:	4602      	mov	r2, r0
 800131a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	623b      	str	r3, [r7, #32]
	dec = atoi ((char *) buffer+j);  // conver the decimal part a a separate number
 8001320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001322:	f107 020c 	add.w	r2, r7, #12
 8001326:	4413      	add	r3, r2
 8001328:	4618      	mov	r0, r3
 800132a:	f008 ff21 	bl	800a170 <atoi>
 800132e:	61f8      	str	r0, [r7, #28]
	lat = (num/100.0) + (dec/pow(10, (declen+2)));  // 1234.56789 = 12.3456789
 8001330:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff f8a1 	bl	800047c <__aeabi_i2d>
 800133a:	f04f 0200 	mov.w	r2, #0
 800133e:	4b67      	ldr	r3, [pc, #412]	; (80014dc <decodeGGA+0x684>)
 8001340:	f7ff fa30 	bl	80007a4 <__aeabi_ddiv>
 8001344:	4602      	mov	r2, r0
 8001346:	460b      	mov	r3, r1
 8001348:	4690      	mov	r8, r2
 800134a:	4699      	mov	r9, r3
 800134c:	69f8      	ldr	r0, [r7, #28]
 800134e:	f7ff f895 	bl	800047c <__aeabi_i2d>
 8001352:	4604      	mov	r4, r0
 8001354:	460d      	mov	r5, r1
 8001356:	6a3b      	ldr	r3, [r7, #32]
 8001358:	3302      	adds	r3, #2
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff f88e 	bl	800047c <__aeabi_i2d>
 8001360:	4602      	mov	r2, r0
 8001362:	460b      	mov	r3, r1
 8001364:	ec43 2b11 	vmov	d1, r2, r3
 8001368:	ed9f 0b59 	vldr	d0, [pc, #356]	; 80014d0 <decodeGGA+0x678>
 800136c:	f009 f8d0 	bl	800a510 <pow>
 8001370:	ec53 2b10 	vmov	r2, r3, d0
 8001374:	4620      	mov	r0, r4
 8001376:	4629      	mov	r1, r5
 8001378:	f7ff fa14 	bl	80007a4 <__aeabi_ddiv>
 800137c:	4602      	mov	r2, r0
 800137e:	460b      	mov	r3, r1
 8001380:	4640      	mov	r0, r8
 8001382:	4649      	mov	r1, r9
 8001384:	f7fe ff2e 	bl	80001e4 <__adddf3>
 8001388:	4602      	mov	r2, r0
 800138a:	460b      	mov	r3, r1
 800138c:	4610      	mov	r0, r2
 800138e:	4619      	mov	r1, r3
 8001390:	f7ff fb8e 	bl	8000ab0 <__aeabi_d2f>
 8001394:	4603      	mov	r3, r0
 8001396:	61bb      	str	r3, [r7, #24]
	gga->lcation.longitude = lat;  // save the longitude data into the strucure
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	609a      	str	r2, [r3, #8]
	inx++;
 800139e:	4b4e      	ldr	r3, [pc, #312]	; (80014d8 <decodeGGA+0x680>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	3301      	adds	r3, #1
 80013a4:	4a4c      	ldr	r2, [pc, #304]	; (80014d8 <decodeGGA+0x680>)
 80013a6:	6013      	str	r3, [r2, #0]
	gga->lcation.EW = GGAbuffer[inx];  // save the E/W into the structure
 80013a8:	4b4b      	ldr	r3, [pc, #300]	; (80014d8 <decodeGGA+0x680>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	461a      	mov	r2, r3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4413      	add	r3, r2
 80013b2:	781a      	ldrb	r2, [r3, #0]
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	731a      	strb	r2, [r3, #12]

/**************************************************/
	// skip positition fix
	inx++;   // ',' after E/W
 80013b8:	4b47      	ldr	r3, [pc, #284]	; (80014d8 <decodeGGA+0x680>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	3301      	adds	r3, #1
 80013be:	4a46      	ldr	r2, [pc, #280]	; (80014d8 <decodeGGA+0x680>)
 80013c0:	6013      	str	r3, [r2, #0]
	inx++;   // position fix
 80013c2:	4b45      	ldr	r3, [pc, #276]	; (80014d8 <decodeGGA+0x680>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	3301      	adds	r3, #1
 80013c8:	4a43      	ldr	r2, [pc, #268]	; (80014d8 <decodeGGA+0x680>)
 80013ca:	6013      	str	r3, [r2, #0]
	inx++;   // ',' after position fix;
 80013cc:	4b42      	ldr	r3, [pc, #264]	; (80014d8 <decodeGGA+0x680>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	3301      	adds	r3, #1
 80013d2:	4a41      	ldr	r2, [pc, #260]	; (80014d8 <decodeGGA+0x680>)
 80013d4:	6013      	str	r3, [r2, #0]

	// number of sattelites
	inx++;  // Reach the first number in the satellites
 80013d6:	4b40      	ldr	r3, [pc, #256]	; (80014d8 <decodeGGA+0x680>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	3301      	adds	r3, #1
 80013dc:	4a3e      	ldr	r2, [pc, #248]	; (80014d8 <decodeGGA+0x680>)
 80013de:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 80013e0:	f107 030c 	add.w	r3, r7, #12
 80013e4:	220c      	movs	r2, #12
 80013e6:	2100      	movs	r1, #0
 80013e8:	4618      	mov	r0, r3
 80013ea:	f008 feff 	bl	800a1ec <memset>
	i=0;
 80013ee:	2300      	movs	r3, #0
 80013f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the ',' after number of satellites
 80013f2:	e013      	b.n	800141c <decodeGGA+0x5c4>
	{
		buffer[i] = GGAbuffer[inx];
 80013f4:	4b38      	ldr	r3, [pc, #224]	; (80014d8 <decodeGGA+0x680>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	461a      	mov	r2, r3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4413      	add	r3, r2
 80013fe:	7819      	ldrb	r1, [r3, #0]
 8001400:	f107 020c 	add.w	r2, r7, #12
 8001404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001406:	4413      	add	r3, r2
 8001408:	460a      	mov	r2, r1
 800140a:	701a      	strb	r2, [r3, #0]
		i++;
 800140c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800140e:	3301      	adds	r3, #1
 8001410:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 8001412:	4b31      	ldr	r3, [pc, #196]	; (80014d8 <decodeGGA+0x680>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	3301      	adds	r3, #1
 8001418:	4a2f      	ldr	r2, [pc, #188]	; (80014d8 <decodeGGA+0x680>)
 800141a:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the ',' after number of satellites
 800141c:	4b2e      	ldr	r3, [pc, #184]	; (80014d8 <decodeGGA+0x680>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	461a      	mov	r2, r3
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4413      	add	r3, r2
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	2b2c      	cmp	r3, #44	; 0x2c
 800142a:	d1e3      	bne.n	80013f4 <decodeGGA+0x59c>
	}
	gga->numofsat = atoi(buffer);   // convert the buffer to number and save into the structure
 800142c:	f107 030c 	add.w	r3, r7, #12
 8001430:	4618      	mov	r0, r3
 8001432:	f008 fe9d 	bl	800a170 <atoi>
 8001436:	4602      	mov	r2, r0
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	629a      	str	r2, [r3, #40]	; 0x28


	/***************** skip HDOP  *********************/
	inx++;
 800143c:	4b26      	ldr	r3, [pc, #152]	; (80014d8 <decodeGGA+0x680>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	3301      	adds	r3, #1
 8001442:	4a25      	ldr	r2, [pc, #148]	; (80014d8 <decodeGGA+0x680>)
 8001444:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;
 8001446:	e004      	b.n	8001452 <decodeGGA+0x5fa>
 8001448:	4b23      	ldr	r3, [pc, #140]	; (80014d8 <decodeGGA+0x680>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	3301      	adds	r3, #1
 800144e:	4a22      	ldr	r2, [pc, #136]	; (80014d8 <decodeGGA+0x680>)
 8001450:	6013      	str	r3, [r2, #0]
 8001452:	4b21      	ldr	r3, [pc, #132]	; (80014d8 <decodeGGA+0x680>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	461a      	mov	r2, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	4413      	add	r3, r2
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	2b2c      	cmp	r3, #44	; 0x2c
 8001460:	d1f2      	bne.n	8001448 <decodeGGA+0x5f0>


	/*************** Altitude calculation ********************/
	inx++;
 8001462:	4b1d      	ldr	r3, [pc, #116]	; (80014d8 <decodeGGA+0x680>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	3301      	adds	r3, #1
 8001468:	4a1b      	ldr	r2, [pc, #108]	; (80014d8 <decodeGGA+0x680>)
 800146a:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 800146c:	f107 030c 	add.w	r3, r7, #12
 8001470:	220c      	movs	r2, #12
 8001472:	2100      	movs	r1, #0
 8001474:	4618      	mov	r0, r3
 8001476:	f008 feb9 	bl	800a1ec <memset>
	i=0;
 800147a:	2300      	movs	r3, #0
 800147c:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')
 800147e:	e013      	b.n	80014a8 <decodeGGA+0x650>
	{
		buffer[i] = GGAbuffer[inx];
 8001480:	4b15      	ldr	r3, [pc, #84]	; (80014d8 <decodeGGA+0x680>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	461a      	mov	r2, r3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4413      	add	r3, r2
 800148a:	7819      	ldrb	r1, [r3, #0]
 800148c:	f107 020c 	add.w	r2, r7, #12
 8001490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001492:	4413      	add	r3, r2
 8001494:	460a      	mov	r2, r1
 8001496:	701a      	strb	r2, [r3, #0]
		i++;
 8001498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800149a:	3301      	adds	r3, #1
 800149c:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 800149e:	4b0e      	ldr	r3, [pc, #56]	; (80014d8 <decodeGGA+0x680>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	3301      	adds	r3, #1
 80014a4:	4a0c      	ldr	r2, [pc, #48]	; (80014d8 <decodeGGA+0x680>)
 80014a6:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 80014a8:	4b0b      	ldr	r3, [pc, #44]	; (80014d8 <decodeGGA+0x680>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	461a      	mov	r2, r3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4413      	add	r3, r2
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	2b2c      	cmp	r3, #44	; 0x2c
 80014b6:	d1e3      	bne.n	8001480 <decodeGGA+0x628>
	}
	num = (atoi(buffer));
 80014b8:	f107 030c 	add.w	r3, r7, #12
 80014bc:	4618      	mov	r0, r3
 80014be:	f008 fe57 	bl	800a170 <atoi>
 80014c2:	4603      	mov	r3, r0
 80014c4:	84fb      	strh	r3, [r7, #38]	; 0x26
	j = 0;
 80014c6:	2300      	movs	r3, #0
 80014c8:	62bb      	str	r3, [r7, #40]	; 0x28
	while (buffer[j] != '.') j++;
 80014ca:	e00c      	b.n	80014e6 <decodeGGA+0x68e>
 80014cc:	f3af 8000 	nop.w
 80014d0:	00000000 	.word	0x00000000
 80014d4:	40240000 	.word	0x40240000
 80014d8:	200000b0 	.word	0x200000b0
 80014dc:	40590000 	.word	0x40590000
 80014e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014e2:	3301      	adds	r3, #1
 80014e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80014e6:	f107 020c 	add.w	r2, r7, #12
 80014ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014ec:	4413      	add	r3, r2
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	2b2e      	cmp	r3, #46	; 0x2e
 80014f2:	d1f5      	bne.n	80014e0 <decodeGGA+0x688>
	j++;
 80014f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014f6:	3301      	adds	r3, #1
 80014f8:	62bb      	str	r3, [r7, #40]	; 0x28
	declen = (strlen(buffer))-j;
 80014fa:	f107 030c 	add.w	r3, r7, #12
 80014fe:	4618      	mov	r0, r3
 8001500:	f7fe fe62 	bl	80001c8 <strlen>
 8001504:	4602      	mov	r2, r0
 8001506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	623b      	str	r3, [r7, #32]
	dec = atoi ((char *) buffer+j);
 800150c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800150e:	f107 020c 	add.w	r2, r7, #12
 8001512:	4413      	add	r3, r2
 8001514:	4618      	mov	r0, r3
 8001516:	f008 fe2b 	bl	800a170 <atoi>
 800151a:	61f8      	str	r0, [r7, #28]
	lat = (num) + (dec/pow(10, (declen)));
 800151c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001520:	4618      	mov	r0, r3
 8001522:	f7fe ffab 	bl	800047c <__aeabi_i2d>
 8001526:	4604      	mov	r4, r0
 8001528:	460d      	mov	r5, r1
 800152a:	69f8      	ldr	r0, [r7, #28]
 800152c:	f7fe ffa6 	bl	800047c <__aeabi_i2d>
 8001530:	4680      	mov	r8, r0
 8001532:	4689      	mov	r9, r1
 8001534:	6a38      	ldr	r0, [r7, #32]
 8001536:	f7fe ffa1 	bl	800047c <__aeabi_i2d>
 800153a:	4602      	mov	r2, r0
 800153c:	460b      	mov	r3, r1
 800153e:	ec43 2b11 	vmov	d1, r2, r3
 8001542:	ed9f 0b17 	vldr	d0, [pc, #92]	; 80015a0 <decodeGGA+0x748>
 8001546:	f008 ffe3 	bl	800a510 <pow>
 800154a:	ec53 2b10 	vmov	r2, r3, d0
 800154e:	4640      	mov	r0, r8
 8001550:	4649      	mov	r1, r9
 8001552:	f7ff f927 	bl	80007a4 <__aeabi_ddiv>
 8001556:	4602      	mov	r2, r0
 8001558:	460b      	mov	r3, r1
 800155a:	4620      	mov	r0, r4
 800155c:	4629      	mov	r1, r5
 800155e:	f7fe fe41 	bl	80001e4 <__adddf3>
 8001562:	4602      	mov	r2, r0
 8001564:	460b      	mov	r3, r1
 8001566:	4610      	mov	r0, r2
 8001568:	4619      	mov	r1, r3
 800156a:	f7ff faa1 	bl	8000ab0 <__aeabi_d2f>
 800156e:	4603      	mov	r3, r0
 8001570:	61bb      	str	r3, [r7, #24]
	gga->alt.altitude = lat;
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	621a      	str	r2, [r3, #32]

	inx++;
 8001578:	4b0b      	ldr	r3, [pc, #44]	; (80015a8 <decodeGGA+0x750>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	3301      	adds	r3, #1
 800157e:	4a0a      	ldr	r2, [pc, #40]	; (80015a8 <decodeGGA+0x750>)
 8001580:	6013      	str	r3, [r2, #0]
	gga->alt.unit = GGAbuffer[inx];
 8001582:	4b09      	ldr	r3, [pc, #36]	; (80015a8 <decodeGGA+0x750>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	461a      	mov	r2, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	4413      	add	r3, r2
 800158c:	781a      	ldrb	r2, [r3, #0]
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	return 0;
 8001594:	2300      	movs	r3, #0

}
 8001596:	4618      	mov	r0, r3
 8001598:	3730      	adds	r7, #48	; 0x30
 800159a:	46bd      	mov	sp, r7
 800159c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80015a0:	00000000 	.word	0x00000000
 80015a4:	40240000 	.word	0x40240000
 80015a8:	200000b0 	.word	0x200000b0
 80015ac:	00000000 	.word	0x00000000

080015b0 <decodeRMC>:


int decodeRMC (char *RMCbuffer, RMCSTRUCT *rmc)
{
 80015b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80015b4:	b090      	sub	sp, #64	; 0x40
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
 80015ba:	6039      	str	r1, [r7, #0]
	inx = 0;
 80015bc:	4b94      	ldr	r3, [pc, #592]	; (8001810 <decodeRMC+0x260>)
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]
	char buffer[12];
	int i = 0;
 80015c2:	2300      	movs	r3, #0
 80015c4:	63fb      	str	r3, [r7, #60]	; 0x3c
	while (RMCbuffer[inx] != ',') inx++;  // 1st ,
 80015c6:	e004      	b.n	80015d2 <decodeRMC+0x22>
 80015c8:	4b91      	ldr	r3, [pc, #580]	; (8001810 <decodeRMC+0x260>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	3301      	adds	r3, #1
 80015ce:	4a90      	ldr	r2, [pc, #576]	; (8001810 <decodeRMC+0x260>)
 80015d0:	6013      	str	r3, [r2, #0]
 80015d2:	4b8f      	ldr	r3, [pc, #572]	; (8001810 <decodeRMC+0x260>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	461a      	mov	r2, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	4413      	add	r3, r2
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	2b2c      	cmp	r3, #44	; 0x2c
 80015e0:	d1f2      	bne.n	80015c8 <decodeRMC+0x18>
	inx++;
 80015e2:	4b8b      	ldr	r3, [pc, #556]	; (8001810 <decodeRMC+0x260>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	3301      	adds	r3, #1
 80015e8:	4a89      	ldr	r2, [pc, #548]	; (8001810 <decodeRMC+0x260>)
 80015ea:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // After time ,
 80015ec:	e004      	b.n	80015f8 <decodeRMC+0x48>
 80015ee:	4b88      	ldr	r3, [pc, #544]	; (8001810 <decodeRMC+0x260>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	3301      	adds	r3, #1
 80015f4:	4a86      	ldr	r2, [pc, #536]	; (8001810 <decodeRMC+0x260>)
 80015f6:	6013      	str	r3, [r2, #0]
 80015f8:	4b85      	ldr	r3, [pc, #532]	; (8001810 <decodeRMC+0x260>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	461a      	mov	r2, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4413      	add	r3, r2
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	2b2c      	cmp	r3, #44	; 0x2c
 8001606:	d1f2      	bne.n	80015ee <decodeRMC+0x3e>
	inx++;
 8001608:	4b81      	ldr	r3, [pc, #516]	; (8001810 <decodeRMC+0x260>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	3301      	adds	r3, #1
 800160e:	4a80      	ldr	r2, [pc, #512]	; (8001810 <decodeRMC+0x260>)
 8001610:	6013      	str	r3, [r2, #0]
	if (RMCbuffer[inx] == 'A')  // Here 'A' Indicates the data is valid, and 'V' indicates invalid data
 8001612:	4b7f      	ldr	r3, [pc, #508]	; (8001810 <decodeRMC+0x260>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	461a      	mov	r2, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	4413      	add	r3, r2
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	2b41      	cmp	r3, #65	; 0x41
 8001620:	d10d      	bne.n	800163e <decodeRMC+0x8e>
	{
		rmc->isValid = 1;
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	2201      	movs	r2, #1
 8001626:	615a      	str	r2, [r3, #20]
	else
	{
		rmc->isValid =0;
		return 1;
	}
	inx++;
 8001628:	4b79      	ldr	r3, [pc, #484]	; (8001810 <decodeRMC+0x260>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	3301      	adds	r3, #1
 800162e:	4a78      	ldr	r2, [pc, #480]	; (8001810 <decodeRMC+0x260>)
 8001630:	6013      	str	r3, [r2, #0]
	inx++;
 8001632:	4b77      	ldr	r3, [pc, #476]	; (8001810 <decodeRMC+0x260>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	3301      	adds	r3, #1
 8001638:	4a75      	ldr	r2, [pc, #468]	; (8001810 <decodeRMC+0x260>)
 800163a:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after latitude,
 800163c:	e009      	b.n	8001652 <decodeRMC+0xa2>
		rmc->isValid =0;
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	2200      	movs	r2, #0
 8001642:	615a      	str	r2, [r3, #20]
		return 1;
 8001644:	2301      	movs	r3, #1
 8001646:	e1d8      	b.n	80019fa <decodeRMC+0x44a>
	while (RMCbuffer[inx] != ',') inx++;  // after latitude,
 8001648:	4b71      	ldr	r3, [pc, #452]	; (8001810 <decodeRMC+0x260>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	3301      	adds	r3, #1
 800164e:	4a70      	ldr	r2, [pc, #448]	; (8001810 <decodeRMC+0x260>)
 8001650:	6013      	str	r3, [r2, #0]
 8001652:	4b6f      	ldr	r3, [pc, #444]	; (8001810 <decodeRMC+0x260>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	461a      	mov	r2, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	4413      	add	r3, r2
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	2b2c      	cmp	r3, #44	; 0x2c
 8001660:	d1f2      	bne.n	8001648 <decodeRMC+0x98>
	inx++;
 8001662:	4b6b      	ldr	r3, [pc, #428]	; (8001810 <decodeRMC+0x260>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	3301      	adds	r3, #1
 8001668:	4a69      	ldr	r2, [pc, #420]	; (8001810 <decodeRMC+0x260>)
 800166a:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after NS ,
 800166c:	e004      	b.n	8001678 <decodeRMC+0xc8>
 800166e:	4b68      	ldr	r3, [pc, #416]	; (8001810 <decodeRMC+0x260>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	3301      	adds	r3, #1
 8001674:	4a66      	ldr	r2, [pc, #408]	; (8001810 <decodeRMC+0x260>)
 8001676:	6013      	str	r3, [r2, #0]
 8001678:	4b65      	ldr	r3, [pc, #404]	; (8001810 <decodeRMC+0x260>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	461a      	mov	r2, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4413      	add	r3, r2
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	2b2c      	cmp	r3, #44	; 0x2c
 8001686:	d1f2      	bne.n	800166e <decodeRMC+0xbe>
	inx++;
 8001688:	4b61      	ldr	r3, [pc, #388]	; (8001810 <decodeRMC+0x260>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	3301      	adds	r3, #1
 800168e:	4a60      	ldr	r2, [pc, #384]	; (8001810 <decodeRMC+0x260>)
 8001690:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after longitude ,
 8001692:	e004      	b.n	800169e <decodeRMC+0xee>
 8001694:	4b5e      	ldr	r3, [pc, #376]	; (8001810 <decodeRMC+0x260>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	3301      	adds	r3, #1
 800169a:	4a5d      	ldr	r2, [pc, #372]	; (8001810 <decodeRMC+0x260>)
 800169c:	6013      	str	r3, [r2, #0]
 800169e:	4b5c      	ldr	r3, [pc, #368]	; (8001810 <decodeRMC+0x260>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	461a      	mov	r2, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	4413      	add	r3, r2
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	2b2c      	cmp	r3, #44	; 0x2c
 80016ac:	d1f2      	bne.n	8001694 <decodeRMC+0xe4>
	inx++;
 80016ae:	4b58      	ldr	r3, [pc, #352]	; (8001810 <decodeRMC+0x260>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	3301      	adds	r3, #1
 80016b4:	4a56      	ldr	r2, [pc, #344]	; (8001810 <decodeRMC+0x260>)
 80016b6:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after EW ,
 80016b8:	e004      	b.n	80016c4 <decodeRMC+0x114>
 80016ba:	4b55      	ldr	r3, [pc, #340]	; (8001810 <decodeRMC+0x260>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	3301      	adds	r3, #1
 80016c0:	4a53      	ldr	r2, [pc, #332]	; (8001810 <decodeRMC+0x260>)
 80016c2:	6013      	str	r3, [r2, #0]
 80016c4:	4b52      	ldr	r3, [pc, #328]	; (8001810 <decodeRMC+0x260>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	461a      	mov	r2, r3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4413      	add	r3, r2
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	2b2c      	cmp	r3, #44	; 0x2c
 80016d2:	d1f2      	bne.n	80016ba <decodeRMC+0x10a>

	// Get Speed
	inx++;
 80016d4:	4b4e      	ldr	r3, [pc, #312]	; (8001810 <decodeRMC+0x260>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	3301      	adds	r3, #1
 80016da:	4a4d      	ldr	r2, [pc, #308]	; (8001810 <decodeRMC+0x260>)
 80016dc:	6013      	str	r3, [r2, #0]
	i=0;
 80016de:	2300      	movs	r3, #0
 80016e0:	63fb      	str	r3, [r7, #60]	; 0x3c
	memset(buffer, '\0', 12);
 80016e2:	f107 0308 	add.w	r3, r7, #8
 80016e6:	220c      	movs	r2, #12
 80016e8:	2100      	movs	r1, #0
 80016ea:	4618      	mov	r0, r3
 80016ec:	f008 fd7e 	bl	800a1ec <memset>
	while (RMCbuffer[inx] != ',')
 80016f0:	e013      	b.n	800171a <decodeRMC+0x16a>
	{
		buffer[i] = RMCbuffer[inx];
 80016f2:	4b47      	ldr	r3, [pc, #284]	; (8001810 <decodeRMC+0x260>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	461a      	mov	r2, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	4413      	add	r3, r2
 80016fc:	7819      	ldrb	r1, [r3, #0]
 80016fe:	f107 0208 	add.w	r2, r7, #8
 8001702:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001704:	4413      	add	r3, r2
 8001706:	460a      	mov	r2, r1
 8001708:	701a      	strb	r2, [r3, #0]
		i++;
 800170a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800170c:	3301      	adds	r3, #1
 800170e:	63fb      	str	r3, [r7, #60]	; 0x3c
		inx++;
 8001710:	4b3f      	ldr	r3, [pc, #252]	; (8001810 <decodeRMC+0x260>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	3301      	adds	r3, #1
 8001716:	4a3e      	ldr	r2, [pc, #248]	; (8001810 <decodeRMC+0x260>)
 8001718:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 800171a:	4b3d      	ldr	r3, [pc, #244]	; (8001810 <decodeRMC+0x260>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	461a      	mov	r2, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	4413      	add	r3, r2
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	2b2c      	cmp	r3, #44	; 0x2c
 8001728:	d1e3      	bne.n	80016f2 <decodeRMC+0x142>
	}

	if (strlen (buffer) > 0){          // if the speed have some data
 800172a:	f107 0308 	add.w	r3, r7, #8
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d056      	beq.n	80017e2 <decodeRMC+0x232>
		int16_t num = (atoi(buffer));  // convert the data into the number
 8001734:	f107 0308 	add.w	r3, r7, #8
 8001738:	4618      	mov	r0, r3
 800173a:	f008 fd19 	bl	800a170 <atoi>
 800173e:	4603      	mov	r3, r0
 8001740:	867b      	strh	r3, [r7, #50]	; 0x32
		int j = 0;
 8001742:	2300      	movs	r3, #0
 8001744:	63bb      	str	r3, [r7, #56]	; 0x38
		while (buffer[j] != '.') j++;   // same as above
 8001746:	e002      	b.n	800174e <decodeRMC+0x19e>
 8001748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800174a:	3301      	adds	r3, #1
 800174c:	63bb      	str	r3, [r7, #56]	; 0x38
 800174e:	f107 0208 	add.w	r2, r7, #8
 8001752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001754:	4413      	add	r3, r2
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	2b2e      	cmp	r3, #46	; 0x2e
 800175a:	d1f5      	bne.n	8001748 <decodeRMC+0x198>
		j++;
 800175c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800175e:	3301      	adds	r3, #1
 8001760:	63bb      	str	r3, [r7, #56]	; 0x38
		int declen = (strlen(buffer))-j;
 8001762:	f107 0308 	add.w	r3, r7, #8
 8001766:	4618      	mov	r0, r3
 8001768:	f7fe fd2e 	bl	80001c8 <strlen>
 800176c:	4602      	mov	r2, r0
 800176e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	62fb      	str	r3, [r7, #44]	; 0x2c
		int dec = atoi ((char *) buffer+j);
 8001774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001776:	f107 0208 	add.w	r2, r7, #8
 800177a:	4413      	add	r3, r2
 800177c:	4618      	mov	r0, r3
 800177e:	f008 fcf7 	bl	800a170 <atoi>
 8001782:	62b8      	str	r0, [r7, #40]	; 0x28
		float lat = num + (dec/pow(10, (declen)));
 8001784:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8001788:	4618      	mov	r0, r3
 800178a:	f7fe fe77 	bl	800047c <__aeabi_i2d>
 800178e:	4604      	mov	r4, r0
 8001790:	460d      	mov	r5, r1
 8001792:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001794:	f7fe fe72 	bl	800047c <__aeabi_i2d>
 8001798:	4680      	mov	r8, r0
 800179a:	4689      	mov	r9, r1
 800179c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800179e:	f7fe fe6d 	bl	800047c <__aeabi_i2d>
 80017a2:	4602      	mov	r2, r0
 80017a4:	460b      	mov	r3, r1
 80017a6:	ec43 2b11 	vmov	d1, r2, r3
 80017aa:	ed9f 0b17 	vldr	d0, [pc, #92]	; 8001808 <decodeRMC+0x258>
 80017ae:	f008 feaf 	bl	800a510 <pow>
 80017b2:	ec53 2b10 	vmov	r2, r3, d0
 80017b6:	4640      	mov	r0, r8
 80017b8:	4649      	mov	r1, r9
 80017ba:	f7fe fff3 	bl	80007a4 <__aeabi_ddiv>
 80017be:	4602      	mov	r2, r0
 80017c0:	460b      	mov	r3, r1
 80017c2:	4620      	mov	r0, r4
 80017c4:	4629      	mov	r1, r5
 80017c6:	f7fe fd0d 	bl	80001e4 <__adddf3>
 80017ca:	4602      	mov	r2, r0
 80017cc:	460b      	mov	r3, r1
 80017ce:	4610      	mov	r0, r2
 80017d0:	4619      	mov	r1, r3
 80017d2:	f7ff f96d 	bl	8000ab0 <__aeabi_d2f>
 80017d6:	4603      	mov	r3, r0
 80017d8:	627b      	str	r3, [r7, #36]	; 0x24
		rmc->speed = lat;
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017de:	60da      	str	r2, [r3, #12]
 80017e0:	e003      	b.n	80017ea <decodeRMC+0x23a>
	}
	else rmc->speed = 0;
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	f04f 0200 	mov.w	r2, #0
 80017e8:	60da      	str	r2, [r3, #12]

	// Get Course
	inx++;
 80017ea:	4b09      	ldr	r3, [pc, #36]	; (8001810 <decodeRMC+0x260>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	3301      	adds	r3, #1
 80017f0:	4a07      	ldr	r2, [pc, #28]	; (8001810 <decodeRMC+0x260>)
 80017f2:	6013      	str	r3, [r2, #0]
	i=0;
 80017f4:	2300      	movs	r3, #0
 80017f6:	63fb      	str	r3, [r7, #60]	; 0x3c
	memset(buffer, '\0', 12);
 80017f8:	f107 0308 	add.w	r3, r7, #8
 80017fc:	220c      	movs	r2, #12
 80017fe:	2100      	movs	r1, #0
 8001800:	4618      	mov	r0, r3
 8001802:	f008 fcf3 	bl	800a1ec <memset>
	while (RMCbuffer[inx] != ',')
 8001806:	e019      	b.n	800183c <decodeRMC+0x28c>
 8001808:	00000000 	.word	0x00000000
 800180c:	40240000 	.word	0x40240000
 8001810:	200000b0 	.word	0x200000b0
	{
		buffer[i] = RMCbuffer[inx];
 8001814:	4b7e      	ldr	r3, [pc, #504]	; (8001a10 <decodeRMC+0x460>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	461a      	mov	r2, r3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4413      	add	r3, r2
 800181e:	7819      	ldrb	r1, [r3, #0]
 8001820:	f107 0208 	add.w	r2, r7, #8
 8001824:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001826:	4413      	add	r3, r2
 8001828:	460a      	mov	r2, r1
 800182a:	701a      	strb	r2, [r3, #0]
		i++;
 800182c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800182e:	3301      	adds	r3, #1
 8001830:	63fb      	str	r3, [r7, #60]	; 0x3c
		inx++;
 8001832:	4b77      	ldr	r3, [pc, #476]	; (8001a10 <decodeRMC+0x460>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	3301      	adds	r3, #1
 8001838:	4a75      	ldr	r2, [pc, #468]	; (8001a10 <decodeRMC+0x460>)
 800183a:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 800183c:	4b74      	ldr	r3, [pc, #464]	; (8001a10 <decodeRMC+0x460>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	461a      	mov	r2, r3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4413      	add	r3, r2
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	2b2c      	cmp	r3, #44	; 0x2c
 800184a:	d1e3      	bne.n	8001814 <decodeRMC+0x264>
	}

	if (strlen (buffer) > 0){  // if the course have some data
 800184c:	f107 0308 	add.w	r3, r7, #8
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d056      	beq.n	8001904 <decodeRMC+0x354>
		int16_t num = (atoi(buffer));   // convert the course data into the number
 8001856:	f107 0308 	add.w	r3, r7, #8
 800185a:	4618      	mov	r0, r3
 800185c:	f008 fc88 	bl	800a170 <atoi>
 8001860:	4603      	mov	r3, r0
 8001862:	847b      	strh	r3, [r7, #34]	; 0x22
		int j = 0;
 8001864:	2300      	movs	r3, #0
 8001866:	637b      	str	r3, [r7, #52]	; 0x34
		while (buffer[j] != '.') j++;   // same as above
 8001868:	e002      	b.n	8001870 <decodeRMC+0x2c0>
 800186a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800186c:	3301      	adds	r3, #1
 800186e:	637b      	str	r3, [r7, #52]	; 0x34
 8001870:	f107 0208 	add.w	r2, r7, #8
 8001874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001876:	4413      	add	r3, r2
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	2b2e      	cmp	r3, #46	; 0x2e
 800187c:	d1f5      	bne.n	800186a <decodeRMC+0x2ba>
		j++;
 800187e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001880:	3301      	adds	r3, #1
 8001882:	637b      	str	r3, [r7, #52]	; 0x34
		int declen = (strlen(buffer))-j;
 8001884:	f107 0308 	add.w	r3, r7, #8
 8001888:	4618      	mov	r0, r3
 800188a:	f7fe fc9d 	bl	80001c8 <strlen>
 800188e:	4602      	mov	r2, r0
 8001890:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	61fb      	str	r3, [r7, #28]
		int dec = atoi ((char *) buffer+j);
 8001896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001898:	f107 0208 	add.w	r2, r7, #8
 800189c:	4413      	add	r3, r2
 800189e:	4618      	mov	r0, r3
 80018a0:	f008 fc66 	bl	800a170 <atoi>
 80018a4:	61b8      	str	r0, [r7, #24]
		float lat = num + (dec/pow(10, (declen)));
 80018a6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7fe fde6 	bl	800047c <__aeabi_i2d>
 80018b0:	4604      	mov	r4, r0
 80018b2:	460d      	mov	r5, r1
 80018b4:	69b8      	ldr	r0, [r7, #24]
 80018b6:	f7fe fde1 	bl	800047c <__aeabi_i2d>
 80018ba:	4680      	mov	r8, r0
 80018bc:	4689      	mov	r9, r1
 80018be:	69f8      	ldr	r0, [r7, #28]
 80018c0:	f7fe fddc 	bl	800047c <__aeabi_i2d>
 80018c4:	4602      	mov	r2, r0
 80018c6:	460b      	mov	r3, r1
 80018c8:	ec43 2b11 	vmov	d1, r2, r3
 80018cc:	ed9f 0b4e 	vldr	d0, [pc, #312]	; 8001a08 <decodeRMC+0x458>
 80018d0:	f008 fe1e 	bl	800a510 <pow>
 80018d4:	ec53 2b10 	vmov	r2, r3, d0
 80018d8:	4640      	mov	r0, r8
 80018da:	4649      	mov	r1, r9
 80018dc:	f7fe ff62 	bl	80007a4 <__aeabi_ddiv>
 80018e0:	4602      	mov	r2, r0
 80018e2:	460b      	mov	r3, r1
 80018e4:	4620      	mov	r0, r4
 80018e6:	4629      	mov	r1, r5
 80018e8:	f7fe fc7c 	bl	80001e4 <__adddf3>
 80018ec:	4602      	mov	r2, r0
 80018ee:	460b      	mov	r3, r1
 80018f0:	4610      	mov	r0, r2
 80018f2:	4619      	mov	r1, r3
 80018f4:	f7ff f8dc 	bl	8000ab0 <__aeabi_d2f>
 80018f8:	4603      	mov	r3, r0
 80018fa:	617b      	str	r3, [r7, #20]
		rmc->course = lat;
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	697a      	ldr	r2, [r7, #20]
 8001900:	611a      	str	r2, [r3, #16]
 8001902:	e003      	b.n	800190c <decodeRMC+0x35c>
	}
	else
		{
			rmc->course = 0;
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	f04f 0200 	mov.w	r2, #0
 800190a:	611a      	str	r2, [r3, #16]
		}

	// Get Date
	inx++;
 800190c:	4b40      	ldr	r3, [pc, #256]	; (8001a10 <decodeRMC+0x460>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	3301      	adds	r3, #1
 8001912:	4a3f      	ldr	r2, [pc, #252]	; (8001a10 <decodeRMC+0x460>)
 8001914:	6013      	str	r3, [r2, #0]
	i=0;
 8001916:	2300      	movs	r3, #0
 8001918:	63fb      	str	r3, [r7, #60]	; 0x3c
	memset(buffer, '\0', 12);
 800191a:	f107 0308 	add.w	r3, r7, #8
 800191e:	220c      	movs	r2, #12
 8001920:	2100      	movs	r1, #0
 8001922:	4618      	mov	r0, r3
 8001924:	f008 fc62 	bl	800a1ec <memset>
	while (RMCbuffer[inx] != ',')
 8001928:	e013      	b.n	8001952 <decodeRMC+0x3a2>
	{
		buffer[i] = RMCbuffer[inx];
 800192a:	4b39      	ldr	r3, [pc, #228]	; (8001a10 <decodeRMC+0x460>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	461a      	mov	r2, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	4413      	add	r3, r2
 8001934:	7819      	ldrb	r1, [r3, #0]
 8001936:	f107 0208 	add.w	r2, r7, #8
 800193a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800193c:	4413      	add	r3, r2
 800193e:	460a      	mov	r2, r1
 8001940:	701a      	strb	r2, [r3, #0]
		i++;
 8001942:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001944:	3301      	adds	r3, #1
 8001946:	63fb      	str	r3, [r7, #60]	; 0x3c
		inx++;
 8001948:	4b31      	ldr	r3, [pc, #196]	; (8001a10 <decodeRMC+0x460>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	3301      	adds	r3, #1
 800194e:	4a30      	ldr	r2, [pc, #192]	; (8001a10 <decodeRMC+0x460>)
 8001950:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 8001952:	4b2f      	ldr	r3, [pc, #188]	; (8001a10 <decodeRMC+0x460>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	461a      	mov	r2, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	4413      	add	r3, r2
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	2b2c      	cmp	r3, #44	; 0x2c
 8001960:	d1e3      	bne.n	800192a <decodeRMC+0x37a>
	}

	// Date in the format 280222
	day = atoi(buffer)/10000;  // extract 28
 8001962:	f107 0308 	add.w	r3, r7, #8
 8001966:	4618      	mov	r0, r3
 8001968:	f008 fc02 	bl	800a170 <atoi>
 800196c:	4603      	mov	r3, r0
 800196e:	4a29      	ldr	r2, [pc, #164]	; (8001a14 <decodeRMC+0x464>)
 8001970:	fb82 1203 	smull	r1, r2, r2, r3
 8001974:	1312      	asrs	r2, r2, #12
 8001976:	17db      	asrs	r3, r3, #31
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	4a27      	ldr	r2, [pc, #156]	; (8001a18 <decodeRMC+0x468>)
 800197c:	6013      	str	r3, [r2, #0]
	mon = (atoi(buffer)/100)%100;  // extract 02
 800197e:	f107 0308 	add.w	r3, r7, #8
 8001982:	4618      	mov	r0, r3
 8001984:	f008 fbf4 	bl	800a170 <atoi>
 8001988:	4603      	mov	r3, r0
 800198a:	4a24      	ldr	r2, [pc, #144]	; (8001a1c <decodeRMC+0x46c>)
 800198c:	fb82 1203 	smull	r1, r2, r2, r3
 8001990:	1152      	asrs	r2, r2, #5
 8001992:	17db      	asrs	r3, r3, #31
 8001994:	1ad2      	subs	r2, r2, r3
 8001996:	4b21      	ldr	r3, [pc, #132]	; (8001a1c <decodeRMC+0x46c>)
 8001998:	fb83 1302 	smull	r1, r3, r3, r2
 800199c:	1159      	asrs	r1, r3, #5
 800199e:	17d3      	asrs	r3, r2, #31
 80019a0:	1acb      	subs	r3, r1, r3
 80019a2:	2164      	movs	r1, #100	; 0x64
 80019a4:	fb01 f303 	mul.w	r3, r1, r3
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	4a1d      	ldr	r2, [pc, #116]	; (8001a20 <decodeRMC+0x470>)
 80019ac:	6013      	str	r3, [r2, #0]
	yr = atoi(buffer)%100;  // extract 22
 80019ae:	f107 0308 	add.w	r3, r7, #8
 80019b2:	4618      	mov	r0, r3
 80019b4:	f008 fbdc 	bl	800a170 <atoi>
 80019b8:	4602      	mov	r2, r0
 80019ba:	4b18      	ldr	r3, [pc, #96]	; (8001a1c <decodeRMC+0x46c>)
 80019bc:	fb83 1302 	smull	r1, r3, r3, r2
 80019c0:	1159      	asrs	r1, r3, #5
 80019c2:	17d3      	asrs	r3, r2, #31
 80019c4:	1acb      	subs	r3, r1, r3
 80019c6:	2164      	movs	r1, #100	; 0x64
 80019c8:	fb01 f303 	mul.w	r3, r1, r3
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	4a15      	ldr	r2, [pc, #84]	; (8001a24 <decodeRMC+0x474>)
 80019d0:	6013      	str	r3, [r2, #0]

	day = day+daychange;   // correction due to GMT shift
 80019d2:	4b11      	ldr	r3, [pc, #68]	; (8001a18 <decodeRMC+0x468>)
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	4b14      	ldr	r3, [pc, #80]	; (8001a28 <decodeRMC+0x478>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4413      	add	r3, r2
 80019dc:	4a0e      	ldr	r2, [pc, #56]	; (8001a18 <decodeRMC+0x468>)
 80019de:	6013      	str	r3, [r2, #0]

	// save the data into the structure
	rmc->date.Day = day;
 80019e0:	4b0d      	ldr	r3, [pc, #52]	; (8001a18 <decodeRMC+0x468>)
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	601a      	str	r2, [r3, #0]
	rmc->date.Mon = mon;
 80019e8:	4b0d      	ldr	r3, [pc, #52]	; (8001a20 <decodeRMC+0x470>)
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	605a      	str	r2, [r3, #4]
	rmc->date.Yr = yr;
 80019f0:	4b0c      	ldr	r3, [pc, #48]	; (8001a24 <decodeRMC+0x474>)
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	609a      	str	r2, [r3, #8]

	return 0;
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3740      	adds	r7, #64	; 0x40
 80019fe:	46bd      	mov	sp, r7
 8001a00:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001a04:	f3af 8000 	nop.w
 8001a08:	00000000 	.word	0x00000000
 8001a0c:	40240000 	.word	0x40240000
 8001a10:	200000b0 	.word	0x200000b0
 8001a14:	68db8bad 	.word	0x68db8bad
 8001a18:	200000bc 	.word	0x200000bc
 8001a1c:	51eb851f 	.word	0x51eb851f
 8001a20:	200000c0 	.word	0x200000c0
 8001a24:	200000c4 	.word	0x200000c4
 8001a28:	200000c8 	.word	0x200000c8

08001a2c <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 8001a30:	4b0d      	ldr	r3, [pc, #52]	; (8001a68 <Ringbuf_init+0x3c>)
 8001a32:	4a0e      	ldr	r2, [pc, #56]	; (8001a6c <Ringbuf_init+0x40>)
 8001a34:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 8001a36:	4b0e      	ldr	r3, [pc, #56]	; (8001a70 <Ringbuf_init+0x44>)
 8001a38:	4a0e      	ldr	r2, [pc, #56]	; (8001a74 <Ringbuf_init+0x48>)
 8001a3a:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 8001a3c:	4b0e      	ldr	r3, [pc, #56]	; (8001a78 <Ringbuf_init+0x4c>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	695a      	ldr	r2, [r3, #20]
 8001a42:	4b0d      	ldr	r3, [pc, #52]	; (8001a78 <Ringbuf_init+0x4c>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f042 0201 	orr.w	r2, r2, #1
 8001a4a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 8001a4c:	4b0a      	ldr	r3, [pc, #40]	; (8001a78 <Ringbuf_init+0x4c>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	68da      	ldr	r2, [r3, #12]
 8001a52:	4b09      	ldr	r3, [pc, #36]	; (8001a78 <Ringbuf_init+0x4c>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f042 0220 	orr.w	r2, r2, #32
 8001a5a:	60da      	str	r2, [r3, #12]
}
 8001a5c:	bf00      	nop
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	20000160 	.word	0x20000160
 8001a6c:	200000d0 	.word	0x200000d0
 8001a70:	20000164 	.word	0x20000164
 8001a74:	20000118 	.word	0x20000118
 8001a78:	20000208 	.word	0x20000208

08001a7c <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b085      	sub	sp, #20
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	4603      	mov	r3, r0
 8001a84:	6039      	str	r1, [r7, #0]
 8001a86:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a92:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d007      	beq.n	8001aae <store_char+0x32>
    buffer->buffer[buffer->head] = c;
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa2:	683a      	ldr	r2, [r7, #0]
 8001aa4:	79f9      	ldrb	r1, [r7, #7]
 8001aa6:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8001aa8:	68fa      	ldr	r2, [r7, #12]
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 8001aae:	bf00      	nop
 8001ab0:	3714      	adds	r7, #20
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
	...

08001abc <Uart_read>:
	if (so_far == stringlength) return 1;
	else return -1;
}

int Uart_read(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 8001ac2:	4b11      	ldr	r3, [pc, #68]	; (8001b08 <Uart_read+0x4c>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ac8:	4b0f      	ldr	r3, [pc, #60]	; (8001b08 <Uart_read+0x4c>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d102      	bne.n	8001ad8 <Uart_read+0x1c>
  {
    return -1;
 8001ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ad6:	e010      	b.n	8001afa <Uart_read+0x3e>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 8001ad8:	4b0b      	ldr	r3, [pc, #44]	; (8001b08 <Uart_read+0x4c>)
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	4b0a      	ldr	r3, [pc, #40]	; (8001b08 <Uart_read+0x4c>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae2:	5cd3      	ldrb	r3, [r2, r3]
 8001ae4:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8001ae6:	4b08      	ldr	r3, [pc, #32]	; (8001b08 <Uart_read+0x4c>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aec:	1c5a      	adds	r2, r3, #1
 8001aee:	4b06      	ldr	r3, [pc, #24]	; (8001b08 <Uart_read+0x4c>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001af6:	645a      	str	r2, [r3, #68]	; 0x44
    return c;
 8001af8:	79fb      	ldrb	r3, [r7, #7]
  }
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	20000160 	.word	0x20000160

08001b0c <IsDataAvailable>:
}

/* checks if the new data is available in the incoming buffer
 */
int IsDataAvailable(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 8001b10:	4b09      	ldr	r3, [pc, #36]	; (8001b38 <IsDataAvailable+0x2c>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b16:	b29a      	uxth	r2, r3
 8001b18:	4b07      	ldr	r3, [pc, #28]	; (8001b38 <IsDataAvailable+0x2c>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b1e:	b29b      	uxth	r3, r3
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	b29b      	uxth	r3, r3
 8001b24:	3340      	adds	r3, #64	; 0x40
 8001b26:	b29b      	uxth	r3, r3
 8001b28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	20000160 	.word	0x20000160

08001b3c <Uart_peek>:
	_rx_buffer->head = 0;
	_rx_buffer->tail = 0;
}

int Uart_peek()
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  if(_rx_buffer->head == _rx_buffer->tail)
 8001b40:	4b0a      	ldr	r3, [pc, #40]	; (8001b6c <Uart_peek+0x30>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b46:	4b09      	ldr	r3, [pc, #36]	; (8001b6c <Uart_peek+0x30>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d102      	bne.n	8001b56 <Uart_peek+0x1a>
  {
    return -1;
 8001b50:	f04f 33ff 	mov.w	r3, #4294967295
 8001b54:	e005      	b.n	8001b62 <Uart_peek+0x26>
  }
  else
  {
    return _rx_buffer->buffer[_rx_buffer->tail];
 8001b56:	4b05      	ldr	r3, [pc, #20]	; (8001b6c <Uart_peek+0x30>)
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	4b04      	ldr	r3, [pc, #16]	; (8001b6c <Uart_peek+0x30>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b60:	5cd3      	ldrb	r3, [r2, r3]
  }
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr
 8001b6c:	20000160 	.word	0x20000160

08001b70 <Copy_upto>:
 * it will copy irrespective of, if the end string is there or not
 * if the end string gets copied, it returns 1 or else 0
 * Use it either after (IsDataAvailable) or after (Wait_for) functions
 */
int Copy_upto (char *string, char *buffertocopyinto)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
	int so_far =0;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	617b      	str	r3, [r7, #20]
	int len = strlen (string);
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f7fe fb22 	bl	80001c8 <strlen>
 8001b84:	4603      	mov	r3, r0
 8001b86:	60fb      	str	r3, [r7, #12]
	int indx = 0;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	613b      	str	r3, [r7, #16]

again:
	while (Uart_peek() != string[so_far])
 8001b8c:	e01b      	b.n	8001bc6 <Copy_upto+0x56>
		{
			buffertocopyinto[indx] = _rx_buffer->buffer[_rx_buffer->tail];
 8001b8e:	4b34      	ldr	r3, [pc, #208]	; (8001c60 <Copy_upto+0xf0>)
 8001b90:	6819      	ldr	r1, [r3, #0]
 8001b92:	4b33      	ldr	r3, [pc, #204]	; (8001c60 <Copy_upto+0xf0>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	6838      	ldr	r0, [r7, #0]
 8001b9c:	4403      	add	r3, r0
 8001b9e:	5c8a      	ldrb	r2, [r1, r2]
 8001ba0:	701a      	strb	r2, [r3, #0]
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8001ba2:	4b2f      	ldr	r3, [pc, #188]	; (8001c60 <Copy_upto+0xf0>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba8:	1c5a      	adds	r2, r3, #1
 8001baa:	4b2d      	ldr	r3, [pc, #180]	; (8001c60 <Copy_upto+0xf0>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001bb2:	645a      	str	r2, [r3, #68]	; 0x44
			indx++;
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	613b      	str	r3, [r7, #16]
			while (!IsDataAvailable());
 8001bba:	bf00      	nop
 8001bbc:	f7ff ffa6 	bl	8001b0c <IsDataAvailable>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d0fa      	beq.n	8001bbc <Copy_upto+0x4c>
	while (Uart_peek() != string[so_far])
 8001bc6:	f7ff ffb9 	bl	8001b3c <Uart_peek>
 8001bca:	4601      	mov	r1, r0
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	4299      	cmp	r1, r3
 8001bd6:	d1da      	bne.n	8001b8e <Copy_upto+0x1e>

		}
	while (Uart_peek() == string [so_far])
 8001bd8:	e027      	b.n	8001c2a <Copy_upto+0xba>
	{
		so_far++;
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	3301      	adds	r3, #1
 8001bde:	617b      	str	r3, [r7, #20]
		buffertocopyinto[indx++] = Uart_read();
 8001be0:	f7ff ff6c 	bl	8001abc <Uart_read>
 8001be4:	4601      	mov	r1, r0
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	1c5a      	adds	r2, r3, #1
 8001bea:	613a      	str	r2, [r7, #16]
 8001bec:	461a      	mov	r2, r3
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	b2ca      	uxtb	r2, r1
 8001bf4:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 8001bf6:	697a      	ldr	r2, [r7, #20]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d101      	bne.n	8001c02 <Copy_upto+0x92>
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e02a      	b.n	8001c58 <Copy_upto+0xe8>
		timeout = TIMEOUT_DEF;
 8001c02:	4b18      	ldr	r3, [pc, #96]	; (8001c64 <Copy_upto+0xf4>)
 8001c04:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001c08:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 8001c0a:	bf00      	nop
 8001c0c:	f7ff ff7e 	bl	8001b0c <IsDataAvailable>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d103      	bne.n	8001c1e <Copy_upto+0xae>
 8001c16:	4b13      	ldr	r3, [pc, #76]	; (8001c64 <Copy_upto+0xf4>)
 8001c18:	881b      	ldrh	r3, [r3, #0]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d1f6      	bne.n	8001c0c <Copy_upto+0x9c>
		if (timeout == 0) return 0;
 8001c1e:	4b11      	ldr	r3, [pc, #68]	; (8001c64 <Copy_upto+0xf4>)
 8001c20:	881b      	ldrh	r3, [r3, #0]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d101      	bne.n	8001c2a <Copy_upto+0xba>
 8001c26:	2300      	movs	r3, #0
 8001c28:	e016      	b.n	8001c58 <Copy_upto+0xe8>
	while (Uart_peek() == string [so_far])
 8001c2a:	f7ff ff87 	bl	8001b3c <Uart_peek>
 8001c2e:	4601      	mov	r1, r0
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	4413      	add	r3, r2
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	4299      	cmp	r1, r3
 8001c3a:	d0ce      	beq.n	8001bda <Copy_upto+0x6a>
	}

	if (so_far != len)
 8001c3c:	697a      	ldr	r2, [r7, #20]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d002      	beq.n	8001c4a <Copy_upto+0xda>
	{
		so_far = 0;
 8001c44:	2300      	movs	r3, #0
 8001c46:	617b      	str	r3, [r7, #20]
		goto again;
 8001c48:	e7a0      	b.n	8001b8c <Copy_upto+0x1c>
	}

	if (so_far == len) return 1;
 8001c4a:	697a      	ldr	r2, [r7, #20]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d101      	bne.n	8001c56 <Copy_upto+0xe6>
 8001c52:	2301      	movs	r3, #1
 8001c54:	e000      	b.n	8001c58 <Copy_upto+0xe8>
	else return 0;
 8001c56:	2300      	movs	r3, #0
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3718      	adds	r7, #24
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	20000160 	.word	0x20000160
 8001c64:	200000cc 	.word	0x200000cc

08001c68 <Wait_for>:
/* Waits for a particular string to arrive in the incoming buffer... It also increments the tail
 * returns 1, if the string is detected
 */
// added timeout feature so the function won't block the processing of the other functions
int Wait_for (char *string)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
	int so_far =0;
 8001c70:	2300      	movs	r3, #0
 8001c72:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f7fe faa7 	bl	80001c8 <strlen>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	60bb      	str	r3, [r7, #8]

again:
	timeout = TIMEOUT_DEF;
 8001c7e:	4b39      	ldr	r3, [pc, #228]	; (8001d64 <Wait_for+0xfc>)
 8001c80:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001c84:	801a      	strh	r2, [r3, #0]
	while ((!IsDataAvailable())&&timeout);  // let's wait for the data to show up
 8001c86:	bf00      	nop
 8001c88:	f7ff ff40 	bl	8001b0c <IsDataAvailable>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d103      	bne.n	8001c9a <Wait_for+0x32>
 8001c92:	4b34      	ldr	r3, [pc, #208]	; (8001d64 <Wait_for+0xfc>)
 8001c94:	881b      	ldrh	r3, [r3, #0]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d1f6      	bne.n	8001c88 <Wait_for+0x20>
	if (timeout == 0) return 0;
 8001c9a:	4b32      	ldr	r3, [pc, #200]	; (8001d64 <Wait_for+0xfc>)
 8001c9c:	881b      	ldrh	r3, [r3, #0]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d115      	bne.n	8001cce <Wait_for+0x66>
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	e05a      	b.n	8001d5c <Wait_for+0xf4>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
	{
		if (_rx_buffer->tail != _rx_buffer->head)
 8001ca6:	4b30      	ldr	r3, [pc, #192]	; (8001d68 <Wait_for+0x100>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001cac:	4b2e      	ldr	r3, [pc, #184]	; (8001d68 <Wait_for+0x100>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d009      	beq.n	8001cca <Wait_for+0x62>
		{
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 8001cb6:	4b2c      	ldr	r3, [pc, #176]	; (8001d68 <Wait_for+0x100>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cbc:	1c5a      	adds	r2, r3, #1
 8001cbe:	4b2a      	ldr	r3, [pc, #168]	; (8001d68 <Wait_for+0x100>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001cc6:	645a      	str	r2, [r3, #68]	; 0x44
 8001cc8:	e001      	b.n	8001cce <Wait_for+0x66>
		}

		else
		{
			return 0;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	e046      	b.n	8001d5c <Wait_for+0xf4>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
 8001cce:	f7ff ff35 	bl	8001b3c <Uart_peek>
 8001cd2:	4601      	mov	r1, r0
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	4413      	add	r3, r2
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	4299      	cmp	r1, r3
 8001cde:	d1e2      	bne.n	8001ca6 <Wait_for+0x3e>
		}
	}
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 8001ce0:	e025      	b.n	8001d2e <Wait_for+0xc6>
	{
		// now we will peek for the other letters too
		so_far++;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	60fb      	str	r3, [r7, #12]
		_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 8001ce8:	4b1f      	ldr	r3, [pc, #124]	; (8001d68 <Wait_for+0x100>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cee:	1c5a      	adds	r2, r3, #1
 8001cf0:	4b1d      	ldr	r3, [pc, #116]	; (8001d68 <Wait_for+0x100>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001cf8:	645a      	str	r2, [r3, #68]	; 0x44
		if (so_far == len) return 1;
 8001cfa:	68fa      	ldr	r2, [r7, #12]
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d101      	bne.n	8001d06 <Wait_for+0x9e>
 8001d02:	2301      	movs	r3, #1
 8001d04:	e02a      	b.n	8001d5c <Wait_for+0xf4>
		timeout = TIMEOUT_DEF;
 8001d06:	4b17      	ldr	r3, [pc, #92]	; (8001d64 <Wait_for+0xfc>)
 8001d08:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001d0c:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 8001d0e:	bf00      	nop
 8001d10:	f7ff fefc 	bl	8001b0c <IsDataAvailable>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d103      	bne.n	8001d22 <Wait_for+0xba>
 8001d1a:	4b12      	ldr	r3, [pc, #72]	; (8001d64 <Wait_for+0xfc>)
 8001d1c:	881b      	ldrh	r3, [r3, #0]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d1f6      	bne.n	8001d10 <Wait_for+0xa8>
		if (timeout == 0) return 0;
 8001d22:	4b10      	ldr	r3, [pc, #64]	; (8001d64 <Wait_for+0xfc>)
 8001d24:	881b      	ldrh	r3, [r3, #0]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d101      	bne.n	8001d2e <Wait_for+0xc6>
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	e016      	b.n	8001d5c <Wait_for+0xf4>
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 8001d2e:	f7ff ff05 	bl	8001b3c <Uart_peek>
 8001d32:	4601      	mov	r1, r0
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	4413      	add	r3, r2
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	4299      	cmp	r1, r3
 8001d3e:	d0d0      	beq.n	8001ce2 <Wait_for+0x7a>
	}

	if (so_far != len)
 8001d40:	68fa      	ldr	r2, [r7, #12]
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d002      	beq.n	8001d4e <Wait_for+0xe6>
	{
		so_far = 0;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	60fb      	str	r3, [r7, #12]
		goto again;
 8001d4c:	e797      	b.n	8001c7e <Wait_for+0x16>
	}

	if (so_far == len) return 1;
 8001d4e:	68fa      	ldr	r2, [r7, #12]
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d101      	bne.n	8001d5a <Wait_for+0xf2>
 8001d56:	2301      	movs	r3, #1
 8001d58:	e000      	b.n	8001d5c <Wait_for+0xf4>
	else return 0;
 8001d5a:	2300      	movs	r3, #0
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3710      	adds	r7, #16
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	200000cc 	.word	0x200000cc
 8001d68:	20000160 	.word	0x20000160

08001d6c <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b086      	sub	sp, #24
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	68db      	ldr	r3, [r3, #12]
 8001d82:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	f003 0320 	and.w	r3, r3, #32
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d013      	beq.n	8001db6 <Uart_isr+0x4a>
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	f003 0320 	and.w	r3, r3, #32
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d00e      	beq.n	8001db6 <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 8001da6:	4b1c      	ldr	r3, [pc, #112]	; (8001e18 <Uart_isr+0xac>)
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	7bfb      	ldrb	r3, [r7, #15]
 8001dac:	4611      	mov	r1, r2
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7ff fe64 	bl	8001a7c <store_char>
        return;
 8001db4:	e02c      	b.n	8001e10 <Uart_isr+0xa4>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d027      	beq.n	8001e10 <Uart_isr+0xa4>
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d022      	beq.n	8001e10 <Uart_isr+0xa4>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 8001dca:	4b14      	ldr	r3, [pc, #80]	; (8001e1c <Uart_isr+0xb0>)
 8001dcc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001dce:	4b13      	ldr	r3, [pc, #76]	; (8001e1c <Uart_isr+0xb0>)
 8001dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d108      	bne.n	8001de8 <Uart_isr+0x7c>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	68da      	ldr	r2, [r3, #12]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001de4:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 8001de6:	e012      	b.n	8001e0e <Uart_isr+0xa2>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 8001de8:	4b0c      	ldr	r3, [pc, #48]	; (8001e1c <Uart_isr+0xb0>)
 8001dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dec:	4a0b      	ldr	r2, [pc, #44]	; (8001e1c <Uart_isr+0xb0>)
 8001dee:	5cd3      	ldrb	r3, [r2, r3]
 8001df0:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 8001df2:	4b0a      	ldr	r3, [pc, #40]	; (8001e1c <Uart_isr+0xb0>)
 8001df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df6:	3301      	adds	r3, #1
 8001df8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001dfc:	4a07      	ldr	r2, [pc, #28]	; (8001e1c <Uart_isr+0xb0>)
 8001dfe:	6453      	str	r3, [r2, #68]	; 0x44
    	      huart->Instance->SR;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	7bba      	ldrb	r2, [r7, #14]
 8001e0c:	605a      	str	r2, [r3, #4]
    	return;
 8001e0e:	bf00      	nop
    }
}
 8001e10:	3718      	adds	r7, #24
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	20000160 	.word	0x20000160
 8001e1c:	20000118 	.word	0x20000118

08001e20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e24:	f000 fcba 	bl	800279c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e28:	f000 f83c 	bl	8001ea4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */
  Ringbuf_init();
 8001e2c:	f7ff fdfe 	bl	8001a2c <Ringbuf_init>
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e30:	f000 f95c 	bl	80020ec <MX_GPIO_Init>
  MX_I2S3_Init();
 8001e34:	f000 f8a0 	bl	8001f78 <MX_I2S3_Init>
  MX_SPI1_Init();
 8001e38:	f000 f8ce 	bl	8001fd8 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8001e3c:	f007 fe90 	bl	8009b60 <MX_USB_HOST_Init>
  MX_USART1_UART_Init();
 8001e40:	f000 f900 	bl	8002044 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001e44:	f000 f928 	bl	8002098 <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001e48:	f007 feb0 	bl	8009bac <MX_USB_HOST_Process>
    if(Wait_for("GGA")==1){
 8001e4c:	480e      	ldr	r0, [pc, #56]	; (8001e88 <main+0x68>)
 8001e4e:	f7ff ff0b 	bl	8001c68 <Wait_for>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d107      	bne.n	8001e68 <main+0x48>
    	Copy_upto("*",GGA);
 8001e58:	490c      	ldr	r1, [pc, #48]	; (8001e8c <main+0x6c>)
 8001e5a:	480d      	ldr	r0, [pc, #52]	; (8001e90 <main+0x70>)
 8001e5c:	f7ff fe88 	bl	8001b70 <Copy_upto>
    	decodeGGA(GGA, &gpsData.ggastruct);
 8001e60:	490c      	ldr	r1, [pc, #48]	; (8001e94 <main+0x74>)
 8001e62:	480a      	ldr	r0, [pc, #40]	; (8001e8c <main+0x6c>)
 8001e64:	f7fe fff8 	bl	8000e58 <decodeGGA>
    }

    if(Wait_for("RMC")==1){
 8001e68:	480b      	ldr	r0, [pc, #44]	; (8001e98 <main+0x78>)
 8001e6a:	f7ff fefd 	bl	8001c68 <Wait_for>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d1e9      	bne.n	8001e48 <main+0x28>
      	Copy_upto("*",RMC);
 8001e74:	4909      	ldr	r1, [pc, #36]	; (8001e9c <main+0x7c>)
 8001e76:	4806      	ldr	r0, [pc, #24]	; (8001e90 <main+0x70>)
 8001e78:	f7ff fe7a 	bl	8001b70 <Copy_upto>
      	decodeRMC(RMC, &gpsData.rmcstruct);
 8001e7c:	4908      	ldr	r1, [pc, #32]	; (8001ea0 <main+0x80>)
 8001e7e:	4807      	ldr	r0, [pc, #28]	; (8001e9c <main+0x7c>)
 8001e80:	f7ff fb96 	bl	80015b0 <decodeRMC>
    MX_USB_HOST_Process();
 8001e84:	e7e0      	b.n	8001e48 <main+0x28>
 8001e86:	bf00      	nop
 8001e88:	0800b360 	.word	0x0800b360
 8001e8c:	20000290 	.word	0x20000290
 8001e90:	0800b364 	.word	0x0800b364
 8001e94:	20000358 	.word	0x20000358
 8001e98:	0800b368 	.word	0x0800b368
 8001e9c:	200002f4 	.word	0x200002f4
 8001ea0:	20000384 	.word	0x20000384

08001ea4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b094      	sub	sp, #80	; 0x50
 8001ea8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001eaa:	f107 0320 	add.w	r3, r7, #32
 8001eae:	2230      	movs	r2, #48	; 0x30
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f008 f99a 	bl	800a1ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001eb8:	f107 030c 	add.w	r3, r7, #12
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]
 8001ec0:	605a      	str	r2, [r3, #4]
 8001ec2:	609a      	str	r2, [r3, #8]
 8001ec4:	60da      	str	r2, [r3, #12]
 8001ec6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ec8:	2300      	movs	r3, #0
 8001eca:	60bb      	str	r3, [r7, #8]
 8001ecc:	4b28      	ldr	r3, [pc, #160]	; (8001f70 <SystemClock_Config+0xcc>)
 8001ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed0:	4a27      	ldr	r2, [pc, #156]	; (8001f70 <SystemClock_Config+0xcc>)
 8001ed2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ed6:	6413      	str	r3, [r2, #64]	; 0x40
 8001ed8:	4b25      	ldr	r3, [pc, #148]	; (8001f70 <SystemClock_Config+0xcc>)
 8001eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001edc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ee0:	60bb      	str	r3, [r7, #8]
 8001ee2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	607b      	str	r3, [r7, #4]
 8001ee8:	4b22      	ldr	r3, [pc, #136]	; (8001f74 <SystemClock_Config+0xd0>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a21      	ldr	r2, [pc, #132]	; (8001f74 <SystemClock_Config+0xd0>)
 8001eee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ef2:	6013      	str	r3, [r2, #0]
 8001ef4:	4b1f      	ldr	r3, [pc, #124]	; (8001f74 <SystemClock_Config+0xd0>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001efc:	607b      	str	r3, [r7, #4]
 8001efe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f00:	2301      	movs	r3, #1
 8001f02:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f04:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f08:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f0e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f12:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001f14:	2308      	movs	r3, #8
 8001f16:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001f18:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001f1c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f1e:	2302      	movs	r3, #2
 8001f20:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001f22:	2307      	movs	r3, #7
 8001f24:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f26:	f107 0320 	add.w	r3, r7, #32
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f003 f8d0 	bl	80050d0 <HAL_RCC_OscConfig>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001f36:	f000 f9e7 	bl	8002308 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f3a:	230f      	movs	r3, #15
 8001f3c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f3e:	2302      	movs	r3, #2
 8001f40:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f42:	2300      	movs	r3, #0
 8001f44:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001f46:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001f4a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001f4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f50:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001f52:	f107 030c 	add.w	r3, r7, #12
 8001f56:	2105      	movs	r1, #5
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f003 fb31 	bl	80055c0 <HAL_RCC_ClockConfig>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001f64:	f000 f9d0 	bl	8002308 <Error_Handler>
  }
}
 8001f68:	bf00      	nop
 8001f6a:	3750      	adds	r7, #80	; 0x50
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	40023800 	.word	0x40023800
 8001f74:	40007000 	.word	0x40007000

08001f78 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001f7c:	4b13      	ldr	r3, [pc, #76]	; (8001fcc <MX_I2S3_Init+0x54>)
 8001f7e:	4a14      	ldr	r2, [pc, #80]	; (8001fd0 <MX_I2S3_Init+0x58>)
 8001f80:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001f82:	4b12      	ldr	r3, [pc, #72]	; (8001fcc <MX_I2S3_Init+0x54>)
 8001f84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f88:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001f8a:	4b10      	ldr	r3, [pc, #64]	; (8001fcc <MX_I2S3_Init+0x54>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001f90:	4b0e      	ldr	r3, [pc, #56]	; (8001fcc <MX_I2S3_Init+0x54>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001f96:	4b0d      	ldr	r3, [pc, #52]	; (8001fcc <MX_I2S3_Init+0x54>)
 8001f98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f9c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001f9e:	4b0b      	ldr	r3, [pc, #44]	; (8001fcc <MX_I2S3_Init+0x54>)
 8001fa0:	4a0c      	ldr	r2, [pc, #48]	; (8001fd4 <MX_I2S3_Init+0x5c>)
 8001fa2:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001fa4:	4b09      	ldr	r3, [pc, #36]	; (8001fcc <MX_I2S3_Init+0x54>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001faa:	4b08      	ldr	r3, [pc, #32]	; (8001fcc <MX_I2S3_Init+0x54>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001fb0:	4b06      	ldr	r3, [pc, #24]	; (8001fcc <MX_I2S3_Init+0x54>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001fb6:	4805      	ldr	r0, [pc, #20]	; (8001fcc <MX_I2S3_Init+0x54>)
 8001fb8:	f002 fbea 	bl	8004790 <HAL_I2S_Init>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d001      	beq.n	8001fc6 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8001fc2:	f000 f9a1 	bl	8002308 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001fc6:	bf00      	nop
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	20000168 	.word	0x20000168
 8001fd0:	40003c00 	.word	0x40003c00
 8001fd4:	00017700 	.word	0x00017700

08001fd8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001fdc:	4b17      	ldr	r3, [pc, #92]	; (800203c <MX_SPI1_Init+0x64>)
 8001fde:	4a18      	ldr	r2, [pc, #96]	; (8002040 <MX_SPI1_Init+0x68>)
 8001fe0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001fe2:	4b16      	ldr	r3, [pc, #88]	; (800203c <MX_SPI1_Init+0x64>)
 8001fe4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001fe8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001fea:	4b14      	ldr	r3, [pc, #80]	; (800203c <MX_SPI1_Init+0x64>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ff0:	4b12      	ldr	r3, [pc, #72]	; (800203c <MX_SPI1_Init+0x64>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ff6:	4b11      	ldr	r3, [pc, #68]	; (800203c <MX_SPI1_Init+0x64>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ffc:	4b0f      	ldr	r3, [pc, #60]	; (800203c <MX_SPI1_Init+0x64>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002002:	4b0e      	ldr	r3, [pc, #56]	; (800203c <MX_SPI1_Init+0x64>)
 8002004:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002008:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800200a:	4b0c      	ldr	r3, [pc, #48]	; (800203c <MX_SPI1_Init+0x64>)
 800200c:	2200      	movs	r2, #0
 800200e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002010:	4b0a      	ldr	r3, [pc, #40]	; (800203c <MX_SPI1_Init+0x64>)
 8002012:	2200      	movs	r2, #0
 8002014:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002016:	4b09      	ldr	r3, [pc, #36]	; (800203c <MX_SPI1_Init+0x64>)
 8002018:	2200      	movs	r2, #0
 800201a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800201c:	4b07      	ldr	r3, [pc, #28]	; (800203c <MX_SPI1_Init+0x64>)
 800201e:	2200      	movs	r2, #0
 8002020:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002022:	4b06      	ldr	r3, [pc, #24]	; (800203c <MX_SPI1_Init+0x64>)
 8002024:	220a      	movs	r2, #10
 8002026:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002028:	4804      	ldr	r0, [pc, #16]	; (800203c <MX_SPI1_Init+0x64>)
 800202a:	f003 fe29 	bl	8005c80 <HAL_SPI_Init>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d001      	beq.n	8002038 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002034:	f000 f968 	bl	8002308 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002038:	bf00      	nop
 800203a:	bd80      	pop	{r7, pc}
 800203c:	200001b0 	.word	0x200001b0
 8002040:	40013000 	.word	0x40013000

08002044 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002048:	4b11      	ldr	r3, [pc, #68]	; (8002090 <MX_USART1_UART_Init+0x4c>)
 800204a:	4a12      	ldr	r2, [pc, #72]	; (8002094 <MX_USART1_UART_Init+0x50>)
 800204c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800204e:	4b10      	ldr	r3, [pc, #64]	; (8002090 <MX_USART1_UART_Init+0x4c>)
 8002050:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002054:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002056:	4b0e      	ldr	r3, [pc, #56]	; (8002090 <MX_USART1_UART_Init+0x4c>)
 8002058:	2200      	movs	r2, #0
 800205a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800205c:	4b0c      	ldr	r3, [pc, #48]	; (8002090 <MX_USART1_UART_Init+0x4c>)
 800205e:	2200      	movs	r2, #0
 8002060:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002062:	4b0b      	ldr	r3, [pc, #44]	; (8002090 <MX_USART1_UART_Init+0x4c>)
 8002064:	2200      	movs	r2, #0
 8002066:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002068:	4b09      	ldr	r3, [pc, #36]	; (8002090 <MX_USART1_UART_Init+0x4c>)
 800206a:	220c      	movs	r2, #12
 800206c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800206e:	4b08      	ldr	r3, [pc, #32]	; (8002090 <MX_USART1_UART_Init+0x4c>)
 8002070:	2200      	movs	r2, #0
 8002072:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002074:	4b06      	ldr	r3, [pc, #24]	; (8002090 <MX_USART1_UART_Init+0x4c>)
 8002076:	2200      	movs	r2, #0
 8002078:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800207a:	4805      	ldr	r0, [pc, #20]	; (8002090 <MX_USART1_UART_Init+0x4c>)
 800207c:	f003 fe89 	bl	8005d92 <HAL_UART_Init>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002086:	f000 f93f 	bl	8002308 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800208a:	bf00      	nop
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	20000208 	.word	0x20000208
 8002094:	40011000 	.word	0x40011000

08002098 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800209c:	4b11      	ldr	r3, [pc, #68]	; (80020e4 <MX_USART2_UART_Init+0x4c>)
 800209e:	4a12      	ldr	r2, [pc, #72]	; (80020e8 <MX_USART2_UART_Init+0x50>)
 80020a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80020a2:	4b10      	ldr	r3, [pc, #64]	; (80020e4 <MX_USART2_UART_Init+0x4c>)
 80020a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80020a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80020aa:	4b0e      	ldr	r3, [pc, #56]	; (80020e4 <MX_USART2_UART_Init+0x4c>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80020b0:	4b0c      	ldr	r3, [pc, #48]	; (80020e4 <MX_USART2_UART_Init+0x4c>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80020b6:	4b0b      	ldr	r3, [pc, #44]	; (80020e4 <MX_USART2_UART_Init+0x4c>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80020bc:	4b09      	ldr	r3, [pc, #36]	; (80020e4 <MX_USART2_UART_Init+0x4c>)
 80020be:	220c      	movs	r2, #12
 80020c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020c2:	4b08      	ldr	r3, [pc, #32]	; (80020e4 <MX_USART2_UART_Init+0x4c>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80020c8:	4b06      	ldr	r3, [pc, #24]	; (80020e4 <MX_USART2_UART_Init+0x4c>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80020ce:	4805      	ldr	r0, [pc, #20]	; (80020e4 <MX_USART2_UART_Init+0x4c>)
 80020d0:	f003 fe5f 	bl	8005d92 <HAL_UART_Init>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80020da:	f000 f915 	bl	8002308 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80020de:	bf00      	nop
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	2000024c 	.word	0x2000024c
 80020e8:	40004400 	.word	0x40004400

080020ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b08c      	sub	sp, #48	; 0x30
 80020f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f2:	f107 031c 	add.w	r3, r7, #28
 80020f6:	2200      	movs	r2, #0
 80020f8:	601a      	str	r2, [r3, #0]
 80020fa:	605a      	str	r2, [r3, #4]
 80020fc:	609a      	str	r2, [r3, #8]
 80020fe:	60da      	str	r2, [r3, #12]
 8002100:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002102:	2300      	movs	r3, #0
 8002104:	61bb      	str	r3, [r7, #24]
 8002106:	4b7a      	ldr	r3, [pc, #488]	; (80022f0 <MX_GPIO_Init+0x204>)
 8002108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210a:	4a79      	ldr	r2, [pc, #484]	; (80022f0 <MX_GPIO_Init+0x204>)
 800210c:	f043 0310 	orr.w	r3, r3, #16
 8002110:	6313      	str	r3, [r2, #48]	; 0x30
 8002112:	4b77      	ldr	r3, [pc, #476]	; (80022f0 <MX_GPIO_Init+0x204>)
 8002114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002116:	f003 0310 	and.w	r3, r3, #16
 800211a:	61bb      	str	r3, [r7, #24]
 800211c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800211e:	2300      	movs	r3, #0
 8002120:	617b      	str	r3, [r7, #20]
 8002122:	4b73      	ldr	r3, [pc, #460]	; (80022f0 <MX_GPIO_Init+0x204>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002126:	4a72      	ldr	r2, [pc, #456]	; (80022f0 <MX_GPIO_Init+0x204>)
 8002128:	f043 0304 	orr.w	r3, r3, #4
 800212c:	6313      	str	r3, [r2, #48]	; 0x30
 800212e:	4b70      	ldr	r3, [pc, #448]	; (80022f0 <MX_GPIO_Init+0x204>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002132:	f003 0304 	and.w	r3, r3, #4
 8002136:	617b      	str	r3, [r7, #20]
 8002138:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800213a:	2300      	movs	r3, #0
 800213c:	613b      	str	r3, [r7, #16]
 800213e:	4b6c      	ldr	r3, [pc, #432]	; (80022f0 <MX_GPIO_Init+0x204>)
 8002140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002142:	4a6b      	ldr	r2, [pc, #428]	; (80022f0 <MX_GPIO_Init+0x204>)
 8002144:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002148:	6313      	str	r3, [r2, #48]	; 0x30
 800214a:	4b69      	ldr	r3, [pc, #420]	; (80022f0 <MX_GPIO_Init+0x204>)
 800214c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002152:	613b      	str	r3, [r7, #16]
 8002154:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002156:	2300      	movs	r3, #0
 8002158:	60fb      	str	r3, [r7, #12]
 800215a:	4b65      	ldr	r3, [pc, #404]	; (80022f0 <MX_GPIO_Init+0x204>)
 800215c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215e:	4a64      	ldr	r2, [pc, #400]	; (80022f0 <MX_GPIO_Init+0x204>)
 8002160:	f043 0301 	orr.w	r3, r3, #1
 8002164:	6313      	str	r3, [r2, #48]	; 0x30
 8002166:	4b62      	ldr	r3, [pc, #392]	; (80022f0 <MX_GPIO_Init+0x204>)
 8002168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216a:	f003 0301 	and.w	r3, r3, #1
 800216e:	60fb      	str	r3, [r7, #12]
 8002170:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002172:	2300      	movs	r3, #0
 8002174:	60bb      	str	r3, [r7, #8]
 8002176:	4b5e      	ldr	r3, [pc, #376]	; (80022f0 <MX_GPIO_Init+0x204>)
 8002178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217a:	4a5d      	ldr	r2, [pc, #372]	; (80022f0 <MX_GPIO_Init+0x204>)
 800217c:	f043 0302 	orr.w	r3, r3, #2
 8002180:	6313      	str	r3, [r2, #48]	; 0x30
 8002182:	4b5b      	ldr	r3, [pc, #364]	; (80022f0 <MX_GPIO_Init+0x204>)
 8002184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002186:	f003 0302 	and.w	r3, r3, #2
 800218a:	60bb      	str	r3, [r7, #8]
 800218c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800218e:	2300      	movs	r3, #0
 8002190:	607b      	str	r3, [r7, #4]
 8002192:	4b57      	ldr	r3, [pc, #348]	; (80022f0 <MX_GPIO_Init+0x204>)
 8002194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002196:	4a56      	ldr	r2, [pc, #344]	; (80022f0 <MX_GPIO_Init+0x204>)
 8002198:	f043 0308 	orr.w	r3, r3, #8
 800219c:	6313      	str	r3, [r2, #48]	; 0x30
 800219e:	4b54      	ldr	r3, [pc, #336]	; (80022f0 <MX_GPIO_Init+0x204>)
 80021a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a2:	f003 0308 	and.w	r3, r3, #8
 80021a6:	607b      	str	r3, [r7, #4]
 80021a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80021aa:	2200      	movs	r2, #0
 80021ac:	2108      	movs	r1, #8
 80021ae:	4851      	ldr	r0, [pc, #324]	; (80022f4 <MX_GPIO_Init+0x208>)
 80021b0:	f000 feca 	bl	8002f48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80021b4:	2201      	movs	r2, #1
 80021b6:	2101      	movs	r1, #1
 80021b8:	484f      	ldr	r0, [pc, #316]	; (80022f8 <MX_GPIO_Init+0x20c>)
 80021ba:	f000 fec5 	bl	8002f48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80021be:	2200      	movs	r2, #0
 80021c0:	f24f 0110 	movw	r1, #61456	; 0xf010
 80021c4:	484d      	ldr	r0, [pc, #308]	; (80022fc <MX_GPIO_Init+0x210>)
 80021c6:	f000 febf 	bl	8002f48 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80021ca:	2308      	movs	r3, #8
 80021cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021ce:	2301      	movs	r3, #1
 80021d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d2:	2300      	movs	r3, #0
 80021d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d6:	2300      	movs	r3, #0
 80021d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80021da:	f107 031c 	add.w	r3, r7, #28
 80021de:	4619      	mov	r1, r3
 80021e0:	4844      	ldr	r0, [pc, #272]	; (80022f4 <MX_GPIO_Init+0x208>)
 80021e2:	f000 fd15 	bl	8002c10 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80021e6:	2301      	movs	r3, #1
 80021e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021ea:	2301      	movs	r3, #1
 80021ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ee:	2300      	movs	r3, #0
 80021f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f2:	2300      	movs	r3, #0
 80021f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80021f6:	f107 031c 	add.w	r3, r7, #28
 80021fa:	4619      	mov	r1, r3
 80021fc:	483e      	ldr	r0, [pc, #248]	; (80022f8 <MX_GPIO_Init+0x20c>)
 80021fe:	f000 fd07 	bl	8002c10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8002202:	2308      	movs	r3, #8
 8002204:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002206:	2302      	movs	r3, #2
 8002208:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220a:	2300      	movs	r3, #0
 800220c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800220e:	2300      	movs	r3, #0
 8002210:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002212:	2305      	movs	r3, #5
 8002214:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8002216:	f107 031c 	add.w	r3, r7, #28
 800221a:	4619      	mov	r1, r3
 800221c:	4836      	ldr	r0, [pc, #216]	; (80022f8 <MX_GPIO_Init+0x20c>)
 800221e:	f000 fcf7 	bl	8002c10 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002222:	2301      	movs	r3, #1
 8002224:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002226:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800222a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222c:	2300      	movs	r3, #0
 800222e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002230:	f107 031c 	add.w	r3, r7, #28
 8002234:	4619      	mov	r1, r3
 8002236:	4832      	ldr	r0, [pc, #200]	; (8002300 <MX_GPIO_Init+0x214>)
 8002238:	f000 fcea 	bl	8002c10 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800223c:	2304      	movs	r3, #4
 800223e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002240:	2300      	movs	r3, #0
 8002242:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002244:	2300      	movs	r3, #0
 8002246:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8002248:	f107 031c 	add.w	r3, r7, #28
 800224c:	4619      	mov	r1, r3
 800224e:	482d      	ldr	r0, [pc, #180]	; (8002304 <MX_GPIO_Init+0x218>)
 8002250:	f000 fcde 	bl	8002c10 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8002254:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002258:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800225a:	2302      	movs	r3, #2
 800225c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225e:	2300      	movs	r3, #0
 8002260:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002262:	2300      	movs	r3, #0
 8002264:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002266:	2305      	movs	r3, #5
 8002268:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800226a:	f107 031c 	add.w	r3, r7, #28
 800226e:	4619      	mov	r1, r3
 8002270:	4824      	ldr	r0, [pc, #144]	; (8002304 <MX_GPIO_Init+0x218>)
 8002272:	f000 fccd 	bl	8002c10 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8002276:	f24f 0310 	movw	r3, #61456	; 0xf010
 800227a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800227c:	2301      	movs	r3, #1
 800227e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002280:	2300      	movs	r3, #0
 8002282:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002284:	2300      	movs	r3, #0
 8002286:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002288:	f107 031c 	add.w	r3, r7, #28
 800228c:	4619      	mov	r1, r3
 800228e:	481b      	ldr	r0, [pc, #108]	; (80022fc <MX_GPIO_Init+0x210>)
 8002290:	f000 fcbe 	bl	8002c10 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002294:	2320      	movs	r3, #32
 8002296:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002298:	2300      	movs	r3, #0
 800229a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229c:	2300      	movs	r3, #0
 800229e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80022a0:	f107 031c 	add.w	r3, r7, #28
 80022a4:	4619      	mov	r1, r3
 80022a6:	4815      	ldr	r0, [pc, #84]	; (80022fc <MX_GPIO_Init+0x210>)
 80022a8:	f000 fcb2 	bl	8002c10 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SDA_Pin;
 80022ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022b2:	2312      	movs	r3, #18
 80022b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022b6:	2301      	movs	r3, #1
 80022b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ba:	2300      	movs	r3, #0
 80022bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80022be:	2304      	movs	r3, #4
 80022c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Audio_SDA_GPIO_Port, &GPIO_InitStruct);
 80022c2:	f107 031c 	add.w	r3, r7, #28
 80022c6:	4619      	mov	r1, r3
 80022c8:	480e      	ldr	r0, [pc, #56]	; (8002304 <MX_GPIO_Init+0x218>)
 80022ca:	f000 fca1 	bl	8002c10 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80022ce:	2302      	movs	r3, #2
 80022d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80022d2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80022d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d8:	2300      	movs	r3, #0
 80022da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80022dc:	f107 031c 	add.w	r3, r7, #28
 80022e0:	4619      	mov	r1, r3
 80022e2:	4804      	ldr	r0, [pc, #16]	; (80022f4 <MX_GPIO_Init+0x208>)
 80022e4:	f000 fc94 	bl	8002c10 <HAL_GPIO_Init>

}
 80022e8:	bf00      	nop
 80022ea:	3730      	adds	r7, #48	; 0x30
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	40023800 	.word	0x40023800
 80022f4:	40021000 	.word	0x40021000
 80022f8:	40020800 	.word	0x40020800
 80022fc:	40020c00 	.word	0x40020c00
 8002300:	40020000 	.word	0x40020000
 8002304:	40020400 	.word	0x40020400

08002308 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800230c:	b672      	cpsid	i
}
 800230e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002310:	e7fe      	b.n	8002310 <Error_Handler+0x8>
	...

08002314 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800231a:	2300      	movs	r3, #0
 800231c:	607b      	str	r3, [r7, #4]
 800231e:	4b10      	ldr	r3, [pc, #64]	; (8002360 <HAL_MspInit+0x4c>)
 8002320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002322:	4a0f      	ldr	r2, [pc, #60]	; (8002360 <HAL_MspInit+0x4c>)
 8002324:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002328:	6453      	str	r3, [r2, #68]	; 0x44
 800232a:	4b0d      	ldr	r3, [pc, #52]	; (8002360 <HAL_MspInit+0x4c>)
 800232c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002332:	607b      	str	r3, [r7, #4]
 8002334:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002336:	2300      	movs	r3, #0
 8002338:	603b      	str	r3, [r7, #0]
 800233a:	4b09      	ldr	r3, [pc, #36]	; (8002360 <HAL_MspInit+0x4c>)
 800233c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233e:	4a08      	ldr	r2, [pc, #32]	; (8002360 <HAL_MspInit+0x4c>)
 8002340:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002344:	6413      	str	r3, [r2, #64]	; 0x40
 8002346:	4b06      	ldr	r3, [pc, #24]	; (8002360 <HAL_MspInit+0x4c>)
 8002348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800234e:	603b      	str	r3, [r7, #0]
 8002350:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002352:	2007      	movs	r0, #7
 8002354:	f000 fb88 	bl	8002a68 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002358:	bf00      	nop
 800235a:	3708      	adds	r7, #8
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	40023800 	.word	0x40023800

08002364 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b08e      	sub	sp, #56	; 0x38
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800236c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002370:	2200      	movs	r2, #0
 8002372:	601a      	str	r2, [r3, #0]
 8002374:	605a      	str	r2, [r3, #4]
 8002376:	609a      	str	r2, [r3, #8]
 8002378:	60da      	str	r2, [r3, #12]
 800237a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800237c:	f107 0314 	add.w	r3, r7, #20
 8002380:	2200      	movs	r2, #0
 8002382:	601a      	str	r2, [r3, #0]
 8002384:	605a      	str	r2, [r3, #4]
 8002386:	609a      	str	r2, [r3, #8]
 8002388:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a31      	ldr	r2, [pc, #196]	; (8002454 <HAL_I2S_MspInit+0xf0>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d15a      	bne.n	800244a <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8002394:	2301      	movs	r3, #1
 8002396:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8002398:	23c0      	movs	r3, #192	; 0xc0
 800239a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800239c:	2302      	movs	r3, #2
 800239e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023a0:	f107 0314 	add.w	r3, r7, #20
 80023a4:	4618      	mov	r0, r3
 80023a6:	f003 fb2b 	bl	8005a00 <HAL_RCCEx_PeriphCLKConfig>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d001      	beq.n	80023b4 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 80023b0:	f7ff ffaa 	bl	8002308 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80023b4:	2300      	movs	r3, #0
 80023b6:	613b      	str	r3, [r7, #16]
 80023b8:	4b27      	ldr	r3, [pc, #156]	; (8002458 <HAL_I2S_MspInit+0xf4>)
 80023ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023bc:	4a26      	ldr	r2, [pc, #152]	; (8002458 <HAL_I2S_MspInit+0xf4>)
 80023be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023c2:	6413      	str	r3, [r2, #64]	; 0x40
 80023c4:	4b24      	ldr	r3, [pc, #144]	; (8002458 <HAL_I2S_MspInit+0xf4>)
 80023c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023cc:	613b      	str	r3, [r7, #16]
 80023ce:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023d0:	2300      	movs	r3, #0
 80023d2:	60fb      	str	r3, [r7, #12]
 80023d4:	4b20      	ldr	r3, [pc, #128]	; (8002458 <HAL_I2S_MspInit+0xf4>)
 80023d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d8:	4a1f      	ldr	r2, [pc, #124]	; (8002458 <HAL_I2S_MspInit+0xf4>)
 80023da:	f043 0301 	orr.w	r3, r3, #1
 80023de:	6313      	str	r3, [r2, #48]	; 0x30
 80023e0:	4b1d      	ldr	r3, [pc, #116]	; (8002458 <HAL_I2S_MspInit+0xf4>)
 80023e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e4:	f003 0301 	and.w	r3, r3, #1
 80023e8:	60fb      	str	r3, [r7, #12]
 80023ea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023ec:	2300      	movs	r3, #0
 80023ee:	60bb      	str	r3, [r7, #8]
 80023f0:	4b19      	ldr	r3, [pc, #100]	; (8002458 <HAL_I2S_MspInit+0xf4>)
 80023f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f4:	4a18      	ldr	r2, [pc, #96]	; (8002458 <HAL_I2S_MspInit+0xf4>)
 80023f6:	f043 0304 	orr.w	r3, r3, #4
 80023fa:	6313      	str	r3, [r2, #48]	; 0x30
 80023fc:	4b16      	ldr	r3, [pc, #88]	; (8002458 <HAL_I2S_MspInit+0xf4>)
 80023fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002400:	f003 0304 	and.w	r3, r3, #4
 8002404:	60bb      	str	r3, [r7, #8]
 8002406:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8002408:	2310      	movs	r3, #16
 800240a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800240c:	2302      	movs	r3, #2
 800240e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002410:	2300      	movs	r3, #0
 8002412:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002414:	2300      	movs	r3, #0
 8002416:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002418:	2306      	movs	r3, #6
 800241a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800241c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002420:	4619      	mov	r1, r3
 8002422:	480e      	ldr	r0, [pc, #56]	; (800245c <HAL_I2S_MspInit+0xf8>)
 8002424:	f000 fbf4 	bl	8002c10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8002428:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800242c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800242e:	2302      	movs	r3, #2
 8002430:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002432:	2300      	movs	r3, #0
 8002434:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002436:	2300      	movs	r3, #0
 8002438:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800243a:	2306      	movs	r3, #6
 800243c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800243e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002442:	4619      	mov	r1, r3
 8002444:	4806      	ldr	r0, [pc, #24]	; (8002460 <HAL_I2S_MspInit+0xfc>)
 8002446:	f000 fbe3 	bl	8002c10 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800244a:	bf00      	nop
 800244c:	3738      	adds	r7, #56	; 0x38
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	40003c00 	.word	0x40003c00
 8002458:	40023800 	.word	0x40023800
 800245c:	40020000 	.word	0x40020000
 8002460:	40020800 	.word	0x40020800

08002464 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b08a      	sub	sp, #40	; 0x28
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800246c:	f107 0314 	add.w	r3, r7, #20
 8002470:	2200      	movs	r2, #0
 8002472:	601a      	str	r2, [r3, #0]
 8002474:	605a      	str	r2, [r3, #4]
 8002476:	609a      	str	r2, [r3, #8]
 8002478:	60da      	str	r2, [r3, #12]
 800247a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a19      	ldr	r2, [pc, #100]	; (80024e8 <HAL_SPI_MspInit+0x84>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d12b      	bne.n	80024de <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002486:	2300      	movs	r3, #0
 8002488:	613b      	str	r3, [r7, #16]
 800248a:	4b18      	ldr	r3, [pc, #96]	; (80024ec <HAL_SPI_MspInit+0x88>)
 800248c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800248e:	4a17      	ldr	r2, [pc, #92]	; (80024ec <HAL_SPI_MspInit+0x88>)
 8002490:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002494:	6453      	str	r3, [r2, #68]	; 0x44
 8002496:	4b15      	ldr	r3, [pc, #84]	; (80024ec <HAL_SPI_MspInit+0x88>)
 8002498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800249a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800249e:	613b      	str	r3, [r7, #16]
 80024a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024a2:	2300      	movs	r3, #0
 80024a4:	60fb      	str	r3, [r7, #12]
 80024a6:	4b11      	ldr	r3, [pc, #68]	; (80024ec <HAL_SPI_MspInit+0x88>)
 80024a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024aa:	4a10      	ldr	r2, [pc, #64]	; (80024ec <HAL_SPI_MspInit+0x88>)
 80024ac:	f043 0301 	orr.w	r3, r3, #1
 80024b0:	6313      	str	r3, [r2, #48]	; 0x30
 80024b2:	4b0e      	ldr	r3, [pc, #56]	; (80024ec <HAL_SPI_MspInit+0x88>)
 80024b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b6:	f003 0301 	and.w	r3, r3, #1
 80024ba:	60fb      	str	r3, [r7, #12]
 80024bc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80024be:	23e0      	movs	r3, #224	; 0xe0
 80024c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024c2:	2302      	movs	r3, #2
 80024c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c6:	2300      	movs	r3, #0
 80024c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ca:	2300      	movs	r3, #0
 80024cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80024ce:	2305      	movs	r3, #5
 80024d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024d2:	f107 0314 	add.w	r3, r7, #20
 80024d6:	4619      	mov	r1, r3
 80024d8:	4805      	ldr	r0, [pc, #20]	; (80024f0 <HAL_SPI_MspInit+0x8c>)
 80024da:	f000 fb99 	bl	8002c10 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80024de:	bf00      	nop
 80024e0:	3728      	adds	r7, #40	; 0x28
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	40013000 	.word	0x40013000
 80024ec:	40023800 	.word	0x40023800
 80024f0:	40020000 	.word	0x40020000

080024f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b08c      	sub	sp, #48	; 0x30
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024fc:	f107 031c 	add.w	r3, r7, #28
 8002500:	2200      	movs	r2, #0
 8002502:	601a      	str	r2, [r3, #0]
 8002504:	605a      	str	r2, [r3, #4]
 8002506:	609a      	str	r2, [r3, #8]
 8002508:	60da      	str	r2, [r3, #12]
 800250a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a3a      	ldr	r2, [pc, #232]	; (80025fc <HAL_UART_MspInit+0x108>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d134      	bne.n	8002580 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002516:	2300      	movs	r3, #0
 8002518:	61bb      	str	r3, [r7, #24]
 800251a:	4b39      	ldr	r3, [pc, #228]	; (8002600 <HAL_UART_MspInit+0x10c>)
 800251c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800251e:	4a38      	ldr	r2, [pc, #224]	; (8002600 <HAL_UART_MspInit+0x10c>)
 8002520:	f043 0310 	orr.w	r3, r3, #16
 8002524:	6453      	str	r3, [r2, #68]	; 0x44
 8002526:	4b36      	ldr	r3, [pc, #216]	; (8002600 <HAL_UART_MspInit+0x10c>)
 8002528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800252a:	f003 0310 	and.w	r3, r3, #16
 800252e:	61bb      	str	r3, [r7, #24]
 8002530:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002532:	2300      	movs	r3, #0
 8002534:	617b      	str	r3, [r7, #20]
 8002536:	4b32      	ldr	r3, [pc, #200]	; (8002600 <HAL_UART_MspInit+0x10c>)
 8002538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253a:	4a31      	ldr	r2, [pc, #196]	; (8002600 <HAL_UART_MspInit+0x10c>)
 800253c:	f043 0302 	orr.w	r3, r3, #2
 8002540:	6313      	str	r3, [r2, #48]	; 0x30
 8002542:	4b2f      	ldr	r3, [pc, #188]	; (8002600 <HAL_UART_MspInit+0x10c>)
 8002544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002546:	f003 0302 	and.w	r3, r3, #2
 800254a:	617b      	str	r3, [r7, #20]
 800254c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800254e:	23c0      	movs	r3, #192	; 0xc0
 8002550:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002552:	2302      	movs	r3, #2
 8002554:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002556:	2300      	movs	r3, #0
 8002558:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800255a:	2303      	movs	r3, #3
 800255c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800255e:	2307      	movs	r3, #7
 8002560:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002562:	f107 031c 	add.w	r3, r7, #28
 8002566:	4619      	mov	r1, r3
 8002568:	4826      	ldr	r0, [pc, #152]	; (8002604 <HAL_UART_MspInit+0x110>)
 800256a:	f000 fb51 	bl	8002c10 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800256e:	2200      	movs	r2, #0
 8002570:	2100      	movs	r1, #0
 8002572:	2025      	movs	r0, #37	; 0x25
 8002574:	f000 fa83 	bl	8002a7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002578:	2025      	movs	r0, #37	; 0x25
 800257a:	f000 fa9c 	bl	8002ab6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800257e:	e038      	b.n	80025f2 <HAL_UART_MspInit+0xfe>
  else if(huart->Instance==USART2)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a20      	ldr	r2, [pc, #128]	; (8002608 <HAL_UART_MspInit+0x114>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d133      	bne.n	80025f2 <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART2_CLK_ENABLE();
 800258a:	2300      	movs	r3, #0
 800258c:	613b      	str	r3, [r7, #16]
 800258e:	4b1c      	ldr	r3, [pc, #112]	; (8002600 <HAL_UART_MspInit+0x10c>)
 8002590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002592:	4a1b      	ldr	r2, [pc, #108]	; (8002600 <HAL_UART_MspInit+0x10c>)
 8002594:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002598:	6413      	str	r3, [r2, #64]	; 0x40
 800259a:	4b19      	ldr	r3, [pc, #100]	; (8002600 <HAL_UART_MspInit+0x10c>)
 800259c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a2:	613b      	str	r3, [r7, #16]
 80025a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025a6:	2300      	movs	r3, #0
 80025a8:	60fb      	str	r3, [r7, #12]
 80025aa:	4b15      	ldr	r3, [pc, #84]	; (8002600 <HAL_UART_MspInit+0x10c>)
 80025ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ae:	4a14      	ldr	r2, [pc, #80]	; (8002600 <HAL_UART_MspInit+0x10c>)
 80025b0:	f043 0301 	orr.w	r3, r3, #1
 80025b4:	6313      	str	r3, [r2, #48]	; 0x30
 80025b6:	4b12      	ldr	r3, [pc, #72]	; (8002600 <HAL_UART_MspInit+0x10c>)
 80025b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ba:	f003 0301 	and.w	r3, r3, #1
 80025be:	60fb      	str	r3, [r7, #12]
 80025c0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80025c2:	230c      	movs	r3, #12
 80025c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c6:	2302      	movs	r3, #2
 80025c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ca:	2300      	movs	r3, #0
 80025cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025ce:	2303      	movs	r3, #3
 80025d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80025d2:	2307      	movs	r3, #7
 80025d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025d6:	f107 031c 	add.w	r3, r7, #28
 80025da:	4619      	mov	r1, r3
 80025dc:	480b      	ldr	r0, [pc, #44]	; (800260c <HAL_UART_MspInit+0x118>)
 80025de:	f000 fb17 	bl	8002c10 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80025e2:	2200      	movs	r2, #0
 80025e4:	2100      	movs	r1, #0
 80025e6:	2026      	movs	r0, #38	; 0x26
 80025e8:	f000 fa49 	bl	8002a7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80025ec:	2026      	movs	r0, #38	; 0x26
 80025ee:	f000 fa62 	bl	8002ab6 <HAL_NVIC_EnableIRQ>
}
 80025f2:	bf00      	nop
 80025f4:	3730      	adds	r7, #48	; 0x30
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	40011000 	.word	0x40011000
 8002600:	40023800 	.word	0x40023800
 8002604:	40020400 	.word	0x40020400
 8002608:	40004400 	.word	0x40004400
 800260c:	40020000 	.word	0x40020000

08002610 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002614:	e7fe      	b.n	8002614 <NMI_Handler+0x4>

08002616 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002616:	b480      	push	{r7}
 8002618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800261a:	e7fe      	b.n	800261a <HardFault_Handler+0x4>

0800261c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002620:	e7fe      	b.n	8002620 <MemManage_Handler+0x4>

08002622 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002622:	b480      	push	{r7}
 8002624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002626:	e7fe      	b.n	8002626 <BusFault_Handler+0x4>

08002628 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800262c:	e7fe      	b.n	800262c <UsageFault_Handler+0x4>

0800262e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800262e:	b480      	push	{r7}
 8002630:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002632:	bf00      	nop
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002640:	bf00      	nop
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr

0800264a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800264a:	b480      	push	{r7}
 800264c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800264e:	bf00      	nop
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr

08002658 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(timeout >0)  timeout--;
 800265c:	4b06      	ldr	r3, [pc, #24]	; (8002678 <SysTick_Handler+0x20>)
 800265e:	881b      	ldrh	r3, [r3, #0]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d005      	beq.n	8002670 <SysTick_Handler+0x18>
 8002664:	4b04      	ldr	r3, [pc, #16]	; (8002678 <SysTick_Handler+0x20>)
 8002666:	881b      	ldrh	r3, [r3, #0]
 8002668:	3b01      	subs	r3, #1
 800266a:	b29a      	uxth	r2, r3
 800266c:	4b02      	ldr	r3, [pc, #8]	; (8002678 <SysTick_Handler+0x20>)
 800266e:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002670:	f000 f8e6 	bl	8002840 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002674:	bf00      	nop
 8002676:	bd80      	pop	{r7, pc}
 8002678:	200000cc 	.word	0x200000cc

0800267c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Uart_isr(&huart1);
 8002680:	4802      	ldr	r0, [pc, #8]	; (800268c <USART1_IRQHandler+0x10>)
 8002682:	f7ff fb73 	bl	8001d6c <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
 // HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002686:	bf00      	nop
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	20000208 	.word	0x20000208

08002690 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002694:	4802      	ldr	r0, [pc, #8]	; (80026a0 <USART2_IRQHandler+0x10>)
 8002696:	f003 fbc9 	bl	8005e2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800269a:	bf00      	nop
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	2000024c 	.word	0x2000024c

080026a4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80026a8:	4802      	ldr	r0, [pc, #8]	; (80026b4 <OTG_FS_IRQHandler+0x10>)
 80026aa:	f000 fed1 	bl	8003450 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80026ae:	bf00      	nop
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	20000780 	.word	0x20000780

080026b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b086      	sub	sp, #24
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026c0:	4a14      	ldr	r2, [pc, #80]	; (8002714 <_sbrk+0x5c>)
 80026c2:	4b15      	ldr	r3, [pc, #84]	; (8002718 <_sbrk+0x60>)
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026cc:	4b13      	ldr	r3, [pc, #76]	; (800271c <_sbrk+0x64>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d102      	bne.n	80026da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026d4:	4b11      	ldr	r3, [pc, #68]	; (800271c <_sbrk+0x64>)
 80026d6:	4a12      	ldr	r2, [pc, #72]	; (8002720 <_sbrk+0x68>)
 80026d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026da:	4b10      	ldr	r3, [pc, #64]	; (800271c <_sbrk+0x64>)
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4413      	add	r3, r2
 80026e2:	693a      	ldr	r2, [r7, #16]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d207      	bcs.n	80026f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026e8:	f007 fd46 	bl	800a178 <__errno>
 80026ec:	4603      	mov	r3, r0
 80026ee:	220c      	movs	r2, #12
 80026f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026f2:	f04f 33ff 	mov.w	r3, #4294967295
 80026f6:	e009      	b.n	800270c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026f8:	4b08      	ldr	r3, [pc, #32]	; (800271c <_sbrk+0x64>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026fe:	4b07      	ldr	r3, [pc, #28]	; (800271c <_sbrk+0x64>)
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4413      	add	r3, r2
 8002706:	4a05      	ldr	r2, [pc, #20]	; (800271c <_sbrk+0x64>)
 8002708:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800270a:	68fb      	ldr	r3, [r7, #12]
}
 800270c:	4618      	mov	r0, r3
 800270e:	3718      	adds	r7, #24
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	20020000 	.word	0x20020000
 8002718:	00000400 	.word	0x00000400
 800271c:	2000039c 	.word	0x2000039c
 8002720:	20000a98 	.word	0x20000a98

08002724 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002728:	4b06      	ldr	r3, [pc, #24]	; (8002744 <SystemInit+0x20>)
 800272a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800272e:	4a05      	ldr	r2, [pc, #20]	; (8002744 <SystemInit+0x20>)
 8002730:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002734:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002738:	bf00      	nop
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	e000ed00 	.word	0xe000ed00

08002748 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002748:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002780 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800274c:	480d      	ldr	r0, [pc, #52]	; (8002784 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800274e:	490e      	ldr	r1, [pc, #56]	; (8002788 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002750:	4a0e      	ldr	r2, [pc, #56]	; (800278c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002752:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002754:	e002      	b.n	800275c <LoopCopyDataInit>

08002756 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002756:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002758:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800275a:	3304      	adds	r3, #4

0800275c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800275c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800275e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002760:	d3f9      	bcc.n	8002756 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002762:	4a0b      	ldr	r2, [pc, #44]	; (8002790 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002764:	4c0b      	ldr	r4, [pc, #44]	; (8002794 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002766:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002768:	e001      	b.n	800276e <LoopFillZerobss>

0800276a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800276a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800276c:	3204      	adds	r2, #4

0800276e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800276e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002770:	d3fb      	bcc.n	800276a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002772:	f7ff ffd7 	bl	8002724 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002776:	f007 fd05 	bl	800a184 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800277a:	f7ff fb51 	bl	8001e20 <main>
  bx  lr    
 800277e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002780:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002784:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002788:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 800278c:	0800b4d0 	.word	0x0800b4d0
  ldr r2, =_sbss
 8002790:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8002794:	20000a94 	.word	0x20000a94

08002798 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002798:	e7fe      	b.n	8002798 <ADC_IRQHandler>
	...

0800279c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80027a0:	4b0e      	ldr	r3, [pc, #56]	; (80027dc <HAL_Init+0x40>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a0d      	ldr	r2, [pc, #52]	; (80027dc <HAL_Init+0x40>)
 80027a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80027ac:	4b0b      	ldr	r3, [pc, #44]	; (80027dc <HAL_Init+0x40>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a0a      	ldr	r2, [pc, #40]	; (80027dc <HAL_Init+0x40>)
 80027b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027b8:	4b08      	ldr	r3, [pc, #32]	; (80027dc <HAL_Init+0x40>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a07      	ldr	r2, [pc, #28]	; (80027dc <HAL_Init+0x40>)
 80027be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027c4:	2003      	movs	r0, #3
 80027c6:	f000 f94f 	bl	8002a68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027ca:	2000      	movs	r0, #0
 80027cc:	f000 f808 	bl	80027e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027d0:	f7ff fda0 	bl	8002314 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	40023c00 	.word	0x40023c00

080027e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027e8:	4b12      	ldr	r3, [pc, #72]	; (8002834 <HAL_InitTick+0x54>)
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	4b12      	ldr	r3, [pc, #72]	; (8002838 <HAL_InitTick+0x58>)
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	4619      	mov	r1, r3
 80027f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80027fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80027fe:	4618      	mov	r0, r3
 8002800:	f000 f967 	bl	8002ad2 <HAL_SYSTICK_Config>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d001      	beq.n	800280e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e00e      	b.n	800282c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2b0f      	cmp	r3, #15
 8002812:	d80a      	bhi.n	800282a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002814:	2200      	movs	r2, #0
 8002816:	6879      	ldr	r1, [r7, #4]
 8002818:	f04f 30ff 	mov.w	r0, #4294967295
 800281c:	f000 f92f 	bl	8002a7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002820:	4a06      	ldr	r2, [pc, #24]	; (800283c <HAL_InitTick+0x5c>)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002826:	2300      	movs	r3, #0
 8002828:	e000      	b.n	800282c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
}
 800282c:	4618      	mov	r0, r3
 800282e:	3708      	adds	r7, #8
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	20000004 	.word	0x20000004
 8002838:	2000000c 	.word	0x2000000c
 800283c:	20000008 	.word	0x20000008

08002840 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002840:	b480      	push	{r7}
 8002842:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002844:	4b06      	ldr	r3, [pc, #24]	; (8002860 <HAL_IncTick+0x20>)
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	461a      	mov	r2, r3
 800284a:	4b06      	ldr	r3, [pc, #24]	; (8002864 <HAL_IncTick+0x24>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4413      	add	r3, r2
 8002850:	4a04      	ldr	r2, [pc, #16]	; (8002864 <HAL_IncTick+0x24>)
 8002852:	6013      	str	r3, [r2, #0]
}
 8002854:	bf00      	nop
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop
 8002860:	2000000c 	.word	0x2000000c
 8002864:	200003a0 	.word	0x200003a0

08002868 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002868:	b480      	push	{r7}
 800286a:	af00      	add	r7, sp, #0
  return uwTick;
 800286c:	4b03      	ldr	r3, [pc, #12]	; (800287c <HAL_GetTick+0x14>)
 800286e:	681b      	ldr	r3, [r3, #0]
}
 8002870:	4618      	mov	r0, r3
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	200003a0 	.word	0x200003a0

08002880 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b084      	sub	sp, #16
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002888:	f7ff ffee 	bl	8002868 <HAL_GetTick>
 800288c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002898:	d005      	beq.n	80028a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800289a:	4b0a      	ldr	r3, [pc, #40]	; (80028c4 <HAL_Delay+0x44>)
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	461a      	mov	r2, r3
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	4413      	add	r3, r2
 80028a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80028a6:	bf00      	nop
 80028a8:	f7ff ffde 	bl	8002868 <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	68fa      	ldr	r2, [r7, #12]
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d8f7      	bhi.n	80028a8 <HAL_Delay+0x28>
  {
  }
}
 80028b8:	bf00      	nop
 80028ba:	bf00      	nop
 80028bc:	3710      	adds	r7, #16
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	2000000c 	.word	0x2000000c

080028c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b085      	sub	sp, #20
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f003 0307 	and.w	r3, r3, #7
 80028d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028d8:	4b0c      	ldr	r3, [pc, #48]	; (800290c <__NVIC_SetPriorityGrouping+0x44>)
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028de:	68ba      	ldr	r2, [r7, #8]
 80028e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028e4:	4013      	ands	r3, r2
 80028e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028fa:	4a04      	ldr	r2, [pc, #16]	; (800290c <__NVIC_SetPriorityGrouping+0x44>)
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	60d3      	str	r3, [r2, #12]
}
 8002900:	bf00      	nop
 8002902:	3714      	adds	r7, #20
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr
 800290c:	e000ed00 	.word	0xe000ed00

08002910 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002914:	4b04      	ldr	r3, [pc, #16]	; (8002928 <__NVIC_GetPriorityGrouping+0x18>)
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	0a1b      	lsrs	r3, r3, #8
 800291a:	f003 0307 	and.w	r3, r3, #7
}
 800291e:	4618      	mov	r0, r3
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr
 8002928:	e000ed00 	.word	0xe000ed00

0800292c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	4603      	mov	r3, r0
 8002934:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800293a:	2b00      	cmp	r3, #0
 800293c:	db0b      	blt.n	8002956 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800293e:	79fb      	ldrb	r3, [r7, #7]
 8002940:	f003 021f 	and.w	r2, r3, #31
 8002944:	4907      	ldr	r1, [pc, #28]	; (8002964 <__NVIC_EnableIRQ+0x38>)
 8002946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800294a:	095b      	lsrs	r3, r3, #5
 800294c:	2001      	movs	r0, #1
 800294e:	fa00 f202 	lsl.w	r2, r0, r2
 8002952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002956:	bf00      	nop
 8002958:	370c      	adds	r7, #12
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	e000e100 	.word	0xe000e100

08002968 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	4603      	mov	r3, r0
 8002970:	6039      	str	r1, [r7, #0]
 8002972:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002978:	2b00      	cmp	r3, #0
 800297a:	db0a      	blt.n	8002992 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	b2da      	uxtb	r2, r3
 8002980:	490c      	ldr	r1, [pc, #48]	; (80029b4 <__NVIC_SetPriority+0x4c>)
 8002982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002986:	0112      	lsls	r2, r2, #4
 8002988:	b2d2      	uxtb	r2, r2
 800298a:	440b      	add	r3, r1
 800298c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002990:	e00a      	b.n	80029a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	b2da      	uxtb	r2, r3
 8002996:	4908      	ldr	r1, [pc, #32]	; (80029b8 <__NVIC_SetPriority+0x50>)
 8002998:	79fb      	ldrb	r3, [r7, #7]
 800299a:	f003 030f 	and.w	r3, r3, #15
 800299e:	3b04      	subs	r3, #4
 80029a0:	0112      	lsls	r2, r2, #4
 80029a2:	b2d2      	uxtb	r2, r2
 80029a4:	440b      	add	r3, r1
 80029a6:	761a      	strb	r2, [r3, #24]
}
 80029a8:	bf00      	nop
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr
 80029b4:	e000e100 	.word	0xe000e100
 80029b8:	e000ed00 	.word	0xe000ed00

080029bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029bc:	b480      	push	{r7}
 80029be:	b089      	sub	sp, #36	; 0x24
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	60b9      	str	r1, [r7, #8]
 80029c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f003 0307 	and.w	r3, r3, #7
 80029ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	f1c3 0307 	rsb	r3, r3, #7
 80029d6:	2b04      	cmp	r3, #4
 80029d8:	bf28      	it	cs
 80029da:	2304      	movcs	r3, #4
 80029dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	3304      	adds	r3, #4
 80029e2:	2b06      	cmp	r3, #6
 80029e4:	d902      	bls.n	80029ec <NVIC_EncodePriority+0x30>
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	3b03      	subs	r3, #3
 80029ea:	e000      	b.n	80029ee <NVIC_EncodePriority+0x32>
 80029ec:	2300      	movs	r3, #0
 80029ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029f0:	f04f 32ff 	mov.w	r2, #4294967295
 80029f4:	69bb      	ldr	r3, [r7, #24]
 80029f6:	fa02 f303 	lsl.w	r3, r2, r3
 80029fa:	43da      	mvns	r2, r3
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	401a      	ands	r2, r3
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a04:	f04f 31ff 	mov.w	r1, #4294967295
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a0e:	43d9      	mvns	r1, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a14:	4313      	orrs	r3, r2
         );
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3724      	adds	r7, #36	; 0x24
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
	...

08002a24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	3b01      	subs	r3, #1
 8002a30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a34:	d301      	bcc.n	8002a3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a36:	2301      	movs	r3, #1
 8002a38:	e00f      	b.n	8002a5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a3a:	4a0a      	ldr	r2, [pc, #40]	; (8002a64 <SysTick_Config+0x40>)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	3b01      	subs	r3, #1
 8002a40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a42:	210f      	movs	r1, #15
 8002a44:	f04f 30ff 	mov.w	r0, #4294967295
 8002a48:	f7ff ff8e 	bl	8002968 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a4c:	4b05      	ldr	r3, [pc, #20]	; (8002a64 <SysTick_Config+0x40>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a52:	4b04      	ldr	r3, [pc, #16]	; (8002a64 <SysTick_Config+0x40>)
 8002a54:	2207      	movs	r2, #7
 8002a56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3708      	adds	r7, #8
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	e000e010 	.word	0xe000e010

08002a68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f7ff ff29 	bl	80028c8 <__NVIC_SetPriorityGrouping>
}
 8002a76:	bf00      	nop
 8002a78:	3708      	adds	r7, #8
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	b086      	sub	sp, #24
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	4603      	mov	r3, r0
 8002a86:	60b9      	str	r1, [r7, #8]
 8002a88:	607a      	str	r2, [r7, #4]
 8002a8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a90:	f7ff ff3e 	bl	8002910 <__NVIC_GetPriorityGrouping>
 8002a94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	68b9      	ldr	r1, [r7, #8]
 8002a9a:	6978      	ldr	r0, [r7, #20]
 8002a9c:	f7ff ff8e 	bl	80029bc <NVIC_EncodePriority>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002aa6:	4611      	mov	r1, r2
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7ff ff5d 	bl	8002968 <__NVIC_SetPriority>
}
 8002aae:	bf00      	nop
 8002ab0:	3718      	adds	r7, #24
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}

08002ab6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	b082      	sub	sp, #8
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	4603      	mov	r3, r0
 8002abe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ac0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7ff ff31 	bl	800292c <__NVIC_EnableIRQ>
}
 8002aca:	bf00      	nop
 8002acc:	3708      	adds	r7, #8
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}

08002ad2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	b082      	sub	sp, #8
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f7ff ffa2 	bl	8002a24 <SysTick_Config>
 8002ae0:	4603      	mov	r3, r0
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3708      	adds	r7, #8
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}

08002aea <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002aea:	b580      	push	{r7, lr}
 8002aec:	b084      	sub	sp, #16
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002af6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002af8:	f7ff feb6 	bl	8002868 <HAL_GetTick>
 8002afc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d008      	beq.n	8002b1c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2280      	movs	r2, #128	; 0x80
 8002b0e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e052      	b.n	8002bc2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f022 0216 	bic.w	r2, r2, #22
 8002b2a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	695a      	ldr	r2, [r3, #20]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b3a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d103      	bne.n	8002b4c <HAL_DMA_Abort+0x62>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d007      	beq.n	8002b5c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f022 0208 	bic.w	r2, r2, #8
 8002b5a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f022 0201 	bic.w	r2, r2, #1
 8002b6a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b6c:	e013      	b.n	8002b96 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b6e:	f7ff fe7b 	bl	8002868 <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	2b05      	cmp	r3, #5
 8002b7a:	d90c      	bls.n	8002b96 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2220      	movs	r2, #32
 8002b80:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2203      	movs	r2, #3
 8002b86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e015      	b.n	8002bc2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0301 	and.w	r3, r3, #1
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d1e4      	bne.n	8002b6e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ba8:	223f      	movs	r2, #63	; 0x3f
 8002baa:	409a      	lsls	r2, r3
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3710      	adds	r7, #16
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}

08002bca <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002bca:	b480      	push	{r7}
 8002bcc:	b083      	sub	sp, #12
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d004      	beq.n	8002be8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2280      	movs	r2, #128	; 0x80
 8002be2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e00c      	b.n	8002c02 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2205      	movs	r2, #5
 8002bec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f022 0201 	bic.w	r2, r2, #1
 8002bfe:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	370c      	adds	r7, #12
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr
	...

08002c10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b089      	sub	sp, #36	; 0x24
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c22:	2300      	movs	r3, #0
 8002c24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c26:	2300      	movs	r3, #0
 8002c28:	61fb      	str	r3, [r7, #28]
 8002c2a:	e16b      	b.n	8002f04 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	fa02 f303 	lsl.w	r3, r2, r3
 8002c34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	697a      	ldr	r2, [r7, #20]
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c40:	693a      	ldr	r2, [r7, #16]
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	f040 815a 	bne.w	8002efe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f003 0303 	and.w	r3, r3, #3
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d005      	beq.n	8002c62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d130      	bne.n	8002cc4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	005b      	lsls	r3, r3, #1
 8002c6c:	2203      	movs	r2, #3
 8002c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c72:	43db      	mvns	r3, r3
 8002c74:	69ba      	ldr	r2, [r7, #24]
 8002c76:	4013      	ands	r3, r2
 8002c78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	68da      	ldr	r2, [r3, #12]
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	005b      	lsls	r3, r3, #1
 8002c82:	fa02 f303 	lsl.w	r3, r2, r3
 8002c86:	69ba      	ldr	r2, [r7, #24]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	69ba      	ldr	r2, [r7, #24]
 8002c90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c98:	2201      	movs	r2, #1
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca0:	43db      	mvns	r3, r3
 8002ca2:	69ba      	ldr	r2, [r7, #24]
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	091b      	lsrs	r3, r3, #4
 8002cae:	f003 0201 	and.w	r2, r3, #1
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb8:	69ba      	ldr	r2, [r7, #24]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	69ba      	ldr	r2, [r7, #24]
 8002cc2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f003 0303 	and.w	r3, r3, #3
 8002ccc:	2b03      	cmp	r3, #3
 8002cce:	d017      	beq.n	8002d00 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	005b      	lsls	r3, r3, #1
 8002cda:	2203      	movs	r2, #3
 8002cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce0:	43db      	mvns	r3, r3
 8002ce2:	69ba      	ldr	r2, [r7, #24]
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	689a      	ldr	r2, [r3, #8]
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	005b      	lsls	r3, r3, #1
 8002cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf4:	69ba      	ldr	r2, [r7, #24]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	69ba      	ldr	r2, [r7, #24]
 8002cfe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f003 0303 	and.w	r3, r3, #3
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d123      	bne.n	8002d54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	08da      	lsrs	r2, r3, #3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	3208      	adds	r2, #8
 8002d14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	f003 0307 	and.w	r3, r3, #7
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	220f      	movs	r2, #15
 8002d24:	fa02 f303 	lsl.w	r3, r2, r3
 8002d28:	43db      	mvns	r3, r3
 8002d2a:	69ba      	ldr	r2, [r7, #24]
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	691a      	ldr	r2, [r3, #16]
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	f003 0307 	and.w	r3, r3, #7
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d40:	69ba      	ldr	r2, [r7, #24]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	08da      	lsrs	r2, r3, #3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	3208      	adds	r2, #8
 8002d4e:	69b9      	ldr	r1, [r7, #24]
 8002d50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	005b      	lsls	r3, r3, #1
 8002d5e:	2203      	movs	r2, #3
 8002d60:	fa02 f303 	lsl.w	r3, r2, r3
 8002d64:	43db      	mvns	r3, r3
 8002d66:	69ba      	ldr	r2, [r7, #24]
 8002d68:	4013      	ands	r3, r2
 8002d6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f003 0203 	and.w	r2, r3, #3
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	005b      	lsls	r3, r3, #1
 8002d78:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7c:	69ba      	ldr	r2, [r7, #24]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	69ba      	ldr	r2, [r7, #24]
 8002d86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	f000 80b4 	beq.w	8002efe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d96:	2300      	movs	r3, #0
 8002d98:	60fb      	str	r3, [r7, #12]
 8002d9a:	4b60      	ldr	r3, [pc, #384]	; (8002f1c <HAL_GPIO_Init+0x30c>)
 8002d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d9e:	4a5f      	ldr	r2, [pc, #380]	; (8002f1c <HAL_GPIO_Init+0x30c>)
 8002da0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002da4:	6453      	str	r3, [r2, #68]	; 0x44
 8002da6:	4b5d      	ldr	r3, [pc, #372]	; (8002f1c <HAL_GPIO_Init+0x30c>)
 8002da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002daa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dae:	60fb      	str	r3, [r7, #12]
 8002db0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002db2:	4a5b      	ldr	r2, [pc, #364]	; (8002f20 <HAL_GPIO_Init+0x310>)
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	089b      	lsrs	r3, r3, #2
 8002db8:	3302      	adds	r3, #2
 8002dba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	f003 0303 	and.w	r3, r3, #3
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	220f      	movs	r2, #15
 8002dca:	fa02 f303 	lsl.w	r3, r2, r3
 8002dce:	43db      	mvns	r3, r3
 8002dd0:	69ba      	ldr	r2, [r7, #24]
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a52      	ldr	r2, [pc, #328]	; (8002f24 <HAL_GPIO_Init+0x314>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d02b      	beq.n	8002e36 <HAL_GPIO_Init+0x226>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a51      	ldr	r2, [pc, #324]	; (8002f28 <HAL_GPIO_Init+0x318>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d025      	beq.n	8002e32 <HAL_GPIO_Init+0x222>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a50      	ldr	r2, [pc, #320]	; (8002f2c <HAL_GPIO_Init+0x31c>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d01f      	beq.n	8002e2e <HAL_GPIO_Init+0x21e>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a4f      	ldr	r2, [pc, #316]	; (8002f30 <HAL_GPIO_Init+0x320>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d019      	beq.n	8002e2a <HAL_GPIO_Init+0x21a>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a4e      	ldr	r2, [pc, #312]	; (8002f34 <HAL_GPIO_Init+0x324>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d013      	beq.n	8002e26 <HAL_GPIO_Init+0x216>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a4d      	ldr	r2, [pc, #308]	; (8002f38 <HAL_GPIO_Init+0x328>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d00d      	beq.n	8002e22 <HAL_GPIO_Init+0x212>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4a4c      	ldr	r2, [pc, #304]	; (8002f3c <HAL_GPIO_Init+0x32c>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d007      	beq.n	8002e1e <HAL_GPIO_Init+0x20e>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a4b      	ldr	r2, [pc, #300]	; (8002f40 <HAL_GPIO_Init+0x330>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d101      	bne.n	8002e1a <HAL_GPIO_Init+0x20a>
 8002e16:	2307      	movs	r3, #7
 8002e18:	e00e      	b.n	8002e38 <HAL_GPIO_Init+0x228>
 8002e1a:	2308      	movs	r3, #8
 8002e1c:	e00c      	b.n	8002e38 <HAL_GPIO_Init+0x228>
 8002e1e:	2306      	movs	r3, #6
 8002e20:	e00a      	b.n	8002e38 <HAL_GPIO_Init+0x228>
 8002e22:	2305      	movs	r3, #5
 8002e24:	e008      	b.n	8002e38 <HAL_GPIO_Init+0x228>
 8002e26:	2304      	movs	r3, #4
 8002e28:	e006      	b.n	8002e38 <HAL_GPIO_Init+0x228>
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e004      	b.n	8002e38 <HAL_GPIO_Init+0x228>
 8002e2e:	2302      	movs	r3, #2
 8002e30:	e002      	b.n	8002e38 <HAL_GPIO_Init+0x228>
 8002e32:	2301      	movs	r3, #1
 8002e34:	e000      	b.n	8002e38 <HAL_GPIO_Init+0x228>
 8002e36:	2300      	movs	r3, #0
 8002e38:	69fa      	ldr	r2, [r7, #28]
 8002e3a:	f002 0203 	and.w	r2, r2, #3
 8002e3e:	0092      	lsls	r2, r2, #2
 8002e40:	4093      	lsls	r3, r2
 8002e42:	69ba      	ldr	r2, [r7, #24]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e48:	4935      	ldr	r1, [pc, #212]	; (8002f20 <HAL_GPIO_Init+0x310>)
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	089b      	lsrs	r3, r3, #2
 8002e4e:	3302      	adds	r3, #2
 8002e50:	69ba      	ldr	r2, [r7, #24]
 8002e52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e56:	4b3b      	ldr	r3, [pc, #236]	; (8002f44 <HAL_GPIO_Init+0x334>)
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	43db      	mvns	r3, r3
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	4013      	ands	r3, r2
 8002e64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d003      	beq.n	8002e7a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002e72:	69ba      	ldr	r2, [r7, #24]
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e7a:	4a32      	ldr	r2, [pc, #200]	; (8002f44 <HAL_GPIO_Init+0x334>)
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e80:	4b30      	ldr	r3, [pc, #192]	; (8002f44 <HAL_GPIO_Init+0x334>)
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	43db      	mvns	r3, r3
 8002e8a:	69ba      	ldr	r2, [r7, #24]
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d003      	beq.n	8002ea4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002e9c:	69ba      	ldr	r2, [r7, #24]
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ea4:	4a27      	ldr	r2, [pc, #156]	; (8002f44 <HAL_GPIO_Init+0x334>)
 8002ea6:	69bb      	ldr	r3, [r7, #24]
 8002ea8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002eaa:	4b26      	ldr	r3, [pc, #152]	; (8002f44 <HAL_GPIO_Init+0x334>)
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	43db      	mvns	r3, r3
 8002eb4:	69ba      	ldr	r2, [r7, #24]
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d003      	beq.n	8002ece <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002ec6:	69ba      	ldr	r2, [r7, #24]
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ece:	4a1d      	ldr	r2, [pc, #116]	; (8002f44 <HAL_GPIO_Init+0x334>)
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ed4:	4b1b      	ldr	r3, [pc, #108]	; (8002f44 <HAL_GPIO_Init+0x334>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	43db      	mvns	r3, r3
 8002ede:	69ba      	ldr	r2, [r7, #24]
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d003      	beq.n	8002ef8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002ef0:	69ba      	ldr	r2, [r7, #24]
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ef8:	4a12      	ldr	r2, [pc, #72]	; (8002f44 <HAL_GPIO_Init+0x334>)
 8002efa:	69bb      	ldr	r3, [r7, #24]
 8002efc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	3301      	adds	r3, #1
 8002f02:	61fb      	str	r3, [r7, #28]
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	2b0f      	cmp	r3, #15
 8002f08:	f67f ae90 	bls.w	8002c2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f0c:	bf00      	nop
 8002f0e:	bf00      	nop
 8002f10:	3724      	adds	r7, #36	; 0x24
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
 8002f1a:	bf00      	nop
 8002f1c:	40023800 	.word	0x40023800
 8002f20:	40013800 	.word	0x40013800
 8002f24:	40020000 	.word	0x40020000
 8002f28:	40020400 	.word	0x40020400
 8002f2c:	40020800 	.word	0x40020800
 8002f30:	40020c00 	.word	0x40020c00
 8002f34:	40021000 	.word	0x40021000
 8002f38:	40021400 	.word	0x40021400
 8002f3c:	40021800 	.word	0x40021800
 8002f40:	40021c00 	.word	0x40021c00
 8002f44:	40013c00 	.word	0x40013c00

08002f48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	460b      	mov	r3, r1
 8002f52:	807b      	strh	r3, [r7, #2]
 8002f54:	4613      	mov	r3, r2
 8002f56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f58:	787b      	ldrb	r3, [r7, #1]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d003      	beq.n	8002f66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f5e:	887a      	ldrh	r2, [r7, #2]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f64:	e003      	b.n	8002f6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f66:	887b      	ldrh	r3, [r7, #2]
 8002f68:	041a      	lsls	r2, r3, #16
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	619a      	str	r2, [r3, #24]
}
 8002f6e:	bf00      	nop
 8002f70:	370c      	adds	r7, #12
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr

08002f7a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002f7a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f7c:	b08f      	sub	sp, #60	; 0x3c
 8002f7e:	af0a      	add	r7, sp, #40	; 0x28
 8002f80:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d101      	bne.n	8002f8c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e054      	b.n	8003036 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d106      	bne.n	8002fac <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f006 fe38 	bl	8009c1c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2203      	movs	r2, #3
 8002fb0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d102      	bne.n	8002fc6 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f003 fe66 	bl	8006c9c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	603b      	str	r3, [r7, #0]
 8002fd6:	687e      	ldr	r6, [r7, #4]
 8002fd8:	466d      	mov	r5, sp
 8002fda:	f106 0410 	add.w	r4, r6, #16
 8002fde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fe0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fe2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fe4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fe6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002fea:	e885 0003 	stmia.w	r5, {r0, r1}
 8002fee:	1d33      	adds	r3, r6, #4
 8002ff0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ff2:	6838      	ldr	r0, [r7, #0]
 8002ff4:	f003 fde0 	bl	8006bb8 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	2101      	movs	r1, #1
 8002ffe:	4618      	mov	r0, r3
 8003000:	f003 fe5d 	bl	8006cbe <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	603b      	str	r3, [r7, #0]
 800300a:	687e      	ldr	r6, [r7, #4]
 800300c:	466d      	mov	r5, sp
 800300e:	f106 0410 	add.w	r4, r6, #16
 8003012:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003014:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003016:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003018:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800301a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800301e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003022:	1d33      	adds	r3, r6, #4
 8003024:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003026:	6838      	ldr	r0, [r7, #0]
 8003028:	f003 ffe6 	bl	8006ff8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2201      	movs	r2, #1
 8003030:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8003034:	2300      	movs	r3, #0
}
 8003036:	4618      	mov	r0, r3
 8003038:	3714      	adds	r7, #20
 800303a:	46bd      	mov	sp, r7
 800303c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800303e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800303e:	b590      	push	{r4, r7, lr}
 8003040:	b089      	sub	sp, #36	; 0x24
 8003042:	af04      	add	r7, sp, #16
 8003044:	6078      	str	r0, [r7, #4]
 8003046:	4608      	mov	r0, r1
 8003048:	4611      	mov	r1, r2
 800304a:	461a      	mov	r2, r3
 800304c:	4603      	mov	r3, r0
 800304e:	70fb      	strb	r3, [r7, #3]
 8003050:	460b      	mov	r3, r1
 8003052:	70bb      	strb	r3, [r7, #2]
 8003054:	4613      	mov	r3, r2
 8003056:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800305e:	2b01      	cmp	r3, #1
 8003060:	d101      	bne.n	8003066 <HAL_HCD_HC_Init+0x28>
 8003062:	2302      	movs	r3, #2
 8003064:	e076      	b.n	8003154 <HAL_HCD_HC_Init+0x116>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2201      	movs	r2, #1
 800306a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800306e:	78fb      	ldrb	r3, [r7, #3]
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	212c      	movs	r1, #44	; 0x2c
 8003074:	fb01 f303 	mul.w	r3, r1, r3
 8003078:	4413      	add	r3, r2
 800307a:	333d      	adds	r3, #61	; 0x3d
 800307c:	2200      	movs	r2, #0
 800307e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003080:	78fb      	ldrb	r3, [r7, #3]
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	212c      	movs	r1, #44	; 0x2c
 8003086:	fb01 f303 	mul.w	r3, r1, r3
 800308a:	4413      	add	r3, r2
 800308c:	3338      	adds	r3, #56	; 0x38
 800308e:	787a      	ldrb	r2, [r7, #1]
 8003090:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8003092:	78fb      	ldrb	r3, [r7, #3]
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	212c      	movs	r1, #44	; 0x2c
 8003098:	fb01 f303 	mul.w	r3, r1, r3
 800309c:	4413      	add	r3, r2
 800309e:	3340      	adds	r3, #64	; 0x40
 80030a0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80030a2:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80030a4:	78fb      	ldrb	r3, [r7, #3]
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	212c      	movs	r1, #44	; 0x2c
 80030aa:	fb01 f303 	mul.w	r3, r1, r3
 80030ae:	4413      	add	r3, r2
 80030b0:	3339      	adds	r3, #57	; 0x39
 80030b2:	78fa      	ldrb	r2, [r7, #3]
 80030b4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80030b6:	78fb      	ldrb	r3, [r7, #3]
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	212c      	movs	r1, #44	; 0x2c
 80030bc:	fb01 f303 	mul.w	r3, r1, r3
 80030c0:	4413      	add	r3, r2
 80030c2:	333f      	adds	r3, #63	; 0x3f
 80030c4:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80030c8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80030ca:	78fb      	ldrb	r3, [r7, #3]
 80030cc:	78ba      	ldrb	r2, [r7, #2]
 80030ce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80030d2:	b2d0      	uxtb	r0, r2
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	212c      	movs	r1, #44	; 0x2c
 80030d8:	fb01 f303 	mul.w	r3, r1, r3
 80030dc:	4413      	add	r3, r2
 80030de:	333a      	adds	r3, #58	; 0x3a
 80030e0:	4602      	mov	r2, r0
 80030e2:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80030e4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	da09      	bge.n	8003100 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80030ec:	78fb      	ldrb	r3, [r7, #3]
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	212c      	movs	r1, #44	; 0x2c
 80030f2:	fb01 f303 	mul.w	r3, r1, r3
 80030f6:	4413      	add	r3, r2
 80030f8:	333b      	adds	r3, #59	; 0x3b
 80030fa:	2201      	movs	r2, #1
 80030fc:	701a      	strb	r2, [r3, #0]
 80030fe:	e008      	b.n	8003112 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003100:	78fb      	ldrb	r3, [r7, #3]
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	212c      	movs	r1, #44	; 0x2c
 8003106:	fb01 f303 	mul.w	r3, r1, r3
 800310a:	4413      	add	r3, r2
 800310c:	333b      	adds	r3, #59	; 0x3b
 800310e:	2200      	movs	r2, #0
 8003110:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8003112:	78fb      	ldrb	r3, [r7, #3]
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	212c      	movs	r1, #44	; 0x2c
 8003118:	fb01 f303 	mul.w	r3, r1, r3
 800311c:	4413      	add	r3, r2
 800311e:	333c      	adds	r3, #60	; 0x3c
 8003120:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003124:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6818      	ldr	r0, [r3, #0]
 800312a:	787c      	ldrb	r4, [r7, #1]
 800312c:	78ba      	ldrb	r2, [r7, #2]
 800312e:	78f9      	ldrb	r1, [r7, #3]
 8003130:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003132:	9302      	str	r3, [sp, #8]
 8003134:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003138:	9301      	str	r3, [sp, #4]
 800313a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800313e:	9300      	str	r3, [sp, #0]
 8003140:	4623      	mov	r3, r4
 8003142:	f004 f8df 	bl	8007304 <USB_HC_Init>
 8003146:	4603      	mov	r3, r0
 8003148:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003152:	7bfb      	ldrb	r3, [r7, #15]
}
 8003154:	4618      	mov	r0, r3
 8003156:	3714      	adds	r7, #20
 8003158:	46bd      	mov	sp, r7
 800315a:	bd90      	pop	{r4, r7, pc}

0800315c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	460b      	mov	r3, r1
 8003166:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003168:	2300      	movs	r3, #0
 800316a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003172:	2b01      	cmp	r3, #1
 8003174:	d101      	bne.n	800317a <HAL_HCD_HC_Halt+0x1e>
 8003176:	2302      	movs	r3, #2
 8003178:	e00f      	b.n	800319a <HAL_HCD_HC_Halt+0x3e>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2201      	movs	r2, #1
 800317e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	78fa      	ldrb	r2, [r7, #3]
 8003188:	4611      	mov	r1, r2
 800318a:	4618      	mov	r0, r3
 800318c:	f004 fb2f 	bl	80077ee <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003198:	7bfb      	ldrb	r3, [r7, #15]
}
 800319a:	4618      	mov	r0, r3
 800319c:	3710      	adds	r7, #16
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
	...

080031a4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	4608      	mov	r0, r1
 80031ae:	4611      	mov	r1, r2
 80031b0:	461a      	mov	r2, r3
 80031b2:	4603      	mov	r3, r0
 80031b4:	70fb      	strb	r3, [r7, #3]
 80031b6:	460b      	mov	r3, r1
 80031b8:	70bb      	strb	r3, [r7, #2]
 80031ba:	4613      	mov	r3, r2
 80031bc:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80031be:	78fb      	ldrb	r3, [r7, #3]
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	212c      	movs	r1, #44	; 0x2c
 80031c4:	fb01 f303 	mul.w	r3, r1, r3
 80031c8:	4413      	add	r3, r2
 80031ca:	333b      	adds	r3, #59	; 0x3b
 80031cc:	78ba      	ldrb	r2, [r7, #2]
 80031ce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80031d0:	78fb      	ldrb	r3, [r7, #3]
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	212c      	movs	r1, #44	; 0x2c
 80031d6:	fb01 f303 	mul.w	r3, r1, r3
 80031da:	4413      	add	r3, r2
 80031dc:	333f      	adds	r3, #63	; 0x3f
 80031de:	787a      	ldrb	r2, [r7, #1]
 80031e0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80031e2:	7c3b      	ldrb	r3, [r7, #16]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d112      	bne.n	800320e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80031e8:	78fb      	ldrb	r3, [r7, #3]
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	212c      	movs	r1, #44	; 0x2c
 80031ee:	fb01 f303 	mul.w	r3, r1, r3
 80031f2:	4413      	add	r3, r2
 80031f4:	3342      	adds	r3, #66	; 0x42
 80031f6:	2203      	movs	r2, #3
 80031f8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80031fa:	78fb      	ldrb	r3, [r7, #3]
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	212c      	movs	r1, #44	; 0x2c
 8003200:	fb01 f303 	mul.w	r3, r1, r3
 8003204:	4413      	add	r3, r2
 8003206:	333d      	adds	r3, #61	; 0x3d
 8003208:	7f3a      	ldrb	r2, [r7, #28]
 800320a:	701a      	strb	r2, [r3, #0]
 800320c:	e008      	b.n	8003220 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800320e:	78fb      	ldrb	r3, [r7, #3]
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	212c      	movs	r1, #44	; 0x2c
 8003214:	fb01 f303 	mul.w	r3, r1, r3
 8003218:	4413      	add	r3, r2
 800321a:	3342      	adds	r3, #66	; 0x42
 800321c:	2202      	movs	r2, #2
 800321e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003220:	787b      	ldrb	r3, [r7, #1]
 8003222:	2b03      	cmp	r3, #3
 8003224:	f200 80c6 	bhi.w	80033b4 <HAL_HCD_HC_SubmitRequest+0x210>
 8003228:	a201      	add	r2, pc, #4	; (adr r2, 8003230 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800322a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800322e:	bf00      	nop
 8003230:	08003241 	.word	0x08003241
 8003234:	080033a1 	.word	0x080033a1
 8003238:	080032a5 	.word	0x080032a5
 800323c:	08003323 	.word	0x08003323
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8003240:	7c3b      	ldrb	r3, [r7, #16]
 8003242:	2b01      	cmp	r3, #1
 8003244:	f040 80b8 	bne.w	80033b8 <HAL_HCD_HC_SubmitRequest+0x214>
 8003248:	78bb      	ldrb	r3, [r7, #2]
 800324a:	2b00      	cmp	r3, #0
 800324c:	f040 80b4 	bne.w	80033b8 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8003250:	8b3b      	ldrh	r3, [r7, #24]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d108      	bne.n	8003268 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8003256:	78fb      	ldrb	r3, [r7, #3]
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	212c      	movs	r1, #44	; 0x2c
 800325c:	fb01 f303 	mul.w	r3, r1, r3
 8003260:	4413      	add	r3, r2
 8003262:	3355      	adds	r3, #85	; 0x55
 8003264:	2201      	movs	r2, #1
 8003266:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003268:	78fb      	ldrb	r3, [r7, #3]
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	212c      	movs	r1, #44	; 0x2c
 800326e:	fb01 f303 	mul.w	r3, r1, r3
 8003272:	4413      	add	r3, r2
 8003274:	3355      	adds	r3, #85	; 0x55
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d109      	bne.n	8003290 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800327c:	78fb      	ldrb	r3, [r7, #3]
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	212c      	movs	r1, #44	; 0x2c
 8003282:	fb01 f303 	mul.w	r3, r1, r3
 8003286:	4413      	add	r3, r2
 8003288:	3342      	adds	r3, #66	; 0x42
 800328a:	2200      	movs	r2, #0
 800328c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800328e:	e093      	b.n	80033b8 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003290:	78fb      	ldrb	r3, [r7, #3]
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	212c      	movs	r1, #44	; 0x2c
 8003296:	fb01 f303 	mul.w	r3, r1, r3
 800329a:	4413      	add	r3, r2
 800329c:	3342      	adds	r3, #66	; 0x42
 800329e:	2202      	movs	r2, #2
 80032a0:	701a      	strb	r2, [r3, #0]
      break;
 80032a2:	e089      	b.n	80033b8 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80032a4:	78bb      	ldrb	r3, [r7, #2]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d11d      	bne.n	80032e6 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80032aa:	78fb      	ldrb	r3, [r7, #3]
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	212c      	movs	r1, #44	; 0x2c
 80032b0:	fb01 f303 	mul.w	r3, r1, r3
 80032b4:	4413      	add	r3, r2
 80032b6:	3355      	adds	r3, #85	; 0x55
 80032b8:	781b      	ldrb	r3, [r3, #0]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d109      	bne.n	80032d2 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80032be:	78fb      	ldrb	r3, [r7, #3]
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	212c      	movs	r1, #44	; 0x2c
 80032c4:	fb01 f303 	mul.w	r3, r1, r3
 80032c8:	4413      	add	r3, r2
 80032ca:	3342      	adds	r3, #66	; 0x42
 80032cc:	2200      	movs	r2, #0
 80032ce:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80032d0:	e073      	b.n	80033ba <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80032d2:	78fb      	ldrb	r3, [r7, #3]
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	212c      	movs	r1, #44	; 0x2c
 80032d8:	fb01 f303 	mul.w	r3, r1, r3
 80032dc:	4413      	add	r3, r2
 80032de:	3342      	adds	r3, #66	; 0x42
 80032e0:	2202      	movs	r2, #2
 80032e2:	701a      	strb	r2, [r3, #0]
      break;
 80032e4:	e069      	b.n	80033ba <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80032e6:	78fb      	ldrb	r3, [r7, #3]
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	212c      	movs	r1, #44	; 0x2c
 80032ec:	fb01 f303 	mul.w	r3, r1, r3
 80032f0:	4413      	add	r3, r2
 80032f2:	3354      	adds	r3, #84	; 0x54
 80032f4:	781b      	ldrb	r3, [r3, #0]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d109      	bne.n	800330e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80032fa:	78fb      	ldrb	r3, [r7, #3]
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	212c      	movs	r1, #44	; 0x2c
 8003300:	fb01 f303 	mul.w	r3, r1, r3
 8003304:	4413      	add	r3, r2
 8003306:	3342      	adds	r3, #66	; 0x42
 8003308:	2200      	movs	r2, #0
 800330a:	701a      	strb	r2, [r3, #0]
      break;
 800330c:	e055      	b.n	80033ba <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800330e:	78fb      	ldrb	r3, [r7, #3]
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	212c      	movs	r1, #44	; 0x2c
 8003314:	fb01 f303 	mul.w	r3, r1, r3
 8003318:	4413      	add	r3, r2
 800331a:	3342      	adds	r3, #66	; 0x42
 800331c:	2202      	movs	r2, #2
 800331e:	701a      	strb	r2, [r3, #0]
      break;
 8003320:	e04b      	b.n	80033ba <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003322:	78bb      	ldrb	r3, [r7, #2]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d11d      	bne.n	8003364 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003328:	78fb      	ldrb	r3, [r7, #3]
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	212c      	movs	r1, #44	; 0x2c
 800332e:	fb01 f303 	mul.w	r3, r1, r3
 8003332:	4413      	add	r3, r2
 8003334:	3355      	adds	r3, #85	; 0x55
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d109      	bne.n	8003350 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800333c:	78fb      	ldrb	r3, [r7, #3]
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	212c      	movs	r1, #44	; 0x2c
 8003342:	fb01 f303 	mul.w	r3, r1, r3
 8003346:	4413      	add	r3, r2
 8003348:	3342      	adds	r3, #66	; 0x42
 800334a:	2200      	movs	r2, #0
 800334c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800334e:	e034      	b.n	80033ba <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003350:	78fb      	ldrb	r3, [r7, #3]
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	212c      	movs	r1, #44	; 0x2c
 8003356:	fb01 f303 	mul.w	r3, r1, r3
 800335a:	4413      	add	r3, r2
 800335c:	3342      	adds	r3, #66	; 0x42
 800335e:	2202      	movs	r2, #2
 8003360:	701a      	strb	r2, [r3, #0]
      break;
 8003362:	e02a      	b.n	80033ba <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003364:	78fb      	ldrb	r3, [r7, #3]
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	212c      	movs	r1, #44	; 0x2c
 800336a:	fb01 f303 	mul.w	r3, r1, r3
 800336e:	4413      	add	r3, r2
 8003370:	3354      	adds	r3, #84	; 0x54
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d109      	bne.n	800338c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003378:	78fb      	ldrb	r3, [r7, #3]
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	212c      	movs	r1, #44	; 0x2c
 800337e:	fb01 f303 	mul.w	r3, r1, r3
 8003382:	4413      	add	r3, r2
 8003384:	3342      	adds	r3, #66	; 0x42
 8003386:	2200      	movs	r2, #0
 8003388:	701a      	strb	r2, [r3, #0]
      break;
 800338a:	e016      	b.n	80033ba <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800338c:	78fb      	ldrb	r3, [r7, #3]
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	212c      	movs	r1, #44	; 0x2c
 8003392:	fb01 f303 	mul.w	r3, r1, r3
 8003396:	4413      	add	r3, r2
 8003398:	3342      	adds	r3, #66	; 0x42
 800339a:	2202      	movs	r2, #2
 800339c:	701a      	strb	r2, [r3, #0]
      break;
 800339e:	e00c      	b.n	80033ba <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80033a0:	78fb      	ldrb	r3, [r7, #3]
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	212c      	movs	r1, #44	; 0x2c
 80033a6:	fb01 f303 	mul.w	r3, r1, r3
 80033aa:	4413      	add	r3, r2
 80033ac:	3342      	adds	r3, #66	; 0x42
 80033ae:	2200      	movs	r2, #0
 80033b0:	701a      	strb	r2, [r3, #0]
      break;
 80033b2:	e002      	b.n	80033ba <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80033b4:	bf00      	nop
 80033b6:	e000      	b.n	80033ba <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80033b8:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80033ba:	78fb      	ldrb	r3, [r7, #3]
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	212c      	movs	r1, #44	; 0x2c
 80033c0:	fb01 f303 	mul.w	r3, r1, r3
 80033c4:	4413      	add	r3, r2
 80033c6:	3344      	adds	r3, #68	; 0x44
 80033c8:	697a      	ldr	r2, [r7, #20]
 80033ca:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80033cc:	78fb      	ldrb	r3, [r7, #3]
 80033ce:	8b3a      	ldrh	r2, [r7, #24]
 80033d0:	6879      	ldr	r1, [r7, #4]
 80033d2:	202c      	movs	r0, #44	; 0x2c
 80033d4:	fb00 f303 	mul.w	r3, r0, r3
 80033d8:	440b      	add	r3, r1
 80033da:	334c      	adds	r3, #76	; 0x4c
 80033dc:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80033de:	78fb      	ldrb	r3, [r7, #3]
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	212c      	movs	r1, #44	; 0x2c
 80033e4:	fb01 f303 	mul.w	r3, r1, r3
 80033e8:	4413      	add	r3, r2
 80033ea:	3360      	adds	r3, #96	; 0x60
 80033ec:	2200      	movs	r2, #0
 80033ee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80033f0:	78fb      	ldrb	r3, [r7, #3]
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	212c      	movs	r1, #44	; 0x2c
 80033f6:	fb01 f303 	mul.w	r3, r1, r3
 80033fa:	4413      	add	r3, r2
 80033fc:	3350      	adds	r3, #80	; 0x50
 80033fe:	2200      	movs	r2, #0
 8003400:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003402:	78fb      	ldrb	r3, [r7, #3]
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	212c      	movs	r1, #44	; 0x2c
 8003408:	fb01 f303 	mul.w	r3, r1, r3
 800340c:	4413      	add	r3, r2
 800340e:	3339      	adds	r3, #57	; 0x39
 8003410:	78fa      	ldrb	r2, [r7, #3]
 8003412:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003414:	78fb      	ldrb	r3, [r7, #3]
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	212c      	movs	r1, #44	; 0x2c
 800341a:	fb01 f303 	mul.w	r3, r1, r3
 800341e:	4413      	add	r3, r2
 8003420:	3361      	adds	r3, #97	; 0x61
 8003422:	2200      	movs	r2, #0
 8003424:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6818      	ldr	r0, [r3, #0]
 800342a:	78fb      	ldrb	r3, [r7, #3]
 800342c:	222c      	movs	r2, #44	; 0x2c
 800342e:	fb02 f303 	mul.w	r3, r2, r3
 8003432:	3338      	adds	r3, #56	; 0x38
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	18d1      	adds	r1, r2, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	691b      	ldr	r3, [r3, #16]
 800343c:	b2db      	uxtb	r3, r3
 800343e:	461a      	mov	r2, r3
 8003440:	f004 f882 	bl	8007548 <USB_HC_StartXfer>
 8003444:	4603      	mov	r3, r0
}
 8003446:	4618      	mov	r0, r3
 8003448:	3708      	adds	r7, #8
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop

08003450 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b086      	sub	sp, #24
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4618      	mov	r0, r3
 8003468:	f003 fd83 	bl	8006f72 <USB_GetMode>
 800346c:	4603      	mov	r3, r0
 800346e:	2b01      	cmp	r3, #1
 8003470:	f040 80f6 	bne.w	8003660 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4618      	mov	r0, r3
 800347a:	f003 fd67 	bl	8006f4c <USB_ReadInterrupts>
 800347e:	4603      	mov	r3, r0
 8003480:	2b00      	cmp	r3, #0
 8003482:	f000 80ec 	beq.w	800365e <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4618      	mov	r0, r3
 800348c:	f003 fd5e 	bl	8006f4c <USB_ReadInterrupts>
 8003490:	4603      	mov	r3, r0
 8003492:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003496:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800349a:	d104      	bne.n	80034a6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80034a4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4618      	mov	r0, r3
 80034ac:	f003 fd4e 	bl	8006f4c <USB_ReadInterrupts>
 80034b0:	4603      	mov	r3, r0
 80034b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034ba:	d104      	bne.n	80034c6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80034c4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4618      	mov	r0, r3
 80034cc:	f003 fd3e 	bl	8006f4c <USB_ReadInterrupts>
 80034d0:	4603      	mov	r3, r0
 80034d2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80034d6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80034da:	d104      	bne.n	80034e6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80034e4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4618      	mov	r0, r3
 80034ec:	f003 fd2e 	bl	8006f4c <USB_ReadInterrupts>
 80034f0:	4603      	mov	r3, r0
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d103      	bne.n	8003502 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	2202      	movs	r2, #2
 8003500:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4618      	mov	r0, r3
 8003508:	f003 fd20 	bl	8006f4c <USB_ReadInterrupts>
 800350c:	4603      	mov	r3, r0
 800350e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003512:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003516:	d11c      	bne.n	8003552 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003520:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0301 	and.w	r3, r3, #1
 800352e:	2b00      	cmp	r3, #0
 8003530:	d10f      	bne.n	8003552 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003532:	2110      	movs	r1, #16
 8003534:	6938      	ldr	r0, [r7, #16]
 8003536:	f003 fc0f 	bl	8006d58 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800353a:	6938      	ldr	r0, [r7, #16]
 800353c:	f003 fc40 	bl	8006dc0 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2101      	movs	r1, #1
 8003546:	4618      	mov	r0, r3
 8003548:	f003 fe16 	bl	8007178 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f006 fbe3 	bl	8009d18 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4618      	mov	r0, r3
 8003558:	f003 fcf8 	bl	8006f4c <USB_ReadInterrupts>
 800355c:	4603      	mov	r3, r0
 800355e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003562:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003566:	d102      	bne.n	800356e <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f001 f89e 	bl	80046aa <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4618      	mov	r0, r3
 8003574:	f003 fcea 	bl	8006f4c <USB_ReadInterrupts>
 8003578:	4603      	mov	r3, r0
 800357a:	f003 0308 	and.w	r3, r3, #8
 800357e:	2b08      	cmp	r3, #8
 8003580:	d106      	bne.n	8003590 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f006 fbac 	bl	8009ce0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	2208      	movs	r2, #8
 800358e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4618      	mov	r0, r3
 8003596:	f003 fcd9 	bl	8006f4c <USB_ReadInterrupts>
 800359a:	4603      	mov	r3, r0
 800359c:	f003 0310 	and.w	r3, r3, #16
 80035a0:	2b10      	cmp	r3, #16
 80035a2:	d101      	bne.n	80035a8 <HAL_HCD_IRQHandler+0x158>
 80035a4:	2301      	movs	r3, #1
 80035a6:	e000      	b.n	80035aa <HAL_HCD_IRQHandler+0x15a>
 80035a8:	2300      	movs	r3, #0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d012      	beq.n	80035d4 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	699a      	ldr	r2, [r3, #24]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f022 0210 	bic.w	r2, r2, #16
 80035bc:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 ffa1 	bl	8004506 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	699a      	ldr	r2, [r3, #24]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f042 0210 	orr.w	r2, r2, #16
 80035d2:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4618      	mov	r0, r3
 80035da:	f003 fcb7 	bl	8006f4c <USB_ReadInterrupts>
 80035de:	4603      	mov	r3, r0
 80035e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80035e8:	d13a      	bne.n	8003660 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4618      	mov	r0, r3
 80035f0:	f004 f8ec 	bl	80077cc <USB_HC_ReadInterrupt>
 80035f4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80035f6:	2300      	movs	r3, #0
 80035f8:	617b      	str	r3, [r7, #20]
 80035fa:	e025      	b.n	8003648 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	f003 030f 	and.w	r3, r3, #15
 8003602:	68ba      	ldr	r2, [r7, #8]
 8003604:	fa22 f303 	lsr.w	r3, r2, r3
 8003608:	f003 0301 	and.w	r3, r3, #1
 800360c:	2b00      	cmp	r3, #0
 800360e:	d018      	beq.n	8003642 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	015a      	lsls	r2, r3, #5
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	4413      	add	r3, r2
 8003618:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003622:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003626:	d106      	bne.n	8003636 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	b2db      	uxtb	r3, r3
 800362c:	4619      	mov	r1, r3
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f000 f8ab 	bl	800378a <HCD_HC_IN_IRQHandler>
 8003634:	e005      	b.n	8003642 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	b2db      	uxtb	r3, r3
 800363a:	4619      	mov	r1, r3
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f000 fbf9 	bl	8003e34 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	3301      	adds	r3, #1
 8003646:	617b      	str	r3, [r7, #20]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	697a      	ldr	r2, [r7, #20]
 800364e:	429a      	cmp	r2, r3
 8003650:	d3d4      	bcc.n	80035fc <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800365a:	615a      	str	r2, [r3, #20]
 800365c:	e000      	b.n	8003660 <HAL_HCD_IRQHandler+0x210>
      return;
 800365e:	bf00      	nop
    }
  }
}
 8003660:	3718      	adds	r7, #24
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}

08003666 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003666:	b580      	push	{r7, lr}
 8003668:	b082      	sub	sp, #8
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003674:	2b01      	cmp	r3, #1
 8003676:	d101      	bne.n	800367c <HAL_HCD_Start+0x16>
 8003678:	2302      	movs	r3, #2
 800367a:	e013      	b.n	80036a4 <HAL_HCD_Start+0x3e>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2101      	movs	r1, #1
 800368a:	4618      	mov	r0, r3
 800368c:	f003 fdd8 	bl	8007240 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4618      	mov	r0, r3
 8003696:	f003 faf0 	bl	8006c7a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80036a2:	2300      	movs	r3, #0
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3708      	adds	r7, #8
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}

080036ac <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b082      	sub	sp, #8
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d101      	bne.n	80036c2 <HAL_HCD_Stop+0x16>
 80036be:	2302      	movs	r3, #2
 80036c0:	e00d      	b.n	80036de <HAL_HCD_Stop+0x32>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2201      	movs	r2, #1
 80036c6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4618      	mov	r0, r3
 80036d0:	f004 f9c6 	bl	8007a60 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80036dc:	2300      	movs	r3, #0
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3708      	adds	r7, #8
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}

080036e6 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80036e6:	b580      	push	{r7, lr}
 80036e8:	b082      	sub	sp, #8
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4618      	mov	r0, r3
 80036f4:	f003 fd7a 	bl	80071ec <USB_ResetPort>
 80036f8:	4603      	mov	r3, r0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3708      	adds	r7, #8
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}

08003702 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003702:	b480      	push	{r7}
 8003704:	b083      	sub	sp, #12
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
 800370a:	460b      	mov	r3, r1
 800370c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800370e:	78fb      	ldrb	r3, [r7, #3]
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	212c      	movs	r1, #44	; 0x2c
 8003714:	fb01 f303 	mul.w	r3, r1, r3
 8003718:	4413      	add	r3, r2
 800371a:	3360      	adds	r3, #96	; 0x60
 800371c:	781b      	ldrb	r3, [r3, #0]
}
 800371e:	4618      	mov	r0, r3
 8003720:	370c      	adds	r7, #12
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr

0800372a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800372a:	b480      	push	{r7}
 800372c:	b083      	sub	sp, #12
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]
 8003732:	460b      	mov	r3, r1
 8003734:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003736:	78fb      	ldrb	r3, [r7, #3]
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	212c      	movs	r1, #44	; 0x2c
 800373c:	fb01 f303 	mul.w	r3, r1, r3
 8003740:	4413      	add	r3, r2
 8003742:	3350      	adds	r3, #80	; 0x50
 8003744:	681b      	ldr	r3, [r3, #0]
}
 8003746:	4618      	mov	r0, r3
 8003748:	370c      	adds	r7, #12
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr

08003752 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003752:	b580      	push	{r7, lr}
 8003754:	b082      	sub	sp, #8
 8003756:	af00      	add	r7, sp, #0
 8003758:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4618      	mov	r0, r3
 8003760:	f003 fdbe 	bl	80072e0 <USB_GetCurrentFrame>
 8003764:	4603      	mov	r3, r0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3708      	adds	r7, #8
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}

0800376e <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800376e:	b580      	push	{r7, lr}
 8003770:	b082      	sub	sp, #8
 8003772:	af00      	add	r7, sp, #0
 8003774:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4618      	mov	r0, r3
 800377c:	f003 fd99 	bl	80072b2 <USB_GetHostSpeed>
 8003780:	4603      	mov	r3, r0
}
 8003782:	4618      	mov	r0, r3
 8003784:	3708      	adds	r7, #8
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}

0800378a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800378a:	b580      	push	{r7, lr}
 800378c:	b086      	sub	sp, #24
 800378e:	af00      	add	r7, sp, #0
 8003790:	6078      	str	r0, [r7, #4]
 8003792:	460b      	mov	r3, r1
 8003794:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80037a0:	78fb      	ldrb	r3, [r7, #3]
 80037a2:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	015a      	lsls	r2, r3, #5
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	4413      	add	r3, r2
 80037ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	f003 0304 	and.w	r3, r3, #4
 80037b6:	2b04      	cmp	r3, #4
 80037b8:	d11a      	bne.n	80037f0 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	015a      	lsls	r2, r3, #5
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	4413      	add	r3, r2
 80037c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037c6:	461a      	mov	r2, r3
 80037c8:	2304      	movs	r3, #4
 80037ca:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	212c      	movs	r1, #44	; 0x2c
 80037d2:	fb01 f303 	mul.w	r3, r1, r3
 80037d6:	4413      	add	r3, r2
 80037d8:	3361      	adds	r3, #97	; 0x61
 80037da:	2206      	movs	r2, #6
 80037dc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	68fa      	ldr	r2, [r7, #12]
 80037e4:	b2d2      	uxtb	r2, r2
 80037e6:	4611      	mov	r1, r2
 80037e8:	4618      	mov	r0, r3
 80037ea:	f004 f800 	bl	80077ee <USB_HC_Halt>
 80037ee:	e0af      	b.n	8003950 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	015a      	lsls	r2, r3, #5
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	4413      	add	r3, r2
 80037f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003802:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003806:	d11b      	bne.n	8003840 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	015a      	lsls	r2, r3, #5
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	4413      	add	r3, r2
 8003810:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003814:	461a      	mov	r2, r3
 8003816:	f44f 7380 	mov.w	r3, #256	; 0x100
 800381a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	212c      	movs	r1, #44	; 0x2c
 8003822:	fb01 f303 	mul.w	r3, r1, r3
 8003826:	4413      	add	r3, r2
 8003828:	3361      	adds	r3, #97	; 0x61
 800382a:	2207      	movs	r2, #7
 800382c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	68fa      	ldr	r2, [r7, #12]
 8003834:	b2d2      	uxtb	r2, r2
 8003836:	4611      	mov	r1, r2
 8003838:	4618      	mov	r0, r3
 800383a:	f003 ffd8 	bl	80077ee <USB_HC_Halt>
 800383e:	e087      	b.n	8003950 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	015a      	lsls	r2, r3, #5
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	4413      	add	r3, r2
 8003848:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	f003 0320 	and.w	r3, r3, #32
 8003852:	2b20      	cmp	r3, #32
 8003854:	d109      	bne.n	800386a <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	015a      	lsls	r2, r3, #5
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	4413      	add	r3, r2
 800385e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003862:	461a      	mov	r2, r3
 8003864:	2320      	movs	r3, #32
 8003866:	6093      	str	r3, [r2, #8]
 8003868:	e072      	b.n	8003950 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	015a      	lsls	r2, r3, #5
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	4413      	add	r3, r2
 8003872:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	f003 0308 	and.w	r3, r3, #8
 800387c:	2b08      	cmp	r3, #8
 800387e:	d11a      	bne.n	80038b6 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	015a      	lsls	r2, r3, #5
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	4413      	add	r3, r2
 8003888:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800388c:	461a      	mov	r2, r3
 800388e:	2308      	movs	r3, #8
 8003890:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	212c      	movs	r1, #44	; 0x2c
 8003898:	fb01 f303 	mul.w	r3, r1, r3
 800389c:	4413      	add	r3, r2
 800389e:	3361      	adds	r3, #97	; 0x61
 80038a0:	2205      	movs	r2, #5
 80038a2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	68fa      	ldr	r2, [r7, #12]
 80038aa:	b2d2      	uxtb	r2, r2
 80038ac:	4611      	mov	r1, r2
 80038ae:	4618      	mov	r0, r3
 80038b0:	f003 ff9d 	bl	80077ee <USB_HC_Halt>
 80038b4:	e04c      	b.n	8003950 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	015a      	lsls	r2, r3, #5
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	4413      	add	r3, r2
 80038be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038cc:	d11b      	bne.n	8003906 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	015a      	lsls	r2, r3, #5
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	4413      	add	r3, r2
 80038d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038da:	461a      	mov	r2, r3
 80038dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80038e0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	212c      	movs	r1, #44	; 0x2c
 80038e8:	fb01 f303 	mul.w	r3, r1, r3
 80038ec:	4413      	add	r3, r2
 80038ee:	3361      	adds	r3, #97	; 0x61
 80038f0:	2208      	movs	r2, #8
 80038f2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	68fa      	ldr	r2, [r7, #12]
 80038fa:	b2d2      	uxtb	r2, r2
 80038fc:	4611      	mov	r1, r2
 80038fe:	4618      	mov	r0, r3
 8003900:	f003 ff75 	bl	80077ee <USB_HC_Halt>
 8003904:	e024      	b.n	8003950 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	015a      	lsls	r2, r3, #5
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	4413      	add	r3, r2
 800390e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003918:	2b80      	cmp	r3, #128	; 0x80
 800391a:	d119      	bne.n	8003950 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	015a      	lsls	r2, r3, #5
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	4413      	add	r3, r2
 8003924:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003928:	461a      	mov	r2, r3
 800392a:	2380      	movs	r3, #128	; 0x80
 800392c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	212c      	movs	r1, #44	; 0x2c
 8003934:	fb01 f303 	mul.w	r3, r1, r3
 8003938:	4413      	add	r3, r2
 800393a:	3361      	adds	r3, #97	; 0x61
 800393c:	2206      	movs	r2, #6
 800393e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	68fa      	ldr	r2, [r7, #12]
 8003946:	b2d2      	uxtb	r2, r2
 8003948:	4611      	mov	r1, r2
 800394a:	4618      	mov	r0, r3
 800394c:	f003 ff4f 	bl	80077ee <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	015a      	lsls	r2, r3, #5
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	4413      	add	r3, r2
 8003958:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003962:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003966:	d112      	bne.n	800398e <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	68fa      	ldr	r2, [r7, #12]
 800396e:	b2d2      	uxtb	r2, r2
 8003970:	4611      	mov	r1, r2
 8003972:	4618      	mov	r0, r3
 8003974:	f003 ff3b 	bl	80077ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	015a      	lsls	r2, r3, #5
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	4413      	add	r3, r2
 8003980:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003984:	461a      	mov	r2, r3
 8003986:	f44f 7300 	mov.w	r3, #512	; 0x200
 800398a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800398c:	e24e      	b.n	8003e2c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	015a      	lsls	r2, r3, #5
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	4413      	add	r3, r2
 8003996:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	f003 0301 	and.w	r3, r3, #1
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	f040 80df 	bne.w	8003b64 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	691b      	ldr	r3, [r3, #16]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d019      	beq.n	80039e2 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	212c      	movs	r1, #44	; 0x2c
 80039b4:	fb01 f303 	mul.w	r3, r1, r3
 80039b8:	4413      	add	r3, r2
 80039ba:	3348      	adds	r3, #72	; 0x48
 80039bc:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	0159      	lsls	r1, r3, #5
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	440b      	add	r3, r1
 80039c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039ca:	691b      	ldr	r3, [r3, #16]
 80039cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80039d0:	1ad2      	subs	r2, r2, r3
 80039d2:	6879      	ldr	r1, [r7, #4]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	202c      	movs	r0, #44	; 0x2c
 80039d8:	fb00 f303 	mul.w	r3, r0, r3
 80039dc:	440b      	add	r3, r1
 80039de:	3350      	adds	r3, #80	; 0x50
 80039e0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	212c      	movs	r1, #44	; 0x2c
 80039e8:	fb01 f303 	mul.w	r3, r1, r3
 80039ec:	4413      	add	r3, r2
 80039ee:	3361      	adds	r3, #97	; 0x61
 80039f0:	2201      	movs	r2, #1
 80039f2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	212c      	movs	r1, #44	; 0x2c
 80039fa:	fb01 f303 	mul.w	r3, r1, r3
 80039fe:	4413      	add	r3, r2
 8003a00:	335c      	adds	r3, #92	; 0x5c
 8003a02:	2200      	movs	r2, #0
 8003a04:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	015a      	lsls	r2, r3, #5
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	4413      	add	r3, r2
 8003a0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a12:	461a      	mov	r2, r3
 8003a14:	2301      	movs	r3, #1
 8003a16:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	212c      	movs	r1, #44	; 0x2c
 8003a1e:	fb01 f303 	mul.w	r3, r1, r3
 8003a22:	4413      	add	r3, r2
 8003a24:	333f      	adds	r3, #63	; 0x3f
 8003a26:	781b      	ldrb	r3, [r3, #0]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d009      	beq.n	8003a40 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	212c      	movs	r1, #44	; 0x2c
 8003a32:	fb01 f303 	mul.w	r3, r1, r3
 8003a36:	4413      	add	r3, r2
 8003a38:	333f      	adds	r3, #63	; 0x3f
 8003a3a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d111      	bne.n	8003a64 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	68fa      	ldr	r2, [r7, #12]
 8003a46:	b2d2      	uxtb	r2, r2
 8003a48:	4611      	mov	r1, r2
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f003 fecf 	bl	80077ee <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	015a      	lsls	r2, r3, #5
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	4413      	add	r3, r2
 8003a58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	2310      	movs	r3, #16
 8003a60:	6093      	str	r3, [r2, #8]
 8003a62:	e03a      	b.n	8003ada <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	212c      	movs	r1, #44	; 0x2c
 8003a6a:	fb01 f303 	mul.w	r3, r1, r3
 8003a6e:	4413      	add	r3, r2
 8003a70:	333f      	adds	r3, #63	; 0x3f
 8003a72:	781b      	ldrb	r3, [r3, #0]
 8003a74:	2b03      	cmp	r3, #3
 8003a76:	d009      	beq.n	8003a8c <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	212c      	movs	r1, #44	; 0x2c
 8003a7e:	fb01 f303 	mul.w	r3, r1, r3
 8003a82:	4413      	add	r3, r2
 8003a84:	333f      	adds	r3, #63	; 0x3f
 8003a86:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d126      	bne.n	8003ada <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	015a      	lsls	r2, r3, #5
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	4413      	add	r3, r2
 8003a94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	68fa      	ldr	r2, [r7, #12]
 8003a9c:	0151      	lsls	r1, r2, #5
 8003a9e:	693a      	ldr	r2, [r7, #16]
 8003aa0:	440a      	add	r2, r1
 8003aa2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003aa6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003aaa:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	212c      	movs	r1, #44	; 0x2c
 8003ab2:	fb01 f303 	mul.w	r3, r1, r3
 8003ab6:	4413      	add	r3, r2
 8003ab8:	3360      	adds	r3, #96	; 0x60
 8003aba:	2201      	movs	r2, #1
 8003abc:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	b2d9      	uxtb	r1, r3
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	202c      	movs	r0, #44	; 0x2c
 8003ac8:	fb00 f303 	mul.w	r3, r0, r3
 8003acc:	4413      	add	r3, r2
 8003ace:	3360      	adds	r3, #96	; 0x60
 8003ad0:	781b      	ldrb	r3, [r3, #0]
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f006 f92d 	bl	8009d34 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	691b      	ldr	r3, [r3, #16]
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d12b      	bne.n	8003b3a <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	212c      	movs	r1, #44	; 0x2c
 8003ae8:	fb01 f303 	mul.w	r3, r1, r3
 8003aec:	4413      	add	r3, r2
 8003aee:	3348      	adds	r3, #72	; 0x48
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	6879      	ldr	r1, [r7, #4]
 8003af4:	68fa      	ldr	r2, [r7, #12]
 8003af6:	202c      	movs	r0, #44	; 0x2c
 8003af8:	fb00 f202 	mul.w	r2, r0, r2
 8003afc:	440a      	add	r2, r1
 8003afe:	3240      	adds	r2, #64	; 0x40
 8003b00:	8812      	ldrh	r2, [r2, #0]
 8003b02:	fbb3 f3f2 	udiv	r3, r3, r2
 8003b06:	f003 0301 	and.w	r3, r3, #1
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	f000 818e 	beq.w	8003e2c <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	212c      	movs	r1, #44	; 0x2c
 8003b16:	fb01 f303 	mul.w	r3, r1, r3
 8003b1a:	4413      	add	r3, r2
 8003b1c:	3354      	adds	r3, #84	; 0x54
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	f083 0301 	eor.w	r3, r3, #1
 8003b24:	b2d8      	uxtb	r0, r3
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	212c      	movs	r1, #44	; 0x2c
 8003b2c:	fb01 f303 	mul.w	r3, r1, r3
 8003b30:	4413      	add	r3, r2
 8003b32:	3354      	adds	r3, #84	; 0x54
 8003b34:	4602      	mov	r2, r0
 8003b36:	701a      	strb	r2, [r3, #0]
}
 8003b38:	e178      	b.n	8003e2c <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	212c      	movs	r1, #44	; 0x2c
 8003b40:	fb01 f303 	mul.w	r3, r1, r3
 8003b44:	4413      	add	r3, r2
 8003b46:	3354      	adds	r3, #84	; 0x54
 8003b48:	781b      	ldrb	r3, [r3, #0]
 8003b4a:	f083 0301 	eor.w	r3, r3, #1
 8003b4e:	b2d8      	uxtb	r0, r3
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	212c      	movs	r1, #44	; 0x2c
 8003b56:	fb01 f303 	mul.w	r3, r1, r3
 8003b5a:	4413      	add	r3, r2
 8003b5c:	3354      	adds	r3, #84	; 0x54
 8003b5e:	4602      	mov	r2, r0
 8003b60:	701a      	strb	r2, [r3, #0]
}
 8003b62:	e163      	b.n	8003e2c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	015a      	lsls	r2, r3, #5
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	4413      	add	r3, r2
 8003b6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f003 0302 	and.w	r3, r3, #2
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	f040 80f6 	bne.w	8003d68 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003b7c:	687a      	ldr	r2, [r7, #4]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	212c      	movs	r1, #44	; 0x2c
 8003b82:	fb01 f303 	mul.w	r3, r1, r3
 8003b86:	4413      	add	r3, r2
 8003b88:	3361      	adds	r3, #97	; 0x61
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d109      	bne.n	8003ba4 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	212c      	movs	r1, #44	; 0x2c
 8003b96:	fb01 f303 	mul.w	r3, r1, r3
 8003b9a:	4413      	add	r3, r2
 8003b9c:	3360      	adds	r3, #96	; 0x60
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	701a      	strb	r2, [r3, #0]
 8003ba2:	e0c9      	b.n	8003d38 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	212c      	movs	r1, #44	; 0x2c
 8003baa:	fb01 f303 	mul.w	r3, r1, r3
 8003bae:	4413      	add	r3, r2
 8003bb0:	3361      	adds	r3, #97	; 0x61
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	2b05      	cmp	r3, #5
 8003bb6:	d109      	bne.n	8003bcc <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	212c      	movs	r1, #44	; 0x2c
 8003bbe:	fb01 f303 	mul.w	r3, r1, r3
 8003bc2:	4413      	add	r3, r2
 8003bc4:	3360      	adds	r3, #96	; 0x60
 8003bc6:	2205      	movs	r2, #5
 8003bc8:	701a      	strb	r2, [r3, #0]
 8003bca:	e0b5      	b.n	8003d38 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003bcc:	687a      	ldr	r2, [r7, #4]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	212c      	movs	r1, #44	; 0x2c
 8003bd2:	fb01 f303 	mul.w	r3, r1, r3
 8003bd6:	4413      	add	r3, r2
 8003bd8:	3361      	adds	r3, #97	; 0x61
 8003bda:	781b      	ldrb	r3, [r3, #0]
 8003bdc:	2b06      	cmp	r3, #6
 8003bde:	d009      	beq.n	8003bf4 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	212c      	movs	r1, #44	; 0x2c
 8003be6:	fb01 f303 	mul.w	r3, r1, r3
 8003bea:	4413      	add	r3, r2
 8003bec:	3361      	adds	r3, #97	; 0x61
 8003bee:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003bf0:	2b08      	cmp	r3, #8
 8003bf2:	d150      	bne.n	8003c96 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	212c      	movs	r1, #44	; 0x2c
 8003bfa:	fb01 f303 	mul.w	r3, r1, r3
 8003bfe:	4413      	add	r3, r2
 8003c00:	335c      	adds	r3, #92	; 0x5c
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	1c5a      	adds	r2, r3, #1
 8003c06:	6879      	ldr	r1, [r7, #4]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	202c      	movs	r0, #44	; 0x2c
 8003c0c:	fb00 f303 	mul.w	r3, r0, r3
 8003c10:	440b      	add	r3, r1
 8003c12:	335c      	adds	r3, #92	; 0x5c
 8003c14:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	212c      	movs	r1, #44	; 0x2c
 8003c1c:	fb01 f303 	mul.w	r3, r1, r3
 8003c20:	4413      	add	r3, r2
 8003c22:	335c      	adds	r3, #92	; 0x5c
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	2b02      	cmp	r3, #2
 8003c28:	d912      	bls.n	8003c50 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	212c      	movs	r1, #44	; 0x2c
 8003c30:	fb01 f303 	mul.w	r3, r1, r3
 8003c34:	4413      	add	r3, r2
 8003c36:	335c      	adds	r3, #92	; 0x5c
 8003c38:	2200      	movs	r2, #0
 8003c3a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	212c      	movs	r1, #44	; 0x2c
 8003c42:	fb01 f303 	mul.w	r3, r1, r3
 8003c46:	4413      	add	r3, r2
 8003c48:	3360      	adds	r3, #96	; 0x60
 8003c4a:	2204      	movs	r2, #4
 8003c4c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003c4e:	e073      	b.n	8003d38 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	212c      	movs	r1, #44	; 0x2c
 8003c56:	fb01 f303 	mul.w	r3, r1, r3
 8003c5a:	4413      	add	r3, r2
 8003c5c:	3360      	adds	r3, #96	; 0x60
 8003c5e:	2202      	movs	r2, #2
 8003c60:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	015a      	lsls	r2, r3, #5
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	4413      	add	r3, r2
 8003c6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003c78:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003c80:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	015a      	lsls	r2, r3, #5
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	4413      	add	r3, r2
 8003c8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c8e:	461a      	mov	r2, r3
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003c94:	e050      	b.n	8003d38 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	212c      	movs	r1, #44	; 0x2c
 8003c9c:	fb01 f303 	mul.w	r3, r1, r3
 8003ca0:	4413      	add	r3, r2
 8003ca2:	3361      	adds	r3, #97	; 0x61
 8003ca4:	781b      	ldrb	r3, [r3, #0]
 8003ca6:	2b03      	cmp	r3, #3
 8003ca8:	d122      	bne.n	8003cf0 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	212c      	movs	r1, #44	; 0x2c
 8003cb0:	fb01 f303 	mul.w	r3, r1, r3
 8003cb4:	4413      	add	r3, r2
 8003cb6:	3360      	adds	r3, #96	; 0x60
 8003cb8:	2202      	movs	r2, #2
 8003cba:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	015a      	lsls	r2, r3, #5
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	4413      	add	r3, r2
 8003cc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003cd2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003cda:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	015a      	lsls	r2, r3, #5
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	4413      	add	r3, r2
 8003ce4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ce8:	461a      	mov	r2, r3
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	6013      	str	r3, [r2, #0]
 8003cee:	e023      	b.n	8003d38 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	212c      	movs	r1, #44	; 0x2c
 8003cf6:	fb01 f303 	mul.w	r3, r1, r3
 8003cfa:	4413      	add	r3, r2
 8003cfc:	3361      	adds	r3, #97	; 0x61
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	2b07      	cmp	r3, #7
 8003d02:	d119      	bne.n	8003d38 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8003d04:	687a      	ldr	r2, [r7, #4]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	212c      	movs	r1, #44	; 0x2c
 8003d0a:	fb01 f303 	mul.w	r3, r1, r3
 8003d0e:	4413      	add	r3, r2
 8003d10:	335c      	adds	r3, #92	; 0x5c
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	1c5a      	adds	r2, r3, #1
 8003d16:	6879      	ldr	r1, [r7, #4]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	202c      	movs	r0, #44	; 0x2c
 8003d1c:	fb00 f303 	mul.w	r3, r0, r3
 8003d20:	440b      	add	r3, r1
 8003d22:	335c      	adds	r3, #92	; 0x5c
 8003d24:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	212c      	movs	r1, #44	; 0x2c
 8003d2c:	fb01 f303 	mul.w	r3, r1, r3
 8003d30:	4413      	add	r3, r2
 8003d32:	3360      	adds	r3, #96	; 0x60
 8003d34:	2204      	movs	r2, #4
 8003d36:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	015a      	lsls	r2, r3, #5
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	4413      	add	r3, r2
 8003d40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d44:	461a      	mov	r2, r3
 8003d46:	2302      	movs	r3, #2
 8003d48:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	b2d9      	uxtb	r1, r3
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	202c      	movs	r0, #44	; 0x2c
 8003d54:	fb00 f303 	mul.w	r3, r0, r3
 8003d58:	4413      	add	r3, r2
 8003d5a:	3360      	adds	r3, #96	; 0x60
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	461a      	mov	r2, r3
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f005 ffe7 	bl	8009d34 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003d66:	e061      	b.n	8003e2c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	015a      	lsls	r2, r3, #5
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	4413      	add	r3, r2
 8003d70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	f003 0310 	and.w	r3, r3, #16
 8003d7a:	2b10      	cmp	r3, #16
 8003d7c:	d156      	bne.n	8003e2c <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	212c      	movs	r1, #44	; 0x2c
 8003d84:	fb01 f303 	mul.w	r3, r1, r3
 8003d88:	4413      	add	r3, r2
 8003d8a:	333f      	adds	r3, #63	; 0x3f
 8003d8c:	781b      	ldrb	r3, [r3, #0]
 8003d8e:	2b03      	cmp	r3, #3
 8003d90:	d111      	bne.n	8003db6 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	212c      	movs	r1, #44	; 0x2c
 8003d98:	fb01 f303 	mul.w	r3, r1, r3
 8003d9c:	4413      	add	r3, r2
 8003d9e:	335c      	adds	r3, #92	; 0x5c
 8003da0:	2200      	movs	r2, #0
 8003da2:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	68fa      	ldr	r2, [r7, #12]
 8003daa:	b2d2      	uxtb	r2, r2
 8003dac:	4611      	mov	r1, r2
 8003dae:	4618      	mov	r0, r3
 8003db0:	f003 fd1d 	bl	80077ee <USB_HC_Halt>
 8003db4:	e031      	b.n	8003e1a <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	212c      	movs	r1, #44	; 0x2c
 8003dbc:	fb01 f303 	mul.w	r3, r1, r3
 8003dc0:	4413      	add	r3, r2
 8003dc2:	333f      	adds	r3, #63	; 0x3f
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d009      	beq.n	8003dde <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	212c      	movs	r1, #44	; 0x2c
 8003dd0:	fb01 f303 	mul.w	r3, r1, r3
 8003dd4:	4413      	add	r3, r2
 8003dd6:	333f      	adds	r3, #63	; 0x3f
 8003dd8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	d11d      	bne.n	8003e1a <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	212c      	movs	r1, #44	; 0x2c
 8003de4:	fb01 f303 	mul.w	r3, r1, r3
 8003de8:	4413      	add	r3, r2
 8003dea:	335c      	adds	r3, #92	; 0x5c
 8003dec:	2200      	movs	r2, #0
 8003dee:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	691b      	ldr	r3, [r3, #16]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d110      	bne.n	8003e1a <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	212c      	movs	r1, #44	; 0x2c
 8003dfe:	fb01 f303 	mul.w	r3, r1, r3
 8003e02:	4413      	add	r3, r2
 8003e04:	3361      	adds	r3, #97	; 0x61
 8003e06:	2203      	movs	r2, #3
 8003e08:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	68fa      	ldr	r2, [r7, #12]
 8003e10:	b2d2      	uxtb	r2, r2
 8003e12:	4611      	mov	r1, r2
 8003e14:	4618      	mov	r0, r3
 8003e16:	f003 fcea 	bl	80077ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	015a      	lsls	r2, r3, #5
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	4413      	add	r3, r2
 8003e22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e26:	461a      	mov	r2, r3
 8003e28:	2310      	movs	r3, #16
 8003e2a:	6093      	str	r3, [r2, #8]
}
 8003e2c:	bf00      	nop
 8003e2e:	3718      	adds	r7, #24
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b088      	sub	sp, #32
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	460b      	mov	r3, r1
 8003e3e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003e4a:	78fb      	ldrb	r3, [r7, #3]
 8003e4c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	015a      	lsls	r2, r3, #5
 8003e52:	69bb      	ldr	r3, [r7, #24]
 8003e54:	4413      	add	r3, r2
 8003e56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	f003 0304 	and.w	r3, r3, #4
 8003e60:	2b04      	cmp	r3, #4
 8003e62:	d11a      	bne.n	8003e9a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	015a      	lsls	r2, r3, #5
 8003e68:	69bb      	ldr	r3, [r7, #24]
 8003e6a:	4413      	add	r3, r2
 8003e6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e70:	461a      	mov	r2, r3
 8003e72:	2304      	movs	r3, #4
 8003e74:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	212c      	movs	r1, #44	; 0x2c
 8003e7c:	fb01 f303 	mul.w	r3, r1, r3
 8003e80:	4413      	add	r3, r2
 8003e82:	3361      	adds	r3, #97	; 0x61
 8003e84:	2206      	movs	r2, #6
 8003e86:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	697a      	ldr	r2, [r7, #20]
 8003e8e:	b2d2      	uxtb	r2, r2
 8003e90:	4611      	mov	r1, r2
 8003e92:	4618      	mov	r0, r3
 8003e94:	f003 fcab 	bl	80077ee <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8003e98:	e331      	b.n	80044fe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	015a      	lsls	r2, r3, #5
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	4413      	add	r3, r2
 8003ea2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	f003 0320 	and.w	r3, r3, #32
 8003eac:	2b20      	cmp	r3, #32
 8003eae:	d12e      	bne.n	8003f0e <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	015a      	lsls	r2, r3, #5
 8003eb4:	69bb      	ldr	r3, [r7, #24]
 8003eb6:	4413      	add	r3, r2
 8003eb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	2320      	movs	r3, #32
 8003ec0:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	212c      	movs	r1, #44	; 0x2c
 8003ec8:	fb01 f303 	mul.w	r3, r1, r3
 8003ecc:	4413      	add	r3, r2
 8003ece:	333d      	adds	r3, #61	; 0x3d
 8003ed0:	781b      	ldrb	r3, [r3, #0]
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	f040 8313 	bne.w	80044fe <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	212c      	movs	r1, #44	; 0x2c
 8003ede:	fb01 f303 	mul.w	r3, r1, r3
 8003ee2:	4413      	add	r3, r2
 8003ee4:	333d      	adds	r3, #61	; 0x3d
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	212c      	movs	r1, #44	; 0x2c
 8003ef0:	fb01 f303 	mul.w	r3, r1, r3
 8003ef4:	4413      	add	r3, r2
 8003ef6:	3360      	adds	r3, #96	; 0x60
 8003ef8:	2202      	movs	r2, #2
 8003efa:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	697a      	ldr	r2, [r7, #20]
 8003f02:	b2d2      	uxtb	r2, r2
 8003f04:	4611      	mov	r1, r2
 8003f06:	4618      	mov	r0, r3
 8003f08:	f003 fc71 	bl	80077ee <USB_HC_Halt>
}
 8003f0c:	e2f7      	b.n	80044fe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	015a      	lsls	r2, r3, #5
 8003f12:	69bb      	ldr	r3, [r7, #24]
 8003f14:	4413      	add	r3, r2
 8003f16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f24:	d112      	bne.n	8003f4c <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	015a      	lsls	r2, r3, #5
 8003f2a:	69bb      	ldr	r3, [r7, #24]
 8003f2c:	4413      	add	r3, r2
 8003f2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f32:	461a      	mov	r2, r3
 8003f34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f38:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	697a      	ldr	r2, [r7, #20]
 8003f40:	b2d2      	uxtb	r2, r2
 8003f42:	4611      	mov	r1, r2
 8003f44:	4618      	mov	r0, r3
 8003f46:	f003 fc52 	bl	80077ee <USB_HC_Halt>
}
 8003f4a:	e2d8      	b.n	80044fe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	015a      	lsls	r2, r3, #5
 8003f50:	69bb      	ldr	r3, [r7, #24]
 8003f52:	4413      	add	r3, r2
 8003f54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	f003 0301 	and.w	r3, r3, #1
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d140      	bne.n	8003fe4 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	212c      	movs	r1, #44	; 0x2c
 8003f68:	fb01 f303 	mul.w	r3, r1, r3
 8003f6c:	4413      	add	r3, r2
 8003f6e:	335c      	adds	r3, #92	; 0x5c
 8003f70:	2200      	movs	r2, #0
 8003f72:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	015a      	lsls	r2, r3, #5
 8003f78:	69bb      	ldr	r3, [r7, #24]
 8003f7a:	4413      	add	r3, r2
 8003f7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f86:	2b40      	cmp	r3, #64	; 0x40
 8003f88:	d111      	bne.n	8003fae <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	212c      	movs	r1, #44	; 0x2c
 8003f90:	fb01 f303 	mul.w	r3, r1, r3
 8003f94:	4413      	add	r3, r2
 8003f96:	333d      	adds	r3, #61	; 0x3d
 8003f98:	2201      	movs	r2, #1
 8003f9a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	015a      	lsls	r2, r3, #5
 8003fa0:	69bb      	ldr	r3, [r7, #24]
 8003fa2:	4413      	add	r3, r2
 8003fa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fa8:	461a      	mov	r2, r3
 8003faa:	2340      	movs	r3, #64	; 0x40
 8003fac:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	015a      	lsls	r2, r3, #5
 8003fb2:	69bb      	ldr	r3, [r7, #24]
 8003fb4:	4413      	add	r3, r2
 8003fb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fba:	461a      	mov	r2, r3
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	212c      	movs	r1, #44	; 0x2c
 8003fc6:	fb01 f303 	mul.w	r3, r1, r3
 8003fca:	4413      	add	r3, r2
 8003fcc:	3361      	adds	r3, #97	; 0x61
 8003fce:	2201      	movs	r2, #1
 8003fd0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	697a      	ldr	r2, [r7, #20]
 8003fd8:	b2d2      	uxtb	r2, r2
 8003fda:	4611      	mov	r1, r2
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f003 fc06 	bl	80077ee <USB_HC_Halt>
}
 8003fe2:	e28c      	b.n	80044fe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	015a      	lsls	r2, r3, #5
 8003fe8:	69bb      	ldr	r3, [r7, #24]
 8003fea:	4413      	add	r3, r2
 8003fec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ff6:	2b40      	cmp	r3, #64	; 0x40
 8003ff8:	d12c      	bne.n	8004054 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	212c      	movs	r1, #44	; 0x2c
 8004000:	fb01 f303 	mul.w	r3, r1, r3
 8004004:	4413      	add	r3, r2
 8004006:	3361      	adds	r3, #97	; 0x61
 8004008:	2204      	movs	r2, #4
 800400a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	212c      	movs	r1, #44	; 0x2c
 8004012:	fb01 f303 	mul.w	r3, r1, r3
 8004016:	4413      	add	r3, r2
 8004018:	333d      	adds	r3, #61	; 0x3d
 800401a:	2201      	movs	r2, #1
 800401c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	212c      	movs	r1, #44	; 0x2c
 8004024:	fb01 f303 	mul.w	r3, r1, r3
 8004028:	4413      	add	r3, r2
 800402a:	335c      	adds	r3, #92	; 0x5c
 800402c:	2200      	movs	r2, #0
 800402e:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	697a      	ldr	r2, [r7, #20]
 8004036:	b2d2      	uxtb	r2, r2
 8004038:	4611      	mov	r1, r2
 800403a:	4618      	mov	r0, r3
 800403c:	f003 fbd7 	bl	80077ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	015a      	lsls	r2, r3, #5
 8004044:	69bb      	ldr	r3, [r7, #24]
 8004046:	4413      	add	r3, r2
 8004048:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800404c:	461a      	mov	r2, r3
 800404e:	2340      	movs	r3, #64	; 0x40
 8004050:	6093      	str	r3, [r2, #8]
}
 8004052:	e254      	b.n	80044fe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	015a      	lsls	r2, r3, #5
 8004058:	69bb      	ldr	r3, [r7, #24]
 800405a:	4413      	add	r3, r2
 800405c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	f003 0308 	and.w	r3, r3, #8
 8004066:	2b08      	cmp	r3, #8
 8004068:	d11a      	bne.n	80040a0 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	015a      	lsls	r2, r3, #5
 800406e:	69bb      	ldr	r3, [r7, #24]
 8004070:	4413      	add	r3, r2
 8004072:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004076:	461a      	mov	r2, r3
 8004078:	2308      	movs	r3, #8
 800407a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	212c      	movs	r1, #44	; 0x2c
 8004082:	fb01 f303 	mul.w	r3, r1, r3
 8004086:	4413      	add	r3, r2
 8004088:	3361      	adds	r3, #97	; 0x61
 800408a:	2205      	movs	r2, #5
 800408c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	697a      	ldr	r2, [r7, #20]
 8004094:	b2d2      	uxtb	r2, r2
 8004096:	4611      	mov	r1, r2
 8004098:	4618      	mov	r0, r3
 800409a:	f003 fba8 	bl	80077ee <USB_HC_Halt>
}
 800409e:	e22e      	b.n	80044fe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	015a      	lsls	r2, r3, #5
 80040a4:	69bb      	ldr	r3, [r7, #24]
 80040a6:	4413      	add	r3, r2
 80040a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	f003 0310 	and.w	r3, r3, #16
 80040b2:	2b10      	cmp	r3, #16
 80040b4:	d140      	bne.n	8004138 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	212c      	movs	r1, #44	; 0x2c
 80040bc:	fb01 f303 	mul.w	r3, r1, r3
 80040c0:	4413      	add	r3, r2
 80040c2:	335c      	adds	r3, #92	; 0x5c
 80040c4:	2200      	movs	r2, #0
 80040c6:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	212c      	movs	r1, #44	; 0x2c
 80040ce:	fb01 f303 	mul.w	r3, r1, r3
 80040d2:	4413      	add	r3, r2
 80040d4:	3361      	adds	r3, #97	; 0x61
 80040d6:	2203      	movs	r2, #3
 80040d8:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	212c      	movs	r1, #44	; 0x2c
 80040e0:	fb01 f303 	mul.w	r3, r1, r3
 80040e4:	4413      	add	r3, r2
 80040e6:	333d      	adds	r3, #61	; 0x3d
 80040e8:	781b      	ldrb	r3, [r3, #0]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d112      	bne.n	8004114 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	212c      	movs	r1, #44	; 0x2c
 80040f4:	fb01 f303 	mul.w	r3, r1, r3
 80040f8:	4413      	add	r3, r2
 80040fa:	333c      	adds	r3, #60	; 0x3c
 80040fc:	781b      	ldrb	r3, [r3, #0]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d108      	bne.n	8004114 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	212c      	movs	r1, #44	; 0x2c
 8004108:	fb01 f303 	mul.w	r3, r1, r3
 800410c:	4413      	add	r3, r2
 800410e:	333d      	adds	r3, #61	; 0x3d
 8004110:	2201      	movs	r2, #1
 8004112:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	697a      	ldr	r2, [r7, #20]
 800411a:	b2d2      	uxtb	r2, r2
 800411c:	4611      	mov	r1, r2
 800411e:	4618      	mov	r0, r3
 8004120:	f003 fb65 	bl	80077ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	015a      	lsls	r2, r3, #5
 8004128:	69bb      	ldr	r3, [r7, #24]
 800412a:	4413      	add	r3, r2
 800412c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004130:	461a      	mov	r2, r3
 8004132:	2310      	movs	r3, #16
 8004134:	6093      	str	r3, [r2, #8]
}
 8004136:	e1e2      	b.n	80044fe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	015a      	lsls	r2, r3, #5
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	4413      	add	r3, r2
 8004140:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800414a:	2b80      	cmp	r3, #128	; 0x80
 800414c:	d164      	bne.n	8004218 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	691b      	ldr	r3, [r3, #16]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d111      	bne.n	800417a <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	212c      	movs	r1, #44	; 0x2c
 800415c:	fb01 f303 	mul.w	r3, r1, r3
 8004160:	4413      	add	r3, r2
 8004162:	3361      	adds	r3, #97	; 0x61
 8004164:	2206      	movs	r2, #6
 8004166:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	697a      	ldr	r2, [r7, #20]
 800416e:	b2d2      	uxtb	r2, r2
 8004170:	4611      	mov	r1, r2
 8004172:	4618      	mov	r0, r3
 8004174:	f003 fb3b 	bl	80077ee <USB_HC_Halt>
 8004178:	e044      	b.n	8004204 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	212c      	movs	r1, #44	; 0x2c
 8004180:	fb01 f303 	mul.w	r3, r1, r3
 8004184:	4413      	add	r3, r2
 8004186:	335c      	adds	r3, #92	; 0x5c
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	1c5a      	adds	r2, r3, #1
 800418c:	6879      	ldr	r1, [r7, #4]
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	202c      	movs	r0, #44	; 0x2c
 8004192:	fb00 f303 	mul.w	r3, r0, r3
 8004196:	440b      	add	r3, r1
 8004198:	335c      	adds	r3, #92	; 0x5c
 800419a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	212c      	movs	r1, #44	; 0x2c
 80041a2:	fb01 f303 	mul.w	r3, r1, r3
 80041a6:	4413      	add	r3, r2
 80041a8:	335c      	adds	r3, #92	; 0x5c
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	2b02      	cmp	r3, #2
 80041ae:	d920      	bls.n	80041f2 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	212c      	movs	r1, #44	; 0x2c
 80041b6:	fb01 f303 	mul.w	r3, r1, r3
 80041ba:	4413      	add	r3, r2
 80041bc:	335c      	adds	r3, #92	; 0x5c
 80041be:	2200      	movs	r2, #0
 80041c0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	212c      	movs	r1, #44	; 0x2c
 80041c8:	fb01 f303 	mul.w	r3, r1, r3
 80041cc:	4413      	add	r3, r2
 80041ce:	3360      	adds	r3, #96	; 0x60
 80041d0:	2204      	movs	r2, #4
 80041d2:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	b2d9      	uxtb	r1, r3
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	202c      	movs	r0, #44	; 0x2c
 80041de:	fb00 f303 	mul.w	r3, r0, r3
 80041e2:	4413      	add	r3, r2
 80041e4:	3360      	adds	r3, #96	; 0x60
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	461a      	mov	r2, r3
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f005 fda2 	bl	8009d34 <HAL_HCD_HC_NotifyURBChange_Callback>
 80041f0:	e008      	b.n	8004204 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	212c      	movs	r1, #44	; 0x2c
 80041f8:	fb01 f303 	mul.w	r3, r1, r3
 80041fc:	4413      	add	r3, r2
 80041fe:	3360      	adds	r3, #96	; 0x60
 8004200:	2202      	movs	r2, #2
 8004202:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	015a      	lsls	r2, r3, #5
 8004208:	69bb      	ldr	r3, [r7, #24]
 800420a:	4413      	add	r3, r2
 800420c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004210:	461a      	mov	r2, r3
 8004212:	2380      	movs	r3, #128	; 0x80
 8004214:	6093      	str	r3, [r2, #8]
}
 8004216:	e172      	b.n	80044fe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	015a      	lsls	r2, r3, #5
 800421c:	69bb      	ldr	r3, [r7, #24]
 800421e:	4413      	add	r3, r2
 8004220:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800422a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800422e:	d11b      	bne.n	8004268 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	212c      	movs	r1, #44	; 0x2c
 8004236:	fb01 f303 	mul.w	r3, r1, r3
 800423a:	4413      	add	r3, r2
 800423c:	3361      	adds	r3, #97	; 0x61
 800423e:	2208      	movs	r2, #8
 8004240:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	697a      	ldr	r2, [r7, #20]
 8004248:	b2d2      	uxtb	r2, r2
 800424a:	4611      	mov	r1, r2
 800424c:	4618      	mov	r0, r3
 800424e:	f003 face 	bl	80077ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	015a      	lsls	r2, r3, #5
 8004256:	69bb      	ldr	r3, [r7, #24]
 8004258:	4413      	add	r3, r2
 800425a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800425e:	461a      	mov	r2, r3
 8004260:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004264:	6093      	str	r3, [r2, #8]
}
 8004266:	e14a      	b.n	80044fe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	015a      	lsls	r2, r3, #5
 800426c:	69bb      	ldr	r3, [r7, #24]
 800426e:	4413      	add	r3, r2
 8004270:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	f003 0302 	and.w	r3, r3, #2
 800427a:	2b02      	cmp	r3, #2
 800427c:	f040 813f 	bne.w	80044fe <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	212c      	movs	r1, #44	; 0x2c
 8004286:	fb01 f303 	mul.w	r3, r1, r3
 800428a:	4413      	add	r3, r2
 800428c:	3361      	adds	r3, #97	; 0x61
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	2b01      	cmp	r3, #1
 8004292:	d17d      	bne.n	8004390 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	212c      	movs	r1, #44	; 0x2c
 800429a:	fb01 f303 	mul.w	r3, r1, r3
 800429e:	4413      	add	r3, r2
 80042a0:	3360      	adds	r3, #96	; 0x60
 80042a2:	2201      	movs	r2, #1
 80042a4:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	212c      	movs	r1, #44	; 0x2c
 80042ac:	fb01 f303 	mul.w	r3, r1, r3
 80042b0:	4413      	add	r3, r2
 80042b2:	333f      	adds	r3, #63	; 0x3f
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	2b02      	cmp	r3, #2
 80042b8:	d00a      	beq.n	80042d0 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	212c      	movs	r1, #44	; 0x2c
 80042c0:	fb01 f303 	mul.w	r3, r1, r3
 80042c4:	4413      	add	r3, r2
 80042c6:	333f      	adds	r3, #63	; 0x3f
 80042c8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80042ca:	2b03      	cmp	r3, #3
 80042cc:	f040 8100 	bne.w	80044d0 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	691b      	ldr	r3, [r3, #16]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d113      	bne.n	8004300 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	212c      	movs	r1, #44	; 0x2c
 80042de:	fb01 f303 	mul.w	r3, r1, r3
 80042e2:	4413      	add	r3, r2
 80042e4:	3355      	adds	r3, #85	; 0x55
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	f083 0301 	eor.w	r3, r3, #1
 80042ec:	b2d8      	uxtb	r0, r3
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	212c      	movs	r1, #44	; 0x2c
 80042f4:	fb01 f303 	mul.w	r3, r1, r3
 80042f8:	4413      	add	r3, r2
 80042fa:	3355      	adds	r3, #85	; 0x55
 80042fc:	4602      	mov	r2, r0
 80042fe:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	691b      	ldr	r3, [r3, #16]
 8004304:	2b01      	cmp	r3, #1
 8004306:	f040 80e3 	bne.w	80044d0 <HCD_HC_OUT_IRQHandler+0x69c>
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	212c      	movs	r1, #44	; 0x2c
 8004310:	fb01 f303 	mul.w	r3, r1, r3
 8004314:	4413      	add	r3, r2
 8004316:	334c      	adds	r3, #76	; 0x4c
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	2b00      	cmp	r3, #0
 800431c:	f000 80d8 	beq.w	80044d0 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	212c      	movs	r1, #44	; 0x2c
 8004326:	fb01 f303 	mul.w	r3, r1, r3
 800432a:	4413      	add	r3, r2
 800432c:	334c      	adds	r3, #76	; 0x4c
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	6879      	ldr	r1, [r7, #4]
 8004332:	697a      	ldr	r2, [r7, #20]
 8004334:	202c      	movs	r0, #44	; 0x2c
 8004336:	fb00 f202 	mul.w	r2, r0, r2
 800433a:	440a      	add	r2, r1
 800433c:	3240      	adds	r2, #64	; 0x40
 800433e:	8812      	ldrh	r2, [r2, #0]
 8004340:	4413      	add	r3, r2
 8004342:	3b01      	subs	r3, #1
 8004344:	6879      	ldr	r1, [r7, #4]
 8004346:	697a      	ldr	r2, [r7, #20]
 8004348:	202c      	movs	r0, #44	; 0x2c
 800434a:	fb00 f202 	mul.w	r2, r0, r2
 800434e:	440a      	add	r2, r1
 8004350:	3240      	adds	r2, #64	; 0x40
 8004352:	8812      	ldrh	r2, [r2, #0]
 8004354:	fbb3 f3f2 	udiv	r3, r3, r2
 8004358:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	f003 0301 	and.w	r3, r3, #1
 8004360:	2b00      	cmp	r3, #0
 8004362:	f000 80b5 	beq.w	80044d0 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	212c      	movs	r1, #44	; 0x2c
 800436c:	fb01 f303 	mul.w	r3, r1, r3
 8004370:	4413      	add	r3, r2
 8004372:	3355      	adds	r3, #85	; 0x55
 8004374:	781b      	ldrb	r3, [r3, #0]
 8004376:	f083 0301 	eor.w	r3, r3, #1
 800437a:	b2d8      	uxtb	r0, r3
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	212c      	movs	r1, #44	; 0x2c
 8004382:	fb01 f303 	mul.w	r3, r1, r3
 8004386:	4413      	add	r3, r2
 8004388:	3355      	adds	r3, #85	; 0x55
 800438a:	4602      	mov	r2, r0
 800438c:	701a      	strb	r2, [r3, #0]
 800438e:	e09f      	b.n	80044d0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	212c      	movs	r1, #44	; 0x2c
 8004396:	fb01 f303 	mul.w	r3, r1, r3
 800439a:	4413      	add	r3, r2
 800439c:	3361      	adds	r3, #97	; 0x61
 800439e:	781b      	ldrb	r3, [r3, #0]
 80043a0:	2b03      	cmp	r3, #3
 80043a2:	d109      	bne.n	80043b8 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	212c      	movs	r1, #44	; 0x2c
 80043aa:	fb01 f303 	mul.w	r3, r1, r3
 80043ae:	4413      	add	r3, r2
 80043b0:	3360      	adds	r3, #96	; 0x60
 80043b2:	2202      	movs	r2, #2
 80043b4:	701a      	strb	r2, [r3, #0]
 80043b6:	e08b      	b.n	80044d0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	212c      	movs	r1, #44	; 0x2c
 80043be:	fb01 f303 	mul.w	r3, r1, r3
 80043c2:	4413      	add	r3, r2
 80043c4:	3361      	adds	r3, #97	; 0x61
 80043c6:	781b      	ldrb	r3, [r3, #0]
 80043c8:	2b04      	cmp	r3, #4
 80043ca:	d109      	bne.n	80043e0 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	212c      	movs	r1, #44	; 0x2c
 80043d2:	fb01 f303 	mul.w	r3, r1, r3
 80043d6:	4413      	add	r3, r2
 80043d8:	3360      	adds	r3, #96	; 0x60
 80043da:	2202      	movs	r2, #2
 80043dc:	701a      	strb	r2, [r3, #0]
 80043de:	e077      	b.n	80044d0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80043e0:	687a      	ldr	r2, [r7, #4]
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	212c      	movs	r1, #44	; 0x2c
 80043e6:	fb01 f303 	mul.w	r3, r1, r3
 80043ea:	4413      	add	r3, r2
 80043ec:	3361      	adds	r3, #97	; 0x61
 80043ee:	781b      	ldrb	r3, [r3, #0]
 80043f0:	2b05      	cmp	r3, #5
 80043f2:	d109      	bne.n	8004408 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	212c      	movs	r1, #44	; 0x2c
 80043fa:	fb01 f303 	mul.w	r3, r1, r3
 80043fe:	4413      	add	r3, r2
 8004400:	3360      	adds	r3, #96	; 0x60
 8004402:	2205      	movs	r2, #5
 8004404:	701a      	strb	r2, [r3, #0]
 8004406:	e063      	b.n	80044d0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	212c      	movs	r1, #44	; 0x2c
 800440e:	fb01 f303 	mul.w	r3, r1, r3
 8004412:	4413      	add	r3, r2
 8004414:	3361      	adds	r3, #97	; 0x61
 8004416:	781b      	ldrb	r3, [r3, #0]
 8004418:	2b06      	cmp	r3, #6
 800441a:	d009      	beq.n	8004430 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800441c:	687a      	ldr	r2, [r7, #4]
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	212c      	movs	r1, #44	; 0x2c
 8004422:	fb01 f303 	mul.w	r3, r1, r3
 8004426:	4413      	add	r3, r2
 8004428:	3361      	adds	r3, #97	; 0x61
 800442a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800442c:	2b08      	cmp	r3, #8
 800442e:	d14f      	bne.n	80044d0 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	212c      	movs	r1, #44	; 0x2c
 8004436:	fb01 f303 	mul.w	r3, r1, r3
 800443a:	4413      	add	r3, r2
 800443c:	335c      	adds	r3, #92	; 0x5c
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	1c5a      	adds	r2, r3, #1
 8004442:	6879      	ldr	r1, [r7, #4]
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	202c      	movs	r0, #44	; 0x2c
 8004448:	fb00 f303 	mul.w	r3, r0, r3
 800444c:	440b      	add	r3, r1
 800444e:	335c      	adds	r3, #92	; 0x5c
 8004450:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	212c      	movs	r1, #44	; 0x2c
 8004458:	fb01 f303 	mul.w	r3, r1, r3
 800445c:	4413      	add	r3, r2
 800445e:	335c      	adds	r3, #92	; 0x5c
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	2b02      	cmp	r3, #2
 8004464:	d912      	bls.n	800448c <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	212c      	movs	r1, #44	; 0x2c
 800446c:	fb01 f303 	mul.w	r3, r1, r3
 8004470:	4413      	add	r3, r2
 8004472:	335c      	adds	r3, #92	; 0x5c
 8004474:	2200      	movs	r2, #0
 8004476:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	212c      	movs	r1, #44	; 0x2c
 800447e:	fb01 f303 	mul.w	r3, r1, r3
 8004482:	4413      	add	r3, r2
 8004484:	3360      	adds	r3, #96	; 0x60
 8004486:	2204      	movs	r2, #4
 8004488:	701a      	strb	r2, [r3, #0]
 800448a:	e021      	b.n	80044d0 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	212c      	movs	r1, #44	; 0x2c
 8004492:	fb01 f303 	mul.w	r3, r1, r3
 8004496:	4413      	add	r3, r2
 8004498:	3360      	adds	r3, #96	; 0x60
 800449a:	2202      	movs	r2, #2
 800449c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	015a      	lsls	r2, r3, #5
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	4413      	add	r3, r2
 80044a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80044b4:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80044bc:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	015a      	lsls	r2, r3, #5
 80044c2:	69bb      	ldr	r3, [r7, #24]
 80044c4:	4413      	add	r3, r2
 80044c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044ca:	461a      	mov	r2, r3
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	015a      	lsls	r2, r3, #5
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	4413      	add	r3, r2
 80044d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044dc:	461a      	mov	r2, r3
 80044de:	2302      	movs	r3, #2
 80044e0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	b2d9      	uxtb	r1, r3
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	202c      	movs	r0, #44	; 0x2c
 80044ec:	fb00 f303 	mul.w	r3, r0, r3
 80044f0:	4413      	add	r3, r2
 80044f2:	3360      	adds	r3, #96	; 0x60
 80044f4:	781b      	ldrb	r3, [r3, #0]
 80044f6:	461a      	mov	r2, r3
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f005 fc1b 	bl	8009d34 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80044fe:	bf00      	nop
 8004500:	3720      	adds	r7, #32
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}

08004506 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004506:	b580      	push	{r7, lr}
 8004508:	b08a      	sub	sp, #40	; 0x28
 800450a:	af00      	add	r7, sp, #0
 800450c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004516:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	6a1b      	ldr	r3, [r3, #32]
 800451e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004520:	69fb      	ldr	r3, [r7, #28]
 8004522:	f003 030f 	and.w	r3, r3, #15
 8004526:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004528:	69fb      	ldr	r3, [r7, #28]
 800452a:	0c5b      	lsrs	r3, r3, #17
 800452c:	f003 030f 	and.w	r3, r3, #15
 8004530:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004532:	69fb      	ldr	r3, [r7, #28]
 8004534:	091b      	lsrs	r3, r3, #4
 8004536:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800453a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	2b02      	cmp	r3, #2
 8004540:	d004      	beq.n	800454c <HCD_RXQLVL_IRQHandler+0x46>
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	2b05      	cmp	r3, #5
 8004546:	f000 80a9 	beq.w	800469c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800454a:	e0aa      	b.n	80046a2 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	2b00      	cmp	r3, #0
 8004550:	f000 80a6 	beq.w	80046a0 <HCD_RXQLVL_IRQHandler+0x19a>
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	69bb      	ldr	r3, [r7, #24]
 8004558:	212c      	movs	r1, #44	; 0x2c
 800455a:	fb01 f303 	mul.w	r3, r1, r3
 800455e:	4413      	add	r3, r2
 8004560:	3344      	adds	r3, #68	; 0x44
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	2b00      	cmp	r3, #0
 8004566:	f000 809b 	beq.w	80046a0 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	69bb      	ldr	r3, [r7, #24]
 800456e:	212c      	movs	r1, #44	; 0x2c
 8004570:	fb01 f303 	mul.w	r3, r1, r3
 8004574:	4413      	add	r3, r2
 8004576:	3350      	adds	r3, #80	; 0x50
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	441a      	add	r2, r3
 800457e:	6879      	ldr	r1, [r7, #4]
 8004580:	69bb      	ldr	r3, [r7, #24]
 8004582:	202c      	movs	r0, #44	; 0x2c
 8004584:	fb00 f303 	mul.w	r3, r0, r3
 8004588:	440b      	add	r3, r1
 800458a:	334c      	adds	r3, #76	; 0x4c
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	429a      	cmp	r2, r3
 8004590:	d87a      	bhi.n	8004688 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6818      	ldr	r0, [r3, #0]
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	69bb      	ldr	r3, [r7, #24]
 800459a:	212c      	movs	r1, #44	; 0x2c
 800459c:	fb01 f303 	mul.w	r3, r1, r3
 80045a0:	4413      	add	r3, r2
 80045a2:	3344      	adds	r3, #68	; 0x44
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	693a      	ldr	r2, [r7, #16]
 80045a8:	b292      	uxth	r2, r2
 80045aa:	4619      	mov	r1, r3
 80045ac:	f002 fc76 	bl	8006e9c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	212c      	movs	r1, #44	; 0x2c
 80045b6:	fb01 f303 	mul.w	r3, r1, r3
 80045ba:	4413      	add	r3, r2
 80045bc:	3344      	adds	r3, #68	; 0x44
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	441a      	add	r2, r3
 80045c4:	6879      	ldr	r1, [r7, #4]
 80045c6:	69bb      	ldr	r3, [r7, #24]
 80045c8:	202c      	movs	r0, #44	; 0x2c
 80045ca:	fb00 f303 	mul.w	r3, r0, r3
 80045ce:	440b      	add	r3, r1
 80045d0:	3344      	adds	r3, #68	; 0x44
 80045d2:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	69bb      	ldr	r3, [r7, #24]
 80045d8:	212c      	movs	r1, #44	; 0x2c
 80045da:	fb01 f303 	mul.w	r3, r1, r3
 80045de:	4413      	add	r3, r2
 80045e0:	3350      	adds	r3, #80	; 0x50
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	441a      	add	r2, r3
 80045e8:	6879      	ldr	r1, [r7, #4]
 80045ea:	69bb      	ldr	r3, [r7, #24]
 80045ec:	202c      	movs	r0, #44	; 0x2c
 80045ee:	fb00 f303 	mul.w	r3, r0, r3
 80045f2:	440b      	add	r3, r1
 80045f4:	3350      	adds	r3, #80	; 0x50
 80045f6:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80045f8:	69bb      	ldr	r3, [r7, #24]
 80045fa:	015a      	lsls	r2, r3, #5
 80045fc:	6a3b      	ldr	r3, [r7, #32]
 80045fe:	4413      	add	r3, r2
 8004600:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004604:	691b      	ldr	r3, [r3, #16]
 8004606:	0cdb      	lsrs	r3, r3, #19
 8004608:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800460c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	69bb      	ldr	r3, [r7, #24]
 8004612:	212c      	movs	r1, #44	; 0x2c
 8004614:	fb01 f303 	mul.w	r3, r1, r3
 8004618:	4413      	add	r3, r2
 800461a:	3340      	adds	r3, #64	; 0x40
 800461c:	881b      	ldrh	r3, [r3, #0]
 800461e:	461a      	mov	r2, r3
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	4293      	cmp	r3, r2
 8004624:	d13c      	bne.n	80046a0 <HCD_RXQLVL_IRQHandler+0x19a>
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d039      	beq.n	80046a0 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800462c:	69bb      	ldr	r3, [r7, #24]
 800462e:	015a      	lsls	r2, r3, #5
 8004630:	6a3b      	ldr	r3, [r7, #32]
 8004632:	4413      	add	r3, r2
 8004634:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004642:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800464a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800464c:	69bb      	ldr	r3, [r7, #24]
 800464e:	015a      	lsls	r2, r3, #5
 8004650:	6a3b      	ldr	r3, [r7, #32]
 8004652:	4413      	add	r3, r2
 8004654:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004658:	461a      	mov	r2, r3
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	69bb      	ldr	r3, [r7, #24]
 8004662:	212c      	movs	r1, #44	; 0x2c
 8004664:	fb01 f303 	mul.w	r3, r1, r3
 8004668:	4413      	add	r3, r2
 800466a:	3354      	adds	r3, #84	; 0x54
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	f083 0301 	eor.w	r3, r3, #1
 8004672:	b2d8      	uxtb	r0, r3
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	69bb      	ldr	r3, [r7, #24]
 8004678:	212c      	movs	r1, #44	; 0x2c
 800467a:	fb01 f303 	mul.w	r3, r1, r3
 800467e:	4413      	add	r3, r2
 8004680:	3354      	adds	r3, #84	; 0x54
 8004682:	4602      	mov	r2, r0
 8004684:	701a      	strb	r2, [r3, #0]
      break;
 8004686:	e00b      	b.n	80046a0 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	69bb      	ldr	r3, [r7, #24]
 800468c:	212c      	movs	r1, #44	; 0x2c
 800468e:	fb01 f303 	mul.w	r3, r1, r3
 8004692:	4413      	add	r3, r2
 8004694:	3360      	adds	r3, #96	; 0x60
 8004696:	2204      	movs	r2, #4
 8004698:	701a      	strb	r2, [r3, #0]
      break;
 800469a:	e001      	b.n	80046a0 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800469c:	bf00      	nop
 800469e:	e000      	b.n	80046a2 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80046a0:	bf00      	nop
  }
}
 80046a2:	bf00      	nop
 80046a4:	3728      	adds	r7, #40	; 0x28
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}

080046aa <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80046aa:	b580      	push	{r7, lr}
 80046ac:	b086      	sub	sp, #24
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80046d6:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f003 0302 	and.w	r3, r3, #2
 80046de:	2b02      	cmp	r3, #2
 80046e0:	d10b      	bne.n	80046fa <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	f003 0301 	and.w	r3, r3, #1
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d102      	bne.n	80046f2 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f005 fb05 	bl	8009cfc <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	f043 0302 	orr.w	r3, r3, #2
 80046f8:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f003 0308 	and.w	r3, r3, #8
 8004700:	2b08      	cmp	r3, #8
 8004702:	d132      	bne.n	800476a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	f043 0308 	orr.w	r3, r3, #8
 800470a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f003 0304 	and.w	r3, r3, #4
 8004712:	2b04      	cmp	r3, #4
 8004714:	d126      	bne.n	8004764 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	699b      	ldr	r3, [r3, #24]
 800471a:	2b02      	cmp	r3, #2
 800471c:	d113      	bne.n	8004746 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004724:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004728:	d106      	bne.n	8004738 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	2102      	movs	r1, #2
 8004730:	4618      	mov	r0, r3
 8004732:	f002 fd21 	bl	8007178 <USB_InitFSLSPClkSel>
 8004736:	e011      	b.n	800475c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2101      	movs	r1, #1
 800473e:	4618      	mov	r0, r3
 8004740:	f002 fd1a 	bl	8007178 <USB_InitFSLSPClkSel>
 8004744:	e00a      	b.n	800475c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	2b01      	cmp	r3, #1
 800474c:	d106      	bne.n	800475c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004754:	461a      	mov	r2, r3
 8004756:	f64e 2360 	movw	r3, #60000	; 0xea60
 800475a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	f005 faf7 	bl	8009d50 <HAL_HCD_PortEnabled_Callback>
 8004762:	e002      	b.n	800476a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	f005 fb01 	bl	8009d6c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f003 0320 	and.w	r3, r3, #32
 8004770:	2b20      	cmp	r3, #32
 8004772:	d103      	bne.n	800477c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	f043 0320 	orr.w	r3, r3, #32
 800477a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004782:	461a      	mov	r2, r3
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	6013      	str	r3, [r2, #0]
}
 8004788:	bf00      	nop
 800478a:	3718      	adds	r7, #24
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}

08004790 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b088      	sub	sp, #32
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d101      	bne.n	80047a2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e128      	b.n	80049f4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d109      	bne.n	80047c2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2200      	movs	r2, #0
 80047b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a90      	ldr	r2, [pc, #576]	; (80049fc <HAL_I2S_Init+0x26c>)
 80047ba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	f7fd fdd1 	bl	8002364 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2202      	movs	r2, #2
 80047c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	69db      	ldr	r3, [r3, #28]
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	6812      	ldr	r2, [r2, #0]
 80047d4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80047d8:	f023 030f 	bic.w	r3, r3, #15
 80047dc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	2202      	movs	r2, #2
 80047e4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	695b      	ldr	r3, [r3, #20]
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	d060      	beq.n	80048b0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d102      	bne.n	80047fc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80047f6:	2310      	movs	r3, #16
 80047f8:	617b      	str	r3, [r7, #20]
 80047fa:	e001      	b.n	8004800 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80047fc:	2320      	movs	r3, #32
 80047fe:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	2b20      	cmp	r3, #32
 8004806:	d802      	bhi.n	800480e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	005b      	lsls	r3, r3, #1
 800480c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800480e:	2001      	movs	r0, #1
 8004810:	f001 f9d8 	bl	8005bc4 <HAL_RCCEx_GetPeriphCLKFreq>
 8004814:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	691b      	ldr	r3, [r3, #16]
 800481a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800481e:	d125      	bne.n	800486c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d010      	beq.n	800484a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	68fa      	ldr	r2, [r7, #12]
 800482e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004832:	4613      	mov	r3, r2
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	4413      	add	r3, r2
 8004838:	005b      	lsls	r3, r3, #1
 800483a:	461a      	mov	r2, r3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	695b      	ldr	r3, [r3, #20]
 8004840:	fbb2 f3f3 	udiv	r3, r2, r3
 8004844:	3305      	adds	r3, #5
 8004846:	613b      	str	r3, [r7, #16]
 8004848:	e01f      	b.n	800488a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	00db      	lsls	r3, r3, #3
 800484e:	68fa      	ldr	r2, [r7, #12]
 8004850:	fbb2 f2f3 	udiv	r2, r2, r3
 8004854:	4613      	mov	r3, r2
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	4413      	add	r3, r2
 800485a:	005b      	lsls	r3, r3, #1
 800485c:	461a      	mov	r2, r3
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	695b      	ldr	r3, [r3, #20]
 8004862:	fbb2 f3f3 	udiv	r3, r2, r3
 8004866:	3305      	adds	r3, #5
 8004868:	613b      	str	r3, [r7, #16]
 800486a:	e00e      	b.n	800488a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800486c:	68fa      	ldr	r2, [r7, #12]
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	fbb2 f2f3 	udiv	r2, r2, r3
 8004874:	4613      	mov	r3, r2
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	4413      	add	r3, r2
 800487a:	005b      	lsls	r3, r3, #1
 800487c:	461a      	mov	r2, r3
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	695b      	ldr	r3, [r3, #20]
 8004882:	fbb2 f3f3 	udiv	r3, r2, r3
 8004886:	3305      	adds	r3, #5
 8004888:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	4a5c      	ldr	r2, [pc, #368]	; (8004a00 <HAL_I2S_Init+0x270>)
 800488e:	fba2 2303 	umull	r2, r3, r2, r3
 8004892:	08db      	lsrs	r3, r3, #3
 8004894:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	f003 0301 	and.w	r3, r3, #1
 800489c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800489e:	693a      	ldr	r2, [r7, #16]
 80048a0:	69bb      	ldr	r3, [r7, #24]
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	085b      	lsrs	r3, r3, #1
 80048a6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80048a8:	69bb      	ldr	r3, [r7, #24]
 80048aa:	021b      	lsls	r3, r3, #8
 80048ac:	61bb      	str	r3, [r7, #24]
 80048ae:	e003      	b.n	80048b8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80048b0:	2302      	movs	r3, #2
 80048b2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80048b4:	2300      	movs	r3, #0
 80048b6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80048b8:	69fb      	ldr	r3, [r7, #28]
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d902      	bls.n	80048c4 <HAL_I2S_Init+0x134>
 80048be:	69fb      	ldr	r3, [r7, #28]
 80048c0:	2bff      	cmp	r3, #255	; 0xff
 80048c2:	d907      	bls.n	80048d4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048c8:	f043 0210 	orr.w	r2, r3, #16
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	e08f      	b.n	80049f4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	691a      	ldr	r2, [r3, #16]
 80048d8:	69bb      	ldr	r3, [r7, #24]
 80048da:	ea42 0103 	orr.w	r1, r2, r3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	69fa      	ldr	r2, [r7, #28]
 80048e4:	430a      	orrs	r2, r1
 80048e6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	69db      	ldr	r3, [r3, #28]
 80048ee:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80048f2:	f023 030f 	bic.w	r3, r3, #15
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	6851      	ldr	r1, [r2, #4]
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	6892      	ldr	r2, [r2, #8]
 80048fe:	4311      	orrs	r1, r2
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	68d2      	ldr	r2, [r2, #12]
 8004904:	4311      	orrs	r1, r2
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	6992      	ldr	r2, [r2, #24]
 800490a:	430a      	orrs	r2, r1
 800490c:	431a      	orrs	r2, r3
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004916:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6a1b      	ldr	r3, [r3, #32]
 800491c:	2b01      	cmp	r3, #1
 800491e:	d161      	bne.n	80049e4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4a38      	ldr	r2, [pc, #224]	; (8004a04 <HAL_I2S_Init+0x274>)
 8004924:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a37      	ldr	r2, [pc, #220]	; (8004a08 <HAL_I2S_Init+0x278>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d101      	bne.n	8004934 <HAL_I2S_Init+0x1a4>
 8004930:	4b36      	ldr	r3, [pc, #216]	; (8004a0c <HAL_I2S_Init+0x27c>)
 8004932:	e001      	b.n	8004938 <HAL_I2S_Init+0x1a8>
 8004934:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004938:	69db      	ldr	r3, [r3, #28]
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	6812      	ldr	r2, [r2, #0]
 800493e:	4932      	ldr	r1, [pc, #200]	; (8004a08 <HAL_I2S_Init+0x278>)
 8004940:	428a      	cmp	r2, r1
 8004942:	d101      	bne.n	8004948 <HAL_I2S_Init+0x1b8>
 8004944:	4a31      	ldr	r2, [pc, #196]	; (8004a0c <HAL_I2S_Init+0x27c>)
 8004946:	e001      	b.n	800494c <HAL_I2S_Init+0x1bc>
 8004948:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800494c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004950:	f023 030f 	bic.w	r3, r3, #15
 8004954:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a2b      	ldr	r2, [pc, #172]	; (8004a08 <HAL_I2S_Init+0x278>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d101      	bne.n	8004964 <HAL_I2S_Init+0x1d4>
 8004960:	4b2a      	ldr	r3, [pc, #168]	; (8004a0c <HAL_I2S_Init+0x27c>)
 8004962:	e001      	b.n	8004968 <HAL_I2S_Init+0x1d8>
 8004964:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004968:	2202      	movs	r2, #2
 800496a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a25      	ldr	r2, [pc, #148]	; (8004a08 <HAL_I2S_Init+0x278>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d101      	bne.n	800497a <HAL_I2S_Init+0x1ea>
 8004976:	4b25      	ldr	r3, [pc, #148]	; (8004a0c <HAL_I2S_Init+0x27c>)
 8004978:	e001      	b.n	800497e <HAL_I2S_Init+0x1ee>
 800497a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800497e:	69db      	ldr	r3, [r3, #28]
 8004980:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800498a:	d003      	beq.n	8004994 <HAL_I2S_Init+0x204>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d103      	bne.n	800499c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004994:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004998:	613b      	str	r3, [r7, #16]
 800499a:	e001      	b.n	80049a0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800499c:	2300      	movs	r3, #0
 800499e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80049aa:	4313      	orrs	r3, r2
 80049ac:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	68db      	ldr	r3, [r3, #12]
 80049b2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80049b4:	4313      	orrs	r3, r2
 80049b6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	699b      	ldr	r3, [r3, #24]
 80049bc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80049be:	4313      	orrs	r3, r2
 80049c0:	b29a      	uxth	r2, r3
 80049c2:	897b      	ldrh	r3, [r7, #10]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80049cc:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a0d      	ldr	r2, [pc, #52]	; (8004a08 <HAL_I2S_Init+0x278>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d101      	bne.n	80049dc <HAL_I2S_Init+0x24c>
 80049d8:	4b0c      	ldr	r3, [pc, #48]	; (8004a0c <HAL_I2S_Init+0x27c>)
 80049da:	e001      	b.n	80049e0 <HAL_I2S_Init+0x250>
 80049dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80049e0:	897a      	ldrh	r2, [r7, #10]
 80049e2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2200      	movs	r2, #0
 80049e8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2201      	movs	r2, #1
 80049ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80049f2:	2300      	movs	r3, #0
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3720      	adds	r7, #32
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}
 80049fc:	08004b07 	.word	0x08004b07
 8004a00:	cccccccd 	.word	0xcccccccd
 8004a04:	08004c1d 	.word	0x08004c1d
 8004a08:	40003800 	.word	0x40003800
 8004a0c:	40003400 	.word	0x40003400

08004a10 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b083      	sub	sp, #12
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004a18:	bf00      	nop
 8004a1a:	370c      	adds	r7, #12
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr

08004a24 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004a2c:	bf00      	nop
 8004a2e:	370c      	adds	r7, #12
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr

08004a38 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b083      	sub	sp, #12
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004a40:	bf00      	nop
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b082      	sub	sp, #8
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a58:	881a      	ldrh	r2, [r3, #0]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a64:	1c9a      	adds	r2, r3, #2
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	3b01      	subs	r3, #1
 8004a72:	b29a      	uxth	r2, r3
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d10e      	bne.n	8004aa0 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	685a      	ldr	r2, [r3, #4]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004a90:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2201      	movs	r2, #1
 8004a96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f7ff ffb8 	bl	8004a10 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004aa0:	bf00      	nop
 8004aa2:	3708      	adds	r7, #8
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}

08004aa8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b082      	sub	sp, #8
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	68da      	ldr	r2, [r3, #12]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aba:	b292      	uxth	r2, r2
 8004abc:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac2:	1c9a      	adds	r2, r3, #2
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	3b01      	subs	r3, #1
 8004ad0:	b29a      	uxth	r2, r3
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d10e      	bne.n	8004afe <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	685a      	ldr	r2, [r3, #4]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004aee:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f7ff ff93 	bl	8004a24 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004afe:	bf00      	nop
 8004b00:	3708      	adds	r7, #8
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}

08004b06 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004b06:	b580      	push	{r7, lr}
 8004b08:	b086      	sub	sp, #24
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	2b04      	cmp	r3, #4
 8004b20:	d13a      	bne.n	8004b98 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	f003 0301 	and.w	r3, r3, #1
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d109      	bne.n	8004b40 <I2S_IRQHandler+0x3a>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b36:	2b40      	cmp	r3, #64	; 0x40
 8004b38:	d102      	bne.n	8004b40 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f7ff ffb4 	bl	8004aa8 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b46:	2b40      	cmp	r3, #64	; 0x40
 8004b48:	d126      	bne.n	8004b98 <I2S_IRQHandler+0x92>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	f003 0320 	and.w	r3, r3, #32
 8004b54:	2b20      	cmp	r3, #32
 8004b56:	d11f      	bne.n	8004b98 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	685a      	ldr	r2, [r3, #4]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004b66:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004b68:	2300      	movs	r3, #0
 8004b6a:	613b      	str	r3, [r7, #16]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	68db      	ldr	r3, [r3, #12]
 8004b72:	613b      	str	r3, [r7, #16]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	613b      	str	r3, [r7, #16]
 8004b7c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2201      	movs	r2, #1
 8004b82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b8a:	f043 0202 	orr.w	r2, r3, #2
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f7ff ff50 	bl	8004a38 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b9e:	b2db      	uxtb	r3, r3
 8004ba0:	2b03      	cmp	r3, #3
 8004ba2:	d136      	bne.n	8004c12 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	f003 0302 	and.w	r3, r3, #2
 8004baa:	2b02      	cmp	r3, #2
 8004bac:	d109      	bne.n	8004bc2 <I2S_IRQHandler+0xbc>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bb8:	2b80      	cmp	r3, #128	; 0x80
 8004bba:	d102      	bne.n	8004bc2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f7ff ff45 	bl	8004a4c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	f003 0308 	and.w	r3, r3, #8
 8004bc8:	2b08      	cmp	r3, #8
 8004bca:	d122      	bne.n	8004c12 <I2S_IRQHandler+0x10c>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	f003 0320 	and.w	r3, r3, #32
 8004bd6:	2b20      	cmp	r3, #32
 8004bd8:	d11b      	bne.n	8004c12 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	685a      	ldr	r2, [r3, #4]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004be8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004bea:	2300      	movs	r3, #0
 8004bec:	60fb      	str	r3, [r7, #12]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	60fb      	str	r3, [r7, #12]
 8004bf6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c04:	f043 0204 	orr.w	r2, r3, #4
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f7ff ff13 	bl	8004a38 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004c12:	bf00      	nop
 8004c14:	3718      	adds	r7, #24
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}
	...

08004c1c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b088      	sub	sp, #32
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a92      	ldr	r2, [pc, #584]	; (8004e7c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d101      	bne.n	8004c3a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004c36:	4b92      	ldr	r3, [pc, #584]	; (8004e80 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004c38:	e001      	b.n	8004c3e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004c3a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a8b      	ldr	r2, [pc, #556]	; (8004e7c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d101      	bne.n	8004c58 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004c54:	4b8a      	ldr	r3, [pc, #552]	; (8004e80 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004c56:	e001      	b.n	8004c5c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004c58:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c68:	d004      	beq.n	8004c74 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	f040 8099 	bne.w	8004da6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004c74:	69fb      	ldr	r3, [r7, #28]
 8004c76:	f003 0302 	and.w	r3, r3, #2
 8004c7a:	2b02      	cmp	r3, #2
 8004c7c:	d107      	bne.n	8004c8e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d002      	beq.n	8004c8e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f000 f925 	bl	8004ed8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004c8e:	69bb      	ldr	r3, [r7, #24]
 8004c90:	f003 0301 	and.w	r3, r3, #1
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d107      	bne.n	8004ca8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d002      	beq.n	8004ca8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f000 f9c8 	bl	8005038 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004ca8:	69bb      	ldr	r3, [r7, #24]
 8004caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cae:	2b40      	cmp	r3, #64	; 0x40
 8004cb0:	d13a      	bne.n	8004d28 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	f003 0320 	and.w	r3, r3, #32
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d035      	beq.n	8004d28 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a6e      	ldr	r2, [pc, #440]	; (8004e7c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d101      	bne.n	8004cca <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004cc6:	4b6e      	ldr	r3, [pc, #440]	; (8004e80 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004cc8:	e001      	b.n	8004cce <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004cca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004cce:	685a      	ldr	r2, [r3, #4]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4969      	ldr	r1, [pc, #420]	; (8004e7c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004cd6:	428b      	cmp	r3, r1
 8004cd8:	d101      	bne.n	8004cde <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004cda:	4b69      	ldr	r3, [pc, #420]	; (8004e80 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004cdc:	e001      	b.n	8004ce2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004cde:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ce2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004ce6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	685a      	ldr	r2, [r3, #4]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004cf6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	60fb      	str	r3, [r7, #12]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	68db      	ldr	r3, [r3, #12]
 8004d02:	60fb      	str	r3, [r7, #12]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	60fb      	str	r3, [r7, #12]
 8004d0c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2201      	movs	r2, #1
 8004d12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d1a:	f043 0202 	orr.w	r2, r3, #2
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f7ff fe88 	bl	8004a38 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004d28:	69fb      	ldr	r3, [r7, #28]
 8004d2a:	f003 0308 	and.w	r3, r3, #8
 8004d2e:	2b08      	cmp	r3, #8
 8004d30:	f040 80c3 	bne.w	8004eba <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	f003 0320 	and.w	r3, r3, #32
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	f000 80bd 	beq.w	8004eba <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	685a      	ldr	r2, [r3, #4]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004d4e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a49      	ldr	r2, [pc, #292]	; (8004e7c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d101      	bne.n	8004d5e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004d5a:	4b49      	ldr	r3, [pc, #292]	; (8004e80 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004d5c:	e001      	b.n	8004d62 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004d5e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d62:	685a      	ldr	r2, [r3, #4]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4944      	ldr	r1, [pc, #272]	; (8004e7c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004d6a:	428b      	cmp	r3, r1
 8004d6c:	d101      	bne.n	8004d72 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004d6e:	4b44      	ldr	r3, [pc, #272]	; (8004e80 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004d70:	e001      	b.n	8004d76 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004d72:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d76:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004d7a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	60bb      	str	r3, [r7, #8]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	60bb      	str	r3, [r7, #8]
 8004d88:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d96:	f043 0204 	orr.w	r2, r3, #4
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f7ff fe4a 	bl	8004a38 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004da4:	e089      	b.n	8004eba <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004da6:	69bb      	ldr	r3, [r7, #24]
 8004da8:	f003 0302 	and.w	r3, r3, #2
 8004dac:	2b02      	cmp	r3, #2
 8004dae:	d107      	bne.n	8004dc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d002      	beq.n	8004dc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f000 f8be 	bl	8004f3c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004dc0:	69fb      	ldr	r3, [r7, #28]
 8004dc2:	f003 0301 	and.w	r3, r3, #1
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d107      	bne.n	8004dda <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d002      	beq.n	8004dda <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f000 f8fd 	bl	8004fd4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004dda:	69fb      	ldr	r3, [r7, #28]
 8004ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004de0:	2b40      	cmp	r3, #64	; 0x40
 8004de2:	d12f      	bne.n	8004e44 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	f003 0320 	and.w	r3, r3, #32
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d02a      	beq.n	8004e44 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	685a      	ldr	r2, [r3, #4]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004dfc:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a1e      	ldr	r2, [pc, #120]	; (8004e7c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d101      	bne.n	8004e0c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004e08:	4b1d      	ldr	r3, [pc, #116]	; (8004e80 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004e0a:	e001      	b.n	8004e10 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004e0c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e10:	685a      	ldr	r2, [r3, #4]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4919      	ldr	r1, [pc, #100]	; (8004e7c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004e18:	428b      	cmp	r3, r1
 8004e1a:	d101      	bne.n	8004e20 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004e1c:	4b18      	ldr	r3, [pc, #96]	; (8004e80 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004e1e:	e001      	b.n	8004e24 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004e20:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e24:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004e28:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e36:	f043 0202 	orr.w	r2, r3, #2
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f7ff fdfa 	bl	8004a38 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004e44:	69bb      	ldr	r3, [r7, #24]
 8004e46:	f003 0308 	and.w	r3, r3, #8
 8004e4a:	2b08      	cmp	r3, #8
 8004e4c:	d136      	bne.n	8004ebc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	f003 0320 	and.w	r3, r3, #32
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d031      	beq.n	8004ebc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a07      	ldr	r2, [pc, #28]	; (8004e7c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d101      	bne.n	8004e66 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004e62:	4b07      	ldr	r3, [pc, #28]	; (8004e80 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004e64:	e001      	b.n	8004e6a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004e66:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e6a:	685a      	ldr	r2, [r3, #4]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4902      	ldr	r1, [pc, #8]	; (8004e7c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004e72:	428b      	cmp	r3, r1
 8004e74:	d106      	bne.n	8004e84 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004e76:	4b02      	ldr	r3, [pc, #8]	; (8004e80 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004e78:	e006      	b.n	8004e88 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004e7a:	bf00      	nop
 8004e7c:	40003800 	.word	0x40003800
 8004e80:	40003400 	.word	0x40003400
 8004e84:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e88:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004e8c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	685a      	ldr	r2, [r3, #4]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004e9c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eaa:	f043 0204 	orr.w	r2, r3, #4
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f7ff fdc0 	bl	8004a38 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004eb8:	e000      	b.n	8004ebc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004eba:	bf00      	nop
}
 8004ebc:	bf00      	nop
 8004ebe:	3720      	adds	r7, #32
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}

08004ec4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b083      	sub	sp, #12
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004ecc:	bf00      	nop
 8004ece:	370c      	adds	r7, #12
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr

08004ed8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b082      	sub	sp, #8
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee4:	1c99      	adds	r1, r3, #2
 8004ee6:	687a      	ldr	r2, [r7, #4]
 8004ee8:	6251      	str	r1, [r2, #36]	; 0x24
 8004eea:	881a      	ldrh	r2, [r3, #0]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	3b01      	subs	r3, #1
 8004efa:	b29a      	uxth	r2, r3
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d113      	bne.n	8004f32 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	685a      	ldr	r2, [r3, #4]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004f18:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d106      	bne.n	8004f32 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2201      	movs	r2, #1
 8004f28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f7ff ffc9 	bl	8004ec4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004f32:	bf00      	nop
 8004f34:	3708      	adds	r7, #8
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
	...

08004f3c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b082      	sub	sp, #8
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f48:	1c99      	adds	r1, r3, #2
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	6251      	str	r1, [r2, #36]	; 0x24
 8004f4e:	8819      	ldrh	r1, [r3, #0]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a1d      	ldr	r2, [pc, #116]	; (8004fcc <I2SEx_TxISR_I2SExt+0x90>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d101      	bne.n	8004f5e <I2SEx_TxISR_I2SExt+0x22>
 8004f5a:	4b1d      	ldr	r3, [pc, #116]	; (8004fd0 <I2SEx_TxISR_I2SExt+0x94>)
 8004f5c:	e001      	b.n	8004f62 <I2SEx_TxISR_I2SExt+0x26>
 8004f5e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f62:	460a      	mov	r2, r1
 8004f64:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	3b01      	subs	r3, #1
 8004f6e:	b29a      	uxth	r2, r3
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d121      	bne.n	8004fc2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a12      	ldr	r2, [pc, #72]	; (8004fcc <I2SEx_TxISR_I2SExt+0x90>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d101      	bne.n	8004f8c <I2SEx_TxISR_I2SExt+0x50>
 8004f88:	4b11      	ldr	r3, [pc, #68]	; (8004fd0 <I2SEx_TxISR_I2SExt+0x94>)
 8004f8a:	e001      	b.n	8004f90 <I2SEx_TxISR_I2SExt+0x54>
 8004f8c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f90:	685a      	ldr	r2, [r3, #4]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	490d      	ldr	r1, [pc, #52]	; (8004fcc <I2SEx_TxISR_I2SExt+0x90>)
 8004f98:	428b      	cmp	r3, r1
 8004f9a:	d101      	bne.n	8004fa0 <I2SEx_TxISR_I2SExt+0x64>
 8004f9c:	4b0c      	ldr	r3, [pc, #48]	; (8004fd0 <I2SEx_TxISR_I2SExt+0x94>)
 8004f9e:	e001      	b.n	8004fa4 <I2SEx_TxISR_I2SExt+0x68>
 8004fa0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004fa4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004fa8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d106      	bne.n	8004fc2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f7ff ff81 	bl	8004ec4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004fc2:	bf00      	nop
 8004fc4:	3708      	adds	r7, #8
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
 8004fca:	bf00      	nop
 8004fcc:	40003800 	.word	0x40003800
 8004fd0:	40003400 	.word	0x40003400

08004fd4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b082      	sub	sp, #8
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	68d8      	ldr	r0, [r3, #12]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe6:	1c99      	adds	r1, r3, #2
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004fec:	b282      	uxth	r2, r0
 8004fee:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	3b01      	subs	r3, #1
 8004ff8:	b29a      	uxth	r2, r3
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005002:	b29b      	uxth	r3, r3
 8005004:	2b00      	cmp	r3, #0
 8005006:	d113      	bne.n	8005030 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	685a      	ldr	r2, [r3, #4]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005016:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800501c:	b29b      	uxth	r3, r3
 800501e:	2b00      	cmp	r3, #0
 8005020:	d106      	bne.n	8005030 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2201      	movs	r2, #1
 8005026:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f7ff ff4a 	bl	8004ec4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005030:	bf00      	nop
 8005032:	3708      	adds	r7, #8
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}

08005038 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b082      	sub	sp, #8
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a20      	ldr	r2, [pc, #128]	; (80050c8 <I2SEx_RxISR_I2SExt+0x90>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d101      	bne.n	800504e <I2SEx_RxISR_I2SExt+0x16>
 800504a:	4b20      	ldr	r3, [pc, #128]	; (80050cc <I2SEx_RxISR_I2SExt+0x94>)
 800504c:	e001      	b.n	8005052 <I2SEx_RxISR_I2SExt+0x1a>
 800504e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005052:	68d8      	ldr	r0, [r3, #12]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005058:	1c99      	adds	r1, r3, #2
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800505e:	b282      	uxth	r2, r0
 8005060:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005066:	b29b      	uxth	r3, r3
 8005068:	3b01      	subs	r3, #1
 800506a:	b29a      	uxth	r2, r3
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005074:	b29b      	uxth	r3, r3
 8005076:	2b00      	cmp	r3, #0
 8005078:	d121      	bne.n	80050be <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a12      	ldr	r2, [pc, #72]	; (80050c8 <I2SEx_RxISR_I2SExt+0x90>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d101      	bne.n	8005088 <I2SEx_RxISR_I2SExt+0x50>
 8005084:	4b11      	ldr	r3, [pc, #68]	; (80050cc <I2SEx_RxISR_I2SExt+0x94>)
 8005086:	e001      	b.n	800508c <I2SEx_RxISR_I2SExt+0x54>
 8005088:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800508c:	685a      	ldr	r2, [r3, #4]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	490d      	ldr	r1, [pc, #52]	; (80050c8 <I2SEx_RxISR_I2SExt+0x90>)
 8005094:	428b      	cmp	r3, r1
 8005096:	d101      	bne.n	800509c <I2SEx_RxISR_I2SExt+0x64>
 8005098:	4b0c      	ldr	r3, [pc, #48]	; (80050cc <I2SEx_RxISR_I2SExt+0x94>)
 800509a:	e001      	b.n	80050a0 <I2SEx_RxISR_I2SExt+0x68>
 800509c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80050a0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80050a4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d106      	bne.n	80050be <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f7ff ff03 	bl	8004ec4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80050be:	bf00      	nop
 80050c0:	3708      	adds	r7, #8
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	40003800 	.word	0x40003800
 80050cc:	40003400 	.word	0x40003400

080050d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b086      	sub	sp, #24
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d101      	bne.n	80050e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	e267      	b.n	80055b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 0301 	and.w	r3, r3, #1
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d075      	beq.n	80051da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80050ee:	4b88      	ldr	r3, [pc, #544]	; (8005310 <HAL_RCC_OscConfig+0x240>)
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	f003 030c 	and.w	r3, r3, #12
 80050f6:	2b04      	cmp	r3, #4
 80050f8:	d00c      	beq.n	8005114 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050fa:	4b85      	ldr	r3, [pc, #532]	; (8005310 <HAL_RCC_OscConfig+0x240>)
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005102:	2b08      	cmp	r3, #8
 8005104:	d112      	bne.n	800512c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005106:	4b82      	ldr	r3, [pc, #520]	; (8005310 <HAL_RCC_OscConfig+0x240>)
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800510e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005112:	d10b      	bne.n	800512c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005114:	4b7e      	ldr	r3, [pc, #504]	; (8005310 <HAL_RCC_OscConfig+0x240>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800511c:	2b00      	cmp	r3, #0
 800511e:	d05b      	beq.n	80051d8 <HAL_RCC_OscConfig+0x108>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d157      	bne.n	80051d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	e242      	b.n	80055b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005134:	d106      	bne.n	8005144 <HAL_RCC_OscConfig+0x74>
 8005136:	4b76      	ldr	r3, [pc, #472]	; (8005310 <HAL_RCC_OscConfig+0x240>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a75      	ldr	r2, [pc, #468]	; (8005310 <HAL_RCC_OscConfig+0x240>)
 800513c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005140:	6013      	str	r3, [r2, #0]
 8005142:	e01d      	b.n	8005180 <HAL_RCC_OscConfig+0xb0>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800514c:	d10c      	bne.n	8005168 <HAL_RCC_OscConfig+0x98>
 800514e:	4b70      	ldr	r3, [pc, #448]	; (8005310 <HAL_RCC_OscConfig+0x240>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a6f      	ldr	r2, [pc, #444]	; (8005310 <HAL_RCC_OscConfig+0x240>)
 8005154:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005158:	6013      	str	r3, [r2, #0]
 800515a:	4b6d      	ldr	r3, [pc, #436]	; (8005310 <HAL_RCC_OscConfig+0x240>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a6c      	ldr	r2, [pc, #432]	; (8005310 <HAL_RCC_OscConfig+0x240>)
 8005160:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005164:	6013      	str	r3, [r2, #0]
 8005166:	e00b      	b.n	8005180 <HAL_RCC_OscConfig+0xb0>
 8005168:	4b69      	ldr	r3, [pc, #420]	; (8005310 <HAL_RCC_OscConfig+0x240>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a68      	ldr	r2, [pc, #416]	; (8005310 <HAL_RCC_OscConfig+0x240>)
 800516e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005172:	6013      	str	r3, [r2, #0]
 8005174:	4b66      	ldr	r3, [pc, #408]	; (8005310 <HAL_RCC_OscConfig+0x240>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a65      	ldr	r2, [pc, #404]	; (8005310 <HAL_RCC_OscConfig+0x240>)
 800517a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800517e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d013      	beq.n	80051b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005188:	f7fd fb6e 	bl	8002868 <HAL_GetTick>
 800518c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800518e:	e008      	b.n	80051a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005190:	f7fd fb6a 	bl	8002868 <HAL_GetTick>
 8005194:	4602      	mov	r2, r0
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	1ad3      	subs	r3, r2, r3
 800519a:	2b64      	cmp	r3, #100	; 0x64
 800519c:	d901      	bls.n	80051a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800519e:	2303      	movs	r3, #3
 80051a0:	e207      	b.n	80055b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051a2:	4b5b      	ldr	r3, [pc, #364]	; (8005310 <HAL_RCC_OscConfig+0x240>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d0f0      	beq.n	8005190 <HAL_RCC_OscConfig+0xc0>
 80051ae:	e014      	b.n	80051da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051b0:	f7fd fb5a 	bl	8002868 <HAL_GetTick>
 80051b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051b6:	e008      	b.n	80051ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80051b8:	f7fd fb56 	bl	8002868 <HAL_GetTick>
 80051bc:	4602      	mov	r2, r0
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	1ad3      	subs	r3, r2, r3
 80051c2:	2b64      	cmp	r3, #100	; 0x64
 80051c4:	d901      	bls.n	80051ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80051c6:	2303      	movs	r3, #3
 80051c8:	e1f3      	b.n	80055b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051ca:	4b51      	ldr	r3, [pc, #324]	; (8005310 <HAL_RCC_OscConfig+0x240>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d1f0      	bne.n	80051b8 <HAL_RCC_OscConfig+0xe8>
 80051d6:	e000      	b.n	80051da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f003 0302 	and.w	r3, r3, #2
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d063      	beq.n	80052ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80051e6:	4b4a      	ldr	r3, [pc, #296]	; (8005310 <HAL_RCC_OscConfig+0x240>)
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	f003 030c 	and.w	r3, r3, #12
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d00b      	beq.n	800520a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051f2:	4b47      	ldr	r3, [pc, #284]	; (8005310 <HAL_RCC_OscConfig+0x240>)
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80051fa:	2b08      	cmp	r3, #8
 80051fc:	d11c      	bne.n	8005238 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051fe:	4b44      	ldr	r3, [pc, #272]	; (8005310 <HAL_RCC_OscConfig+0x240>)
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005206:	2b00      	cmp	r3, #0
 8005208:	d116      	bne.n	8005238 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800520a:	4b41      	ldr	r3, [pc, #260]	; (8005310 <HAL_RCC_OscConfig+0x240>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f003 0302 	and.w	r3, r3, #2
 8005212:	2b00      	cmp	r3, #0
 8005214:	d005      	beq.n	8005222 <HAL_RCC_OscConfig+0x152>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	68db      	ldr	r3, [r3, #12]
 800521a:	2b01      	cmp	r3, #1
 800521c:	d001      	beq.n	8005222 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	e1c7      	b.n	80055b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005222:	4b3b      	ldr	r3, [pc, #236]	; (8005310 <HAL_RCC_OscConfig+0x240>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	691b      	ldr	r3, [r3, #16]
 800522e:	00db      	lsls	r3, r3, #3
 8005230:	4937      	ldr	r1, [pc, #220]	; (8005310 <HAL_RCC_OscConfig+0x240>)
 8005232:	4313      	orrs	r3, r2
 8005234:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005236:	e03a      	b.n	80052ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d020      	beq.n	8005282 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005240:	4b34      	ldr	r3, [pc, #208]	; (8005314 <HAL_RCC_OscConfig+0x244>)
 8005242:	2201      	movs	r2, #1
 8005244:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005246:	f7fd fb0f 	bl	8002868 <HAL_GetTick>
 800524a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800524c:	e008      	b.n	8005260 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800524e:	f7fd fb0b 	bl	8002868 <HAL_GetTick>
 8005252:	4602      	mov	r2, r0
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	1ad3      	subs	r3, r2, r3
 8005258:	2b02      	cmp	r3, #2
 800525a:	d901      	bls.n	8005260 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800525c:	2303      	movs	r3, #3
 800525e:	e1a8      	b.n	80055b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005260:	4b2b      	ldr	r3, [pc, #172]	; (8005310 <HAL_RCC_OscConfig+0x240>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 0302 	and.w	r3, r3, #2
 8005268:	2b00      	cmp	r3, #0
 800526a:	d0f0      	beq.n	800524e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800526c:	4b28      	ldr	r3, [pc, #160]	; (8005310 <HAL_RCC_OscConfig+0x240>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	691b      	ldr	r3, [r3, #16]
 8005278:	00db      	lsls	r3, r3, #3
 800527a:	4925      	ldr	r1, [pc, #148]	; (8005310 <HAL_RCC_OscConfig+0x240>)
 800527c:	4313      	orrs	r3, r2
 800527e:	600b      	str	r3, [r1, #0]
 8005280:	e015      	b.n	80052ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005282:	4b24      	ldr	r3, [pc, #144]	; (8005314 <HAL_RCC_OscConfig+0x244>)
 8005284:	2200      	movs	r2, #0
 8005286:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005288:	f7fd faee 	bl	8002868 <HAL_GetTick>
 800528c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800528e:	e008      	b.n	80052a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005290:	f7fd faea 	bl	8002868 <HAL_GetTick>
 8005294:	4602      	mov	r2, r0
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	1ad3      	subs	r3, r2, r3
 800529a:	2b02      	cmp	r3, #2
 800529c:	d901      	bls.n	80052a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800529e:	2303      	movs	r3, #3
 80052a0:	e187      	b.n	80055b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052a2:	4b1b      	ldr	r3, [pc, #108]	; (8005310 <HAL_RCC_OscConfig+0x240>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f003 0302 	and.w	r3, r3, #2
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d1f0      	bne.n	8005290 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f003 0308 	and.w	r3, r3, #8
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d036      	beq.n	8005328 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	695b      	ldr	r3, [r3, #20]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d016      	beq.n	80052f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052c2:	4b15      	ldr	r3, [pc, #84]	; (8005318 <HAL_RCC_OscConfig+0x248>)
 80052c4:	2201      	movs	r2, #1
 80052c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052c8:	f7fd face 	bl	8002868 <HAL_GetTick>
 80052cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052ce:	e008      	b.n	80052e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80052d0:	f7fd faca 	bl	8002868 <HAL_GetTick>
 80052d4:	4602      	mov	r2, r0
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	1ad3      	subs	r3, r2, r3
 80052da:	2b02      	cmp	r3, #2
 80052dc:	d901      	bls.n	80052e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80052de:	2303      	movs	r3, #3
 80052e0:	e167      	b.n	80055b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052e2:	4b0b      	ldr	r3, [pc, #44]	; (8005310 <HAL_RCC_OscConfig+0x240>)
 80052e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052e6:	f003 0302 	and.w	r3, r3, #2
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d0f0      	beq.n	80052d0 <HAL_RCC_OscConfig+0x200>
 80052ee:	e01b      	b.n	8005328 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052f0:	4b09      	ldr	r3, [pc, #36]	; (8005318 <HAL_RCC_OscConfig+0x248>)
 80052f2:	2200      	movs	r2, #0
 80052f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052f6:	f7fd fab7 	bl	8002868 <HAL_GetTick>
 80052fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052fc:	e00e      	b.n	800531c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80052fe:	f7fd fab3 	bl	8002868 <HAL_GetTick>
 8005302:	4602      	mov	r2, r0
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	1ad3      	subs	r3, r2, r3
 8005308:	2b02      	cmp	r3, #2
 800530a:	d907      	bls.n	800531c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800530c:	2303      	movs	r3, #3
 800530e:	e150      	b.n	80055b2 <HAL_RCC_OscConfig+0x4e2>
 8005310:	40023800 	.word	0x40023800
 8005314:	42470000 	.word	0x42470000
 8005318:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800531c:	4b88      	ldr	r3, [pc, #544]	; (8005540 <HAL_RCC_OscConfig+0x470>)
 800531e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005320:	f003 0302 	and.w	r3, r3, #2
 8005324:	2b00      	cmp	r3, #0
 8005326:	d1ea      	bne.n	80052fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f003 0304 	and.w	r3, r3, #4
 8005330:	2b00      	cmp	r3, #0
 8005332:	f000 8097 	beq.w	8005464 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005336:	2300      	movs	r3, #0
 8005338:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800533a:	4b81      	ldr	r3, [pc, #516]	; (8005540 <HAL_RCC_OscConfig+0x470>)
 800533c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005342:	2b00      	cmp	r3, #0
 8005344:	d10f      	bne.n	8005366 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005346:	2300      	movs	r3, #0
 8005348:	60bb      	str	r3, [r7, #8]
 800534a:	4b7d      	ldr	r3, [pc, #500]	; (8005540 <HAL_RCC_OscConfig+0x470>)
 800534c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800534e:	4a7c      	ldr	r2, [pc, #496]	; (8005540 <HAL_RCC_OscConfig+0x470>)
 8005350:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005354:	6413      	str	r3, [r2, #64]	; 0x40
 8005356:	4b7a      	ldr	r3, [pc, #488]	; (8005540 <HAL_RCC_OscConfig+0x470>)
 8005358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800535a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800535e:	60bb      	str	r3, [r7, #8]
 8005360:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005362:	2301      	movs	r3, #1
 8005364:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005366:	4b77      	ldr	r3, [pc, #476]	; (8005544 <HAL_RCC_OscConfig+0x474>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800536e:	2b00      	cmp	r3, #0
 8005370:	d118      	bne.n	80053a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005372:	4b74      	ldr	r3, [pc, #464]	; (8005544 <HAL_RCC_OscConfig+0x474>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a73      	ldr	r2, [pc, #460]	; (8005544 <HAL_RCC_OscConfig+0x474>)
 8005378:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800537c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800537e:	f7fd fa73 	bl	8002868 <HAL_GetTick>
 8005382:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005384:	e008      	b.n	8005398 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005386:	f7fd fa6f 	bl	8002868 <HAL_GetTick>
 800538a:	4602      	mov	r2, r0
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	1ad3      	subs	r3, r2, r3
 8005390:	2b02      	cmp	r3, #2
 8005392:	d901      	bls.n	8005398 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005394:	2303      	movs	r3, #3
 8005396:	e10c      	b.n	80055b2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005398:	4b6a      	ldr	r3, [pc, #424]	; (8005544 <HAL_RCC_OscConfig+0x474>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d0f0      	beq.n	8005386 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d106      	bne.n	80053ba <HAL_RCC_OscConfig+0x2ea>
 80053ac:	4b64      	ldr	r3, [pc, #400]	; (8005540 <HAL_RCC_OscConfig+0x470>)
 80053ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053b0:	4a63      	ldr	r2, [pc, #396]	; (8005540 <HAL_RCC_OscConfig+0x470>)
 80053b2:	f043 0301 	orr.w	r3, r3, #1
 80053b6:	6713      	str	r3, [r2, #112]	; 0x70
 80053b8:	e01c      	b.n	80053f4 <HAL_RCC_OscConfig+0x324>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	2b05      	cmp	r3, #5
 80053c0:	d10c      	bne.n	80053dc <HAL_RCC_OscConfig+0x30c>
 80053c2:	4b5f      	ldr	r3, [pc, #380]	; (8005540 <HAL_RCC_OscConfig+0x470>)
 80053c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053c6:	4a5e      	ldr	r2, [pc, #376]	; (8005540 <HAL_RCC_OscConfig+0x470>)
 80053c8:	f043 0304 	orr.w	r3, r3, #4
 80053cc:	6713      	str	r3, [r2, #112]	; 0x70
 80053ce:	4b5c      	ldr	r3, [pc, #368]	; (8005540 <HAL_RCC_OscConfig+0x470>)
 80053d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053d2:	4a5b      	ldr	r2, [pc, #364]	; (8005540 <HAL_RCC_OscConfig+0x470>)
 80053d4:	f043 0301 	orr.w	r3, r3, #1
 80053d8:	6713      	str	r3, [r2, #112]	; 0x70
 80053da:	e00b      	b.n	80053f4 <HAL_RCC_OscConfig+0x324>
 80053dc:	4b58      	ldr	r3, [pc, #352]	; (8005540 <HAL_RCC_OscConfig+0x470>)
 80053de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053e0:	4a57      	ldr	r2, [pc, #348]	; (8005540 <HAL_RCC_OscConfig+0x470>)
 80053e2:	f023 0301 	bic.w	r3, r3, #1
 80053e6:	6713      	str	r3, [r2, #112]	; 0x70
 80053e8:	4b55      	ldr	r3, [pc, #340]	; (8005540 <HAL_RCC_OscConfig+0x470>)
 80053ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053ec:	4a54      	ldr	r2, [pc, #336]	; (8005540 <HAL_RCC_OscConfig+0x470>)
 80053ee:	f023 0304 	bic.w	r3, r3, #4
 80053f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d015      	beq.n	8005428 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053fc:	f7fd fa34 	bl	8002868 <HAL_GetTick>
 8005400:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005402:	e00a      	b.n	800541a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005404:	f7fd fa30 	bl	8002868 <HAL_GetTick>
 8005408:	4602      	mov	r2, r0
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005412:	4293      	cmp	r3, r2
 8005414:	d901      	bls.n	800541a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005416:	2303      	movs	r3, #3
 8005418:	e0cb      	b.n	80055b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800541a:	4b49      	ldr	r3, [pc, #292]	; (8005540 <HAL_RCC_OscConfig+0x470>)
 800541c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800541e:	f003 0302 	and.w	r3, r3, #2
 8005422:	2b00      	cmp	r3, #0
 8005424:	d0ee      	beq.n	8005404 <HAL_RCC_OscConfig+0x334>
 8005426:	e014      	b.n	8005452 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005428:	f7fd fa1e 	bl	8002868 <HAL_GetTick>
 800542c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800542e:	e00a      	b.n	8005446 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005430:	f7fd fa1a 	bl	8002868 <HAL_GetTick>
 8005434:	4602      	mov	r2, r0
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	1ad3      	subs	r3, r2, r3
 800543a:	f241 3288 	movw	r2, #5000	; 0x1388
 800543e:	4293      	cmp	r3, r2
 8005440:	d901      	bls.n	8005446 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005442:	2303      	movs	r3, #3
 8005444:	e0b5      	b.n	80055b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005446:	4b3e      	ldr	r3, [pc, #248]	; (8005540 <HAL_RCC_OscConfig+0x470>)
 8005448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800544a:	f003 0302 	and.w	r3, r3, #2
 800544e:	2b00      	cmp	r3, #0
 8005450:	d1ee      	bne.n	8005430 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005452:	7dfb      	ldrb	r3, [r7, #23]
 8005454:	2b01      	cmp	r3, #1
 8005456:	d105      	bne.n	8005464 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005458:	4b39      	ldr	r3, [pc, #228]	; (8005540 <HAL_RCC_OscConfig+0x470>)
 800545a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545c:	4a38      	ldr	r2, [pc, #224]	; (8005540 <HAL_RCC_OscConfig+0x470>)
 800545e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005462:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	699b      	ldr	r3, [r3, #24]
 8005468:	2b00      	cmp	r3, #0
 800546a:	f000 80a1 	beq.w	80055b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800546e:	4b34      	ldr	r3, [pc, #208]	; (8005540 <HAL_RCC_OscConfig+0x470>)
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	f003 030c 	and.w	r3, r3, #12
 8005476:	2b08      	cmp	r3, #8
 8005478:	d05c      	beq.n	8005534 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	699b      	ldr	r3, [r3, #24]
 800547e:	2b02      	cmp	r3, #2
 8005480:	d141      	bne.n	8005506 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005482:	4b31      	ldr	r3, [pc, #196]	; (8005548 <HAL_RCC_OscConfig+0x478>)
 8005484:	2200      	movs	r2, #0
 8005486:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005488:	f7fd f9ee 	bl	8002868 <HAL_GetTick>
 800548c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800548e:	e008      	b.n	80054a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005490:	f7fd f9ea 	bl	8002868 <HAL_GetTick>
 8005494:	4602      	mov	r2, r0
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	1ad3      	subs	r3, r2, r3
 800549a:	2b02      	cmp	r3, #2
 800549c:	d901      	bls.n	80054a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800549e:	2303      	movs	r3, #3
 80054a0:	e087      	b.n	80055b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054a2:	4b27      	ldr	r3, [pc, #156]	; (8005540 <HAL_RCC_OscConfig+0x470>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d1f0      	bne.n	8005490 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	69da      	ldr	r2, [r3, #28]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6a1b      	ldr	r3, [r3, #32]
 80054b6:	431a      	orrs	r2, r3
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054bc:	019b      	lsls	r3, r3, #6
 80054be:	431a      	orrs	r2, r3
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054c4:	085b      	lsrs	r3, r3, #1
 80054c6:	3b01      	subs	r3, #1
 80054c8:	041b      	lsls	r3, r3, #16
 80054ca:	431a      	orrs	r2, r3
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d0:	061b      	lsls	r3, r3, #24
 80054d2:	491b      	ldr	r1, [pc, #108]	; (8005540 <HAL_RCC_OscConfig+0x470>)
 80054d4:	4313      	orrs	r3, r2
 80054d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054d8:	4b1b      	ldr	r3, [pc, #108]	; (8005548 <HAL_RCC_OscConfig+0x478>)
 80054da:	2201      	movs	r2, #1
 80054dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054de:	f7fd f9c3 	bl	8002868 <HAL_GetTick>
 80054e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054e4:	e008      	b.n	80054f8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054e6:	f7fd f9bf 	bl	8002868 <HAL_GetTick>
 80054ea:	4602      	mov	r2, r0
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	1ad3      	subs	r3, r2, r3
 80054f0:	2b02      	cmp	r3, #2
 80054f2:	d901      	bls.n	80054f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80054f4:	2303      	movs	r3, #3
 80054f6:	e05c      	b.n	80055b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054f8:	4b11      	ldr	r3, [pc, #68]	; (8005540 <HAL_RCC_OscConfig+0x470>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005500:	2b00      	cmp	r3, #0
 8005502:	d0f0      	beq.n	80054e6 <HAL_RCC_OscConfig+0x416>
 8005504:	e054      	b.n	80055b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005506:	4b10      	ldr	r3, [pc, #64]	; (8005548 <HAL_RCC_OscConfig+0x478>)
 8005508:	2200      	movs	r2, #0
 800550a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800550c:	f7fd f9ac 	bl	8002868 <HAL_GetTick>
 8005510:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005512:	e008      	b.n	8005526 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005514:	f7fd f9a8 	bl	8002868 <HAL_GetTick>
 8005518:	4602      	mov	r2, r0
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	1ad3      	subs	r3, r2, r3
 800551e:	2b02      	cmp	r3, #2
 8005520:	d901      	bls.n	8005526 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005522:	2303      	movs	r3, #3
 8005524:	e045      	b.n	80055b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005526:	4b06      	ldr	r3, [pc, #24]	; (8005540 <HAL_RCC_OscConfig+0x470>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800552e:	2b00      	cmp	r3, #0
 8005530:	d1f0      	bne.n	8005514 <HAL_RCC_OscConfig+0x444>
 8005532:	e03d      	b.n	80055b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	699b      	ldr	r3, [r3, #24]
 8005538:	2b01      	cmp	r3, #1
 800553a:	d107      	bne.n	800554c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	e038      	b.n	80055b2 <HAL_RCC_OscConfig+0x4e2>
 8005540:	40023800 	.word	0x40023800
 8005544:	40007000 	.word	0x40007000
 8005548:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800554c:	4b1b      	ldr	r3, [pc, #108]	; (80055bc <HAL_RCC_OscConfig+0x4ec>)
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	699b      	ldr	r3, [r3, #24]
 8005556:	2b01      	cmp	r3, #1
 8005558:	d028      	beq.n	80055ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005564:	429a      	cmp	r2, r3
 8005566:	d121      	bne.n	80055ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005572:	429a      	cmp	r2, r3
 8005574:	d11a      	bne.n	80055ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005576:	68fa      	ldr	r2, [r7, #12]
 8005578:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800557c:	4013      	ands	r3, r2
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005582:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005584:	4293      	cmp	r3, r2
 8005586:	d111      	bne.n	80055ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005592:	085b      	lsrs	r3, r3, #1
 8005594:	3b01      	subs	r3, #1
 8005596:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005598:	429a      	cmp	r2, r3
 800559a:	d107      	bne.n	80055ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d001      	beq.n	80055b0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	e000      	b.n	80055b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80055b0:	2300      	movs	r3, #0
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3718      	adds	r7, #24
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}
 80055ba:	bf00      	nop
 80055bc:	40023800 	.word	0x40023800

080055c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b084      	sub	sp, #16
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
 80055c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d101      	bne.n	80055d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	e0cc      	b.n	800576e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80055d4:	4b68      	ldr	r3, [pc, #416]	; (8005778 <HAL_RCC_ClockConfig+0x1b8>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f003 0307 	and.w	r3, r3, #7
 80055dc:	683a      	ldr	r2, [r7, #0]
 80055de:	429a      	cmp	r2, r3
 80055e0:	d90c      	bls.n	80055fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055e2:	4b65      	ldr	r3, [pc, #404]	; (8005778 <HAL_RCC_ClockConfig+0x1b8>)
 80055e4:	683a      	ldr	r2, [r7, #0]
 80055e6:	b2d2      	uxtb	r2, r2
 80055e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055ea:	4b63      	ldr	r3, [pc, #396]	; (8005778 <HAL_RCC_ClockConfig+0x1b8>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f003 0307 	and.w	r3, r3, #7
 80055f2:	683a      	ldr	r2, [r7, #0]
 80055f4:	429a      	cmp	r2, r3
 80055f6:	d001      	beq.n	80055fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	e0b8      	b.n	800576e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f003 0302 	and.w	r3, r3, #2
 8005604:	2b00      	cmp	r3, #0
 8005606:	d020      	beq.n	800564a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f003 0304 	and.w	r3, r3, #4
 8005610:	2b00      	cmp	r3, #0
 8005612:	d005      	beq.n	8005620 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005614:	4b59      	ldr	r3, [pc, #356]	; (800577c <HAL_RCC_ClockConfig+0x1bc>)
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	4a58      	ldr	r2, [pc, #352]	; (800577c <HAL_RCC_ClockConfig+0x1bc>)
 800561a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800561e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 0308 	and.w	r3, r3, #8
 8005628:	2b00      	cmp	r3, #0
 800562a:	d005      	beq.n	8005638 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800562c:	4b53      	ldr	r3, [pc, #332]	; (800577c <HAL_RCC_ClockConfig+0x1bc>)
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	4a52      	ldr	r2, [pc, #328]	; (800577c <HAL_RCC_ClockConfig+0x1bc>)
 8005632:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005636:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005638:	4b50      	ldr	r3, [pc, #320]	; (800577c <HAL_RCC_ClockConfig+0x1bc>)
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	494d      	ldr	r1, [pc, #308]	; (800577c <HAL_RCC_ClockConfig+0x1bc>)
 8005646:	4313      	orrs	r3, r2
 8005648:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f003 0301 	and.w	r3, r3, #1
 8005652:	2b00      	cmp	r3, #0
 8005654:	d044      	beq.n	80056e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	2b01      	cmp	r3, #1
 800565c:	d107      	bne.n	800566e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800565e:	4b47      	ldr	r3, [pc, #284]	; (800577c <HAL_RCC_ClockConfig+0x1bc>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005666:	2b00      	cmp	r3, #0
 8005668:	d119      	bne.n	800569e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	e07f      	b.n	800576e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	2b02      	cmp	r3, #2
 8005674:	d003      	beq.n	800567e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800567a:	2b03      	cmp	r3, #3
 800567c:	d107      	bne.n	800568e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800567e:	4b3f      	ldr	r3, [pc, #252]	; (800577c <HAL_RCC_ClockConfig+0x1bc>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005686:	2b00      	cmp	r3, #0
 8005688:	d109      	bne.n	800569e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	e06f      	b.n	800576e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800568e:	4b3b      	ldr	r3, [pc, #236]	; (800577c <HAL_RCC_ClockConfig+0x1bc>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 0302 	and.w	r3, r3, #2
 8005696:	2b00      	cmp	r3, #0
 8005698:	d101      	bne.n	800569e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	e067      	b.n	800576e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800569e:	4b37      	ldr	r3, [pc, #220]	; (800577c <HAL_RCC_ClockConfig+0x1bc>)
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	f023 0203 	bic.w	r2, r3, #3
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	4934      	ldr	r1, [pc, #208]	; (800577c <HAL_RCC_ClockConfig+0x1bc>)
 80056ac:	4313      	orrs	r3, r2
 80056ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80056b0:	f7fd f8da 	bl	8002868 <HAL_GetTick>
 80056b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056b6:	e00a      	b.n	80056ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056b8:	f7fd f8d6 	bl	8002868 <HAL_GetTick>
 80056bc:	4602      	mov	r2, r0
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d901      	bls.n	80056ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80056ca:	2303      	movs	r3, #3
 80056cc:	e04f      	b.n	800576e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056ce:	4b2b      	ldr	r3, [pc, #172]	; (800577c <HAL_RCC_ClockConfig+0x1bc>)
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	f003 020c 	and.w	r2, r3, #12
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	009b      	lsls	r3, r3, #2
 80056dc:	429a      	cmp	r2, r3
 80056de:	d1eb      	bne.n	80056b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80056e0:	4b25      	ldr	r3, [pc, #148]	; (8005778 <HAL_RCC_ClockConfig+0x1b8>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f003 0307 	and.w	r3, r3, #7
 80056e8:	683a      	ldr	r2, [r7, #0]
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d20c      	bcs.n	8005708 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056ee:	4b22      	ldr	r3, [pc, #136]	; (8005778 <HAL_RCC_ClockConfig+0x1b8>)
 80056f0:	683a      	ldr	r2, [r7, #0]
 80056f2:	b2d2      	uxtb	r2, r2
 80056f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056f6:	4b20      	ldr	r3, [pc, #128]	; (8005778 <HAL_RCC_ClockConfig+0x1b8>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f003 0307 	and.w	r3, r3, #7
 80056fe:	683a      	ldr	r2, [r7, #0]
 8005700:	429a      	cmp	r2, r3
 8005702:	d001      	beq.n	8005708 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005704:	2301      	movs	r3, #1
 8005706:	e032      	b.n	800576e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f003 0304 	and.w	r3, r3, #4
 8005710:	2b00      	cmp	r3, #0
 8005712:	d008      	beq.n	8005726 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005714:	4b19      	ldr	r3, [pc, #100]	; (800577c <HAL_RCC_ClockConfig+0x1bc>)
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	68db      	ldr	r3, [r3, #12]
 8005720:	4916      	ldr	r1, [pc, #88]	; (800577c <HAL_RCC_ClockConfig+0x1bc>)
 8005722:	4313      	orrs	r3, r2
 8005724:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f003 0308 	and.w	r3, r3, #8
 800572e:	2b00      	cmp	r3, #0
 8005730:	d009      	beq.n	8005746 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005732:	4b12      	ldr	r3, [pc, #72]	; (800577c <HAL_RCC_ClockConfig+0x1bc>)
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	691b      	ldr	r3, [r3, #16]
 800573e:	00db      	lsls	r3, r3, #3
 8005740:	490e      	ldr	r1, [pc, #56]	; (800577c <HAL_RCC_ClockConfig+0x1bc>)
 8005742:	4313      	orrs	r3, r2
 8005744:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005746:	f000 f821 	bl	800578c <HAL_RCC_GetSysClockFreq>
 800574a:	4602      	mov	r2, r0
 800574c:	4b0b      	ldr	r3, [pc, #44]	; (800577c <HAL_RCC_ClockConfig+0x1bc>)
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	091b      	lsrs	r3, r3, #4
 8005752:	f003 030f 	and.w	r3, r3, #15
 8005756:	490a      	ldr	r1, [pc, #40]	; (8005780 <HAL_RCC_ClockConfig+0x1c0>)
 8005758:	5ccb      	ldrb	r3, [r1, r3]
 800575a:	fa22 f303 	lsr.w	r3, r2, r3
 800575e:	4a09      	ldr	r2, [pc, #36]	; (8005784 <HAL_RCC_ClockConfig+0x1c4>)
 8005760:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005762:	4b09      	ldr	r3, [pc, #36]	; (8005788 <HAL_RCC_ClockConfig+0x1c8>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4618      	mov	r0, r3
 8005768:	f7fd f83a 	bl	80027e0 <HAL_InitTick>

  return HAL_OK;
 800576c:	2300      	movs	r3, #0
}
 800576e:	4618      	mov	r0, r3
 8005770:	3710      	adds	r7, #16
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
 8005776:	bf00      	nop
 8005778:	40023c00 	.word	0x40023c00
 800577c:	40023800 	.word	0x40023800
 8005780:	0800b370 	.word	0x0800b370
 8005784:	20000004 	.word	0x20000004
 8005788:	20000008 	.word	0x20000008

0800578c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800578c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005790:	b094      	sub	sp, #80	; 0x50
 8005792:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005794:	2300      	movs	r3, #0
 8005796:	647b      	str	r3, [r7, #68]	; 0x44
 8005798:	2300      	movs	r3, #0
 800579a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800579c:	2300      	movs	r3, #0
 800579e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80057a0:	2300      	movs	r3, #0
 80057a2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80057a4:	4b79      	ldr	r3, [pc, #484]	; (800598c <HAL_RCC_GetSysClockFreq+0x200>)
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	f003 030c 	and.w	r3, r3, #12
 80057ac:	2b08      	cmp	r3, #8
 80057ae:	d00d      	beq.n	80057cc <HAL_RCC_GetSysClockFreq+0x40>
 80057b0:	2b08      	cmp	r3, #8
 80057b2:	f200 80e1 	bhi.w	8005978 <HAL_RCC_GetSysClockFreq+0x1ec>
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d002      	beq.n	80057c0 <HAL_RCC_GetSysClockFreq+0x34>
 80057ba:	2b04      	cmp	r3, #4
 80057bc:	d003      	beq.n	80057c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80057be:	e0db      	b.n	8005978 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80057c0:	4b73      	ldr	r3, [pc, #460]	; (8005990 <HAL_RCC_GetSysClockFreq+0x204>)
 80057c2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80057c4:	e0db      	b.n	800597e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80057c6:	4b73      	ldr	r3, [pc, #460]	; (8005994 <HAL_RCC_GetSysClockFreq+0x208>)
 80057c8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80057ca:	e0d8      	b.n	800597e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80057cc:	4b6f      	ldr	r3, [pc, #444]	; (800598c <HAL_RCC_GetSysClockFreq+0x200>)
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80057d4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80057d6:	4b6d      	ldr	r3, [pc, #436]	; (800598c <HAL_RCC_GetSysClockFreq+0x200>)
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d063      	beq.n	80058aa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057e2:	4b6a      	ldr	r3, [pc, #424]	; (800598c <HAL_RCC_GetSysClockFreq+0x200>)
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	099b      	lsrs	r3, r3, #6
 80057e8:	2200      	movs	r2, #0
 80057ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80057ec:	63fa      	str	r2, [r7, #60]	; 0x3c
 80057ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057f4:	633b      	str	r3, [r7, #48]	; 0x30
 80057f6:	2300      	movs	r3, #0
 80057f8:	637b      	str	r3, [r7, #52]	; 0x34
 80057fa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80057fe:	4622      	mov	r2, r4
 8005800:	462b      	mov	r3, r5
 8005802:	f04f 0000 	mov.w	r0, #0
 8005806:	f04f 0100 	mov.w	r1, #0
 800580a:	0159      	lsls	r1, r3, #5
 800580c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005810:	0150      	lsls	r0, r2, #5
 8005812:	4602      	mov	r2, r0
 8005814:	460b      	mov	r3, r1
 8005816:	4621      	mov	r1, r4
 8005818:	1a51      	subs	r1, r2, r1
 800581a:	6139      	str	r1, [r7, #16]
 800581c:	4629      	mov	r1, r5
 800581e:	eb63 0301 	sbc.w	r3, r3, r1
 8005822:	617b      	str	r3, [r7, #20]
 8005824:	f04f 0200 	mov.w	r2, #0
 8005828:	f04f 0300 	mov.w	r3, #0
 800582c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005830:	4659      	mov	r1, fp
 8005832:	018b      	lsls	r3, r1, #6
 8005834:	4651      	mov	r1, sl
 8005836:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800583a:	4651      	mov	r1, sl
 800583c:	018a      	lsls	r2, r1, #6
 800583e:	4651      	mov	r1, sl
 8005840:	ebb2 0801 	subs.w	r8, r2, r1
 8005844:	4659      	mov	r1, fp
 8005846:	eb63 0901 	sbc.w	r9, r3, r1
 800584a:	f04f 0200 	mov.w	r2, #0
 800584e:	f04f 0300 	mov.w	r3, #0
 8005852:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005856:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800585a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800585e:	4690      	mov	r8, r2
 8005860:	4699      	mov	r9, r3
 8005862:	4623      	mov	r3, r4
 8005864:	eb18 0303 	adds.w	r3, r8, r3
 8005868:	60bb      	str	r3, [r7, #8]
 800586a:	462b      	mov	r3, r5
 800586c:	eb49 0303 	adc.w	r3, r9, r3
 8005870:	60fb      	str	r3, [r7, #12]
 8005872:	f04f 0200 	mov.w	r2, #0
 8005876:	f04f 0300 	mov.w	r3, #0
 800587a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800587e:	4629      	mov	r1, r5
 8005880:	024b      	lsls	r3, r1, #9
 8005882:	4621      	mov	r1, r4
 8005884:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005888:	4621      	mov	r1, r4
 800588a:	024a      	lsls	r2, r1, #9
 800588c:	4610      	mov	r0, r2
 800588e:	4619      	mov	r1, r3
 8005890:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005892:	2200      	movs	r2, #0
 8005894:	62bb      	str	r3, [r7, #40]	; 0x28
 8005896:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005898:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800589c:	f7fb f958 	bl	8000b50 <__aeabi_uldivmod>
 80058a0:	4602      	mov	r2, r0
 80058a2:	460b      	mov	r3, r1
 80058a4:	4613      	mov	r3, r2
 80058a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058a8:	e058      	b.n	800595c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80058aa:	4b38      	ldr	r3, [pc, #224]	; (800598c <HAL_RCC_GetSysClockFreq+0x200>)
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	099b      	lsrs	r3, r3, #6
 80058b0:	2200      	movs	r2, #0
 80058b2:	4618      	mov	r0, r3
 80058b4:	4611      	mov	r1, r2
 80058b6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80058ba:	623b      	str	r3, [r7, #32]
 80058bc:	2300      	movs	r3, #0
 80058be:	627b      	str	r3, [r7, #36]	; 0x24
 80058c0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80058c4:	4642      	mov	r2, r8
 80058c6:	464b      	mov	r3, r9
 80058c8:	f04f 0000 	mov.w	r0, #0
 80058cc:	f04f 0100 	mov.w	r1, #0
 80058d0:	0159      	lsls	r1, r3, #5
 80058d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80058d6:	0150      	lsls	r0, r2, #5
 80058d8:	4602      	mov	r2, r0
 80058da:	460b      	mov	r3, r1
 80058dc:	4641      	mov	r1, r8
 80058de:	ebb2 0a01 	subs.w	sl, r2, r1
 80058e2:	4649      	mov	r1, r9
 80058e4:	eb63 0b01 	sbc.w	fp, r3, r1
 80058e8:	f04f 0200 	mov.w	r2, #0
 80058ec:	f04f 0300 	mov.w	r3, #0
 80058f0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80058f4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80058f8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80058fc:	ebb2 040a 	subs.w	r4, r2, sl
 8005900:	eb63 050b 	sbc.w	r5, r3, fp
 8005904:	f04f 0200 	mov.w	r2, #0
 8005908:	f04f 0300 	mov.w	r3, #0
 800590c:	00eb      	lsls	r3, r5, #3
 800590e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005912:	00e2      	lsls	r2, r4, #3
 8005914:	4614      	mov	r4, r2
 8005916:	461d      	mov	r5, r3
 8005918:	4643      	mov	r3, r8
 800591a:	18e3      	adds	r3, r4, r3
 800591c:	603b      	str	r3, [r7, #0]
 800591e:	464b      	mov	r3, r9
 8005920:	eb45 0303 	adc.w	r3, r5, r3
 8005924:	607b      	str	r3, [r7, #4]
 8005926:	f04f 0200 	mov.w	r2, #0
 800592a:	f04f 0300 	mov.w	r3, #0
 800592e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005932:	4629      	mov	r1, r5
 8005934:	028b      	lsls	r3, r1, #10
 8005936:	4621      	mov	r1, r4
 8005938:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800593c:	4621      	mov	r1, r4
 800593e:	028a      	lsls	r2, r1, #10
 8005940:	4610      	mov	r0, r2
 8005942:	4619      	mov	r1, r3
 8005944:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005946:	2200      	movs	r2, #0
 8005948:	61bb      	str	r3, [r7, #24]
 800594a:	61fa      	str	r2, [r7, #28]
 800594c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005950:	f7fb f8fe 	bl	8000b50 <__aeabi_uldivmod>
 8005954:	4602      	mov	r2, r0
 8005956:	460b      	mov	r3, r1
 8005958:	4613      	mov	r3, r2
 800595a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800595c:	4b0b      	ldr	r3, [pc, #44]	; (800598c <HAL_RCC_GetSysClockFreq+0x200>)
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	0c1b      	lsrs	r3, r3, #16
 8005962:	f003 0303 	and.w	r3, r3, #3
 8005966:	3301      	adds	r3, #1
 8005968:	005b      	lsls	r3, r3, #1
 800596a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800596c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800596e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005970:	fbb2 f3f3 	udiv	r3, r2, r3
 8005974:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005976:	e002      	b.n	800597e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005978:	4b05      	ldr	r3, [pc, #20]	; (8005990 <HAL_RCC_GetSysClockFreq+0x204>)
 800597a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800597c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800597e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005980:	4618      	mov	r0, r3
 8005982:	3750      	adds	r7, #80	; 0x50
 8005984:	46bd      	mov	sp, r7
 8005986:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800598a:	bf00      	nop
 800598c:	40023800 	.word	0x40023800
 8005990:	00f42400 	.word	0x00f42400
 8005994:	007a1200 	.word	0x007a1200

08005998 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005998:	b480      	push	{r7}
 800599a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800599c:	4b03      	ldr	r3, [pc, #12]	; (80059ac <HAL_RCC_GetHCLKFreq+0x14>)
 800599e:	681b      	ldr	r3, [r3, #0]
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	46bd      	mov	sp, r7
 80059a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a8:	4770      	bx	lr
 80059aa:	bf00      	nop
 80059ac:	20000004 	.word	0x20000004

080059b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80059b4:	f7ff fff0 	bl	8005998 <HAL_RCC_GetHCLKFreq>
 80059b8:	4602      	mov	r2, r0
 80059ba:	4b05      	ldr	r3, [pc, #20]	; (80059d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	0a9b      	lsrs	r3, r3, #10
 80059c0:	f003 0307 	and.w	r3, r3, #7
 80059c4:	4903      	ldr	r1, [pc, #12]	; (80059d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80059c6:	5ccb      	ldrb	r3, [r1, r3]
 80059c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	bd80      	pop	{r7, pc}
 80059d0:	40023800 	.word	0x40023800
 80059d4:	0800b380 	.word	0x0800b380

080059d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80059dc:	f7ff ffdc 	bl	8005998 <HAL_RCC_GetHCLKFreq>
 80059e0:	4602      	mov	r2, r0
 80059e2:	4b05      	ldr	r3, [pc, #20]	; (80059f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	0b5b      	lsrs	r3, r3, #13
 80059e8:	f003 0307 	and.w	r3, r3, #7
 80059ec:	4903      	ldr	r1, [pc, #12]	; (80059fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80059ee:	5ccb      	ldrb	r3, [r1, r3]
 80059f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	bd80      	pop	{r7, pc}
 80059f8:	40023800 	.word	0x40023800
 80059fc:	0800b380 	.word	0x0800b380

08005a00 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b086      	sub	sp, #24
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f003 0301 	and.w	r3, r3, #1
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d105      	bne.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d035      	beq.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005a28:	4b62      	ldr	r3, [pc, #392]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005a2e:	f7fc ff1b 	bl	8002868 <HAL_GetTick>
 8005a32:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005a34:	e008      	b.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005a36:	f7fc ff17 	bl	8002868 <HAL_GetTick>
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	1ad3      	subs	r3, r2, r3
 8005a40:	2b02      	cmp	r3, #2
 8005a42:	d901      	bls.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a44:	2303      	movs	r3, #3
 8005a46:	e0b0      	b.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005a48:	4b5b      	ldr	r3, [pc, #364]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d1f0      	bne.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	019a      	lsls	r2, r3, #6
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	071b      	lsls	r3, r3, #28
 8005a60:	4955      	ldr	r1, [pc, #340]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a62:	4313      	orrs	r3, r2
 8005a64:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005a68:	4b52      	ldr	r3, [pc, #328]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005a6e:	f7fc fefb 	bl	8002868 <HAL_GetTick>
 8005a72:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005a74:	e008      	b.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005a76:	f7fc fef7 	bl	8002868 <HAL_GetTick>
 8005a7a:	4602      	mov	r2, r0
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	1ad3      	subs	r3, r2, r3
 8005a80:	2b02      	cmp	r3, #2
 8005a82:	d901      	bls.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a84:	2303      	movs	r3, #3
 8005a86:	e090      	b.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005a88:	4b4b      	ldr	r3, [pc, #300]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d0f0      	beq.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f003 0302 	and.w	r3, r3, #2
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	f000 8083 	beq.w	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	60fb      	str	r3, [r7, #12]
 8005aa6:	4b44      	ldr	r3, [pc, #272]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aaa:	4a43      	ldr	r2, [pc, #268]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005aac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ab0:	6413      	str	r3, [r2, #64]	; 0x40
 8005ab2:	4b41      	ldr	r3, [pc, #260]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005aba:	60fb      	str	r3, [r7, #12]
 8005abc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005abe:	4b3f      	ldr	r3, [pc, #252]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a3e      	ldr	r2, [pc, #248]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005ac4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ac8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005aca:	f7fc fecd 	bl	8002868 <HAL_GetTick>
 8005ace:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005ad0:	e008      	b.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005ad2:	f7fc fec9 	bl	8002868 <HAL_GetTick>
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	1ad3      	subs	r3, r2, r3
 8005adc:	2b02      	cmp	r3, #2
 8005ade:	d901      	bls.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005ae0:	2303      	movs	r3, #3
 8005ae2:	e062      	b.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005ae4:	4b35      	ldr	r3, [pc, #212]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d0f0      	beq.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005af0:	4b31      	ldr	r3, [pc, #196]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005af4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005af8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d02f      	beq.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	68db      	ldr	r3, [r3, #12]
 8005b04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b08:	693a      	ldr	r2, [r7, #16]
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d028      	beq.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005b0e:	4b2a      	ldr	r3, [pc, #168]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b16:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005b18:	4b29      	ldr	r3, [pc, #164]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005b1e:	4b28      	ldr	r3, [pc, #160]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005b20:	2200      	movs	r2, #0
 8005b22:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005b24:	4a24      	ldr	r2, [pc, #144]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005b2a:	4b23      	ldr	r3, [pc, #140]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b2e:	f003 0301 	and.w	r3, r3, #1
 8005b32:	2b01      	cmp	r3, #1
 8005b34:	d114      	bne.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005b36:	f7fc fe97 	bl	8002868 <HAL_GetTick>
 8005b3a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b3c:	e00a      	b.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b3e:	f7fc fe93 	bl	8002868 <HAL_GetTick>
 8005b42:	4602      	mov	r2, r0
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	1ad3      	subs	r3, r2, r3
 8005b48:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d901      	bls.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005b50:	2303      	movs	r3, #3
 8005b52:	e02a      	b.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b54:	4b18      	ldr	r3, [pc, #96]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b58:	f003 0302 	and.w	r3, r3, #2
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d0ee      	beq.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	68db      	ldr	r3, [r3, #12]
 8005b64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b6c:	d10d      	bne.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005b6e:	4b12      	ldr	r3, [pc, #72]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	68db      	ldr	r3, [r3, #12]
 8005b7a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005b7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b82:	490d      	ldr	r1, [pc, #52]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b84:	4313      	orrs	r3, r2
 8005b86:	608b      	str	r3, [r1, #8]
 8005b88:	e005      	b.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005b8a:	4b0b      	ldr	r3, [pc, #44]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b8c:	689b      	ldr	r3, [r3, #8]
 8005b8e:	4a0a      	ldr	r2, [pc, #40]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b90:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005b94:	6093      	str	r3, [r2, #8]
 8005b96:	4b08      	ldr	r3, [pc, #32]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b98:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	68db      	ldr	r3, [r3, #12]
 8005b9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ba2:	4905      	ldr	r1, [pc, #20]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005ba8:	2300      	movs	r3, #0
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3718      	adds	r7, #24
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}
 8005bb2:	bf00      	nop
 8005bb4:	42470068 	.word	0x42470068
 8005bb8:	40023800 	.word	0x40023800
 8005bbc:	40007000 	.word	0x40007000
 8005bc0:	42470e40 	.word	0x42470e40

08005bc4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b087      	sub	sp, #28
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005bd8:	2300      	movs	r3, #0
 8005bda:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2b01      	cmp	r3, #1
 8005be0:	d13e      	bne.n	8005c60 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005be2:	4b23      	ldr	r3, [pc, #140]	; (8005c70 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005bea:	60fb      	str	r3, [r7, #12]
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d005      	beq.n	8005bfe <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d12f      	bne.n	8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005bf8:	4b1e      	ldr	r3, [pc, #120]	; (8005c74 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005bfa:	617b      	str	r3, [r7, #20]
          break;
 8005bfc:	e02f      	b.n	8005c5e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005bfe:	4b1c      	ldr	r3, [pc, #112]	; (8005c70 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c0a:	d108      	bne.n	8005c1e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005c0c:	4b18      	ldr	r3, [pc, #96]	; (8005c70 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c14:	4a18      	ldr	r2, [pc, #96]	; (8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c1a:	613b      	str	r3, [r7, #16]
 8005c1c:	e007      	b.n	8005c2e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005c1e:	4b14      	ldr	r3, [pc, #80]	; (8005c70 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c26:	4a15      	ldr	r2, [pc, #84]	; (8005c7c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c2c:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005c2e:	4b10      	ldr	r3, [pc, #64]	; (8005c70 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005c30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c34:	099b      	lsrs	r3, r3, #6
 8005c36:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	fb02 f303 	mul.w	r3, r2, r3
 8005c40:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005c42:	4b0b      	ldr	r3, [pc, #44]	; (8005c70 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005c44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c48:	0f1b      	lsrs	r3, r3, #28
 8005c4a:	f003 0307 	and.w	r3, r3, #7
 8005c4e:	68ba      	ldr	r2, [r7, #8]
 8005c50:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c54:	617b      	str	r3, [r7, #20]
          break;
 8005c56:	e002      	b.n	8005c5e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	617b      	str	r3, [r7, #20]
          break;
 8005c5c:	bf00      	nop
        }
      }
      break;
 8005c5e:	bf00      	nop
    }
  }
  return frequency;
 8005c60:	697b      	ldr	r3, [r7, #20]
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	371c      	adds	r7, #28
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr
 8005c6e:	bf00      	nop
 8005c70:	40023800 	.word	0x40023800
 8005c74:	00bb8000 	.word	0x00bb8000
 8005c78:	007a1200 	.word	0x007a1200
 8005c7c:	00f42400 	.word	0x00f42400

08005c80 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b082      	sub	sp, #8
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d101      	bne.n	8005c92 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e07b      	b.n	8005d8a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d108      	bne.n	8005cac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ca2:	d009      	beq.n	8005cb8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	61da      	str	r2, [r3, #28]
 8005caa:	e005      	b.n	8005cb8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005cc4:	b2db      	uxtb	r3, r3
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d106      	bne.n	8005cd8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f7fc fbc6 	bl	8002464 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2202      	movs	r2, #2
 8005cdc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005d00:	431a      	orrs	r2, r3
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	68db      	ldr	r3, [r3, #12]
 8005d06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d0a:	431a      	orrs	r2, r3
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	691b      	ldr	r3, [r3, #16]
 8005d10:	f003 0302 	and.w	r3, r3, #2
 8005d14:	431a      	orrs	r2, r3
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	695b      	ldr	r3, [r3, #20]
 8005d1a:	f003 0301 	and.w	r3, r3, #1
 8005d1e:	431a      	orrs	r2, r3
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	699b      	ldr	r3, [r3, #24]
 8005d24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d28:	431a      	orrs	r2, r3
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	69db      	ldr	r3, [r3, #28]
 8005d2e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d32:	431a      	orrs	r2, r3
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6a1b      	ldr	r3, [r3, #32]
 8005d38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d3c:	ea42 0103 	orr.w	r1, r2, r3
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d44:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	430a      	orrs	r2, r1
 8005d4e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	699b      	ldr	r3, [r3, #24]
 8005d54:	0c1b      	lsrs	r3, r3, #16
 8005d56:	f003 0104 	and.w	r1, r3, #4
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d5e:	f003 0210 	and.w	r2, r3, #16
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	430a      	orrs	r2, r1
 8005d68:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	69da      	ldr	r2, [r3, #28]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d78:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2201      	movs	r2, #1
 8005d84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005d88:	2300      	movs	r3, #0
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3708      	adds	r7, #8
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}

08005d92 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d92:	b580      	push	{r7, lr}
 8005d94:	b082      	sub	sp, #8
 8005d96:	af00      	add	r7, sp, #0
 8005d98:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d101      	bne.n	8005da4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005da0:	2301      	movs	r3, #1
 8005da2:	e03f      	b.n	8005e24 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005daa:	b2db      	uxtb	r3, r3
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d106      	bne.n	8005dbe <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2200      	movs	r2, #0
 8005db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f7fc fb9b 	bl	80024f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2224      	movs	r2, #36	; 0x24
 8005dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	68da      	ldr	r2, [r3, #12]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005dd4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f000 fc7a 	bl	80066d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	691a      	ldr	r2, [r3, #16]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005dea:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	695a      	ldr	r2, [r3, #20]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005dfa:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	68da      	ldr	r2, [r3, #12]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e0a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2220      	movs	r2, #32
 8005e16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2220      	movs	r2, #32
 8005e1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005e22:	2300      	movs	r3, #0
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3708      	adds	r7, #8
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}

08005e2c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b0ba      	sub	sp, #232	; 0xe8
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	68db      	ldr	r3, [r3, #12]
 8005e44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	695b      	ldr	r3, [r3, #20]
 8005e4e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005e52:	2300      	movs	r3, #0
 8005e54:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005e5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e62:	f003 030f 	and.w	r3, r3, #15
 8005e66:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005e6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d10f      	bne.n	8005e92 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e76:	f003 0320 	and.w	r3, r3, #32
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d009      	beq.n	8005e92 <HAL_UART_IRQHandler+0x66>
 8005e7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e82:	f003 0320 	and.w	r3, r3, #32
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d003      	beq.n	8005e92 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f000 fb65 	bl	800655a <UART_Receive_IT>
      return;
 8005e90:	e256      	b.n	8006340 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005e92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	f000 80de 	beq.w	8006058 <HAL_UART_IRQHandler+0x22c>
 8005e9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ea0:	f003 0301 	and.w	r3, r3, #1
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d106      	bne.n	8005eb6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005ea8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005eac:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	f000 80d1 	beq.w	8006058 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005eb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005eba:	f003 0301 	and.w	r3, r3, #1
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d00b      	beq.n	8005eda <HAL_UART_IRQHandler+0xae>
 8005ec2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d005      	beq.n	8005eda <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed2:	f043 0201 	orr.w	r2, r3, #1
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005eda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ede:	f003 0304 	and.w	r3, r3, #4
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d00b      	beq.n	8005efe <HAL_UART_IRQHandler+0xd2>
 8005ee6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005eea:	f003 0301 	and.w	r3, r3, #1
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d005      	beq.n	8005efe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef6:	f043 0202 	orr.w	r2, r3, #2
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005efe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f02:	f003 0302 	and.w	r3, r3, #2
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d00b      	beq.n	8005f22 <HAL_UART_IRQHandler+0xf6>
 8005f0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f0e:	f003 0301 	and.w	r3, r3, #1
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d005      	beq.n	8005f22 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f1a:	f043 0204 	orr.w	r2, r3, #4
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005f22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f26:	f003 0308 	and.w	r3, r3, #8
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d011      	beq.n	8005f52 <HAL_UART_IRQHandler+0x126>
 8005f2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f32:	f003 0320 	and.w	r3, r3, #32
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d105      	bne.n	8005f46 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005f3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f3e:	f003 0301 	and.w	r3, r3, #1
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d005      	beq.n	8005f52 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f4a:	f043 0208 	orr.w	r2, r3, #8
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	f000 81ed 	beq.w	8006336 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005f5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f60:	f003 0320 	and.w	r3, r3, #32
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d008      	beq.n	8005f7a <HAL_UART_IRQHandler+0x14e>
 8005f68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f6c:	f003 0320 	and.w	r3, r3, #32
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d002      	beq.n	8005f7a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f000 faf0 	bl	800655a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	695b      	ldr	r3, [r3, #20]
 8005f80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f84:	2b40      	cmp	r3, #64	; 0x40
 8005f86:	bf0c      	ite	eq
 8005f88:	2301      	moveq	r3, #1
 8005f8a:	2300      	movne	r3, #0
 8005f8c:	b2db      	uxtb	r3, r3
 8005f8e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f96:	f003 0308 	and.w	r3, r3, #8
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d103      	bne.n	8005fa6 <HAL_UART_IRQHandler+0x17a>
 8005f9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d04f      	beq.n	8006046 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f000 f9f8 	bl	800639c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	695b      	ldr	r3, [r3, #20]
 8005fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fb6:	2b40      	cmp	r3, #64	; 0x40
 8005fb8:	d141      	bne.n	800603e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	3314      	adds	r3, #20
 8005fc0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fc4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005fc8:	e853 3f00 	ldrex	r3, [r3]
 8005fcc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005fd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005fd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fd8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	3314      	adds	r3, #20
 8005fe2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005fe6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005fea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005ff2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005ff6:	e841 2300 	strex	r3, r2, [r1]
 8005ffa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005ffe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006002:	2b00      	cmp	r3, #0
 8006004:	d1d9      	bne.n	8005fba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800600a:	2b00      	cmp	r3, #0
 800600c:	d013      	beq.n	8006036 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006012:	4a7d      	ldr	r2, [pc, #500]	; (8006208 <HAL_UART_IRQHandler+0x3dc>)
 8006014:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800601a:	4618      	mov	r0, r3
 800601c:	f7fc fdd5 	bl	8002bca <HAL_DMA_Abort_IT>
 8006020:	4603      	mov	r3, r0
 8006022:	2b00      	cmp	r3, #0
 8006024:	d016      	beq.n	8006054 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800602a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800602c:	687a      	ldr	r2, [r7, #4]
 800602e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006030:	4610      	mov	r0, r2
 8006032:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006034:	e00e      	b.n	8006054 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f000 f99a 	bl	8006370 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800603c:	e00a      	b.n	8006054 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f000 f996 	bl	8006370 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006044:	e006      	b.n	8006054 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f000 f992 	bl	8006370 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2200      	movs	r2, #0
 8006050:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006052:	e170      	b.n	8006336 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006054:	bf00      	nop
    return;
 8006056:	e16e      	b.n	8006336 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800605c:	2b01      	cmp	r3, #1
 800605e:	f040 814a 	bne.w	80062f6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006062:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006066:	f003 0310 	and.w	r3, r3, #16
 800606a:	2b00      	cmp	r3, #0
 800606c:	f000 8143 	beq.w	80062f6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006070:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006074:	f003 0310 	and.w	r3, r3, #16
 8006078:	2b00      	cmp	r3, #0
 800607a:	f000 813c 	beq.w	80062f6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800607e:	2300      	movs	r3, #0
 8006080:	60bb      	str	r3, [r7, #8]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	60bb      	str	r3, [r7, #8]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	60bb      	str	r3, [r7, #8]
 8006092:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	695b      	ldr	r3, [r3, #20]
 800609a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800609e:	2b40      	cmp	r3, #64	; 0x40
 80060a0:	f040 80b4 	bne.w	800620c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80060b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	f000 8140 	beq.w	800633a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80060be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80060c2:	429a      	cmp	r2, r3
 80060c4:	f080 8139 	bcs.w	800633a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80060ce:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060d4:	69db      	ldr	r3, [r3, #28]
 80060d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060da:	f000 8088 	beq.w	80061ee <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	330c      	adds	r3, #12
 80060e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80060ec:	e853 3f00 	ldrex	r3, [r3]
 80060f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80060f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80060f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	330c      	adds	r3, #12
 8006106:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800610a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800610e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006112:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006116:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800611a:	e841 2300 	strex	r3, r2, [r1]
 800611e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006122:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006126:	2b00      	cmp	r3, #0
 8006128:	d1d9      	bne.n	80060de <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	3314      	adds	r3, #20
 8006130:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006132:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006134:	e853 3f00 	ldrex	r3, [r3]
 8006138:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800613a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800613c:	f023 0301 	bic.w	r3, r3, #1
 8006140:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	3314      	adds	r3, #20
 800614a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800614e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006152:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006154:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006156:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800615a:	e841 2300 	strex	r3, r2, [r1]
 800615e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006160:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006162:	2b00      	cmp	r3, #0
 8006164:	d1e1      	bne.n	800612a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	3314      	adds	r3, #20
 800616c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800616e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006170:	e853 3f00 	ldrex	r3, [r3]
 8006174:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006176:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006178:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800617c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	3314      	adds	r3, #20
 8006186:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800618a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800618c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800618e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006190:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006192:	e841 2300 	strex	r3, r2, [r1]
 8006196:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006198:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800619a:	2b00      	cmp	r3, #0
 800619c:	d1e3      	bne.n	8006166 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2220      	movs	r2, #32
 80061a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2200      	movs	r2, #0
 80061aa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	330c      	adds	r3, #12
 80061b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061b6:	e853 3f00 	ldrex	r3, [r3]
 80061ba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80061bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061be:	f023 0310 	bic.w	r3, r3, #16
 80061c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	330c      	adds	r3, #12
 80061cc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80061d0:	65ba      	str	r2, [r7, #88]	; 0x58
 80061d2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061d4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80061d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80061d8:	e841 2300 	strex	r3, r2, [r1]
 80061dc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80061de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d1e3      	bne.n	80061ac <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061e8:	4618      	mov	r0, r3
 80061ea:	f7fc fc7e 	bl	8002aea <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	1ad3      	subs	r3, r2, r3
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	4619      	mov	r1, r3
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f000 f8c0 	bl	8006384 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006204:	e099      	b.n	800633a <HAL_UART_IRQHandler+0x50e>
 8006206:	bf00      	nop
 8006208:	08006463 	.word	0x08006463
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006214:	b29b      	uxth	r3, r3
 8006216:	1ad3      	subs	r3, r2, r3
 8006218:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006220:	b29b      	uxth	r3, r3
 8006222:	2b00      	cmp	r3, #0
 8006224:	f000 808b 	beq.w	800633e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006228:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800622c:	2b00      	cmp	r3, #0
 800622e:	f000 8086 	beq.w	800633e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	330c      	adds	r3, #12
 8006238:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800623a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800623c:	e853 3f00 	ldrex	r3, [r3]
 8006240:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006242:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006244:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006248:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	330c      	adds	r3, #12
 8006252:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006256:	647a      	str	r2, [r7, #68]	; 0x44
 8006258:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800625a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800625c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800625e:	e841 2300 	strex	r3, r2, [r1]
 8006262:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006264:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006266:	2b00      	cmp	r3, #0
 8006268:	d1e3      	bne.n	8006232 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	3314      	adds	r3, #20
 8006270:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006274:	e853 3f00 	ldrex	r3, [r3]
 8006278:	623b      	str	r3, [r7, #32]
   return(result);
 800627a:	6a3b      	ldr	r3, [r7, #32]
 800627c:	f023 0301 	bic.w	r3, r3, #1
 8006280:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	3314      	adds	r3, #20
 800628a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800628e:	633a      	str	r2, [r7, #48]	; 0x30
 8006290:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006292:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006294:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006296:	e841 2300 	strex	r3, r2, [r1]
 800629a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800629c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d1e3      	bne.n	800626a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2220      	movs	r2, #32
 80062a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2200      	movs	r2, #0
 80062ae:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	330c      	adds	r3, #12
 80062b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	e853 3f00 	ldrex	r3, [r3]
 80062be:	60fb      	str	r3, [r7, #12]
   return(result);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f023 0310 	bic.w	r3, r3, #16
 80062c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	330c      	adds	r3, #12
 80062d0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80062d4:	61fa      	str	r2, [r7, #28]
 80062d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062d8:	69b9      	ldr	r1, [r7, #24]
 80062da:	69fa      	ldr	r2, [r7, #28]
 80062dc:	e841 2300 	strex	r3, r2, [r1]
 80062e0:	617b      	str	r3, [r7, #20]
   return(result);
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d1e3      	bne.n	80062b0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80062e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80062ec:	4619      	mov	r1, r3
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f000 f848 	bl	8006384 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80062f4:	e023      	b.n	800633e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80062f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d009      	beq.n	8006316 <HAL_UART_IRQHandler+0x4ea>
 8006302:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800630a:	2b00      	cmp	r3, #0
 800630c:	d003      	beq.n	8006316 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f000 f8bb 	bl	800648a <UART_Transmit_IT>
    return;
 8006314:	e014      	b.n	8006340 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006316:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800631a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800631e:	2b00      	cmp	r3, #0
 8006320:	d00e      	beq.n	8006340 <HAL_UART_IRQHandler+0x514>
 8006322:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800632a:	2b00      	cmp	r3, #0
 800632c:	d008      	beq.n	8006340 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f000 f8fb 	bl	800652a <UART_EndTransmit_IT>
    return;
 8006334:	e004      	b.n	8006340 <HAL_UART_IRQHandler+0x514>
    return;
 8006336:	bf00      	nop
 8006338:	e002      	b.n	8006340 <HAL_UART_IRQHandler+0x514>
      return;
 800633a:	bf00      	nop
 800633c:	e000      	b.n	8006340 <HAL_UART_IRQHandler+0x514>
      return;
 800633e:	bf00      	nop
  }
}
 8006340:	37e8      	adds	r7, #232	; 0xe8
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}
 8006346:	bf00      	nop

08006348 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006348:	b480      	push	{r7}
 800634a:	b083      	sub	sp, #12
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006350:	bf00      	nop
 8006352:	370c      	adds	r7, #12
 8006354:	46bd      	mov	sp, r7
 8006356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635a:	4770      	bx	lr

0800635c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800635c:	b480      	push	{r7}
 800635e:	b083      	sub	sp, #12
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006364:	bf00      	nop
 8006366:	370c      	adds	r7, #12
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr

08006370 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006370:	b480      	push	{r7}
 8006372:	b083      	sub	sp, #12
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006378:	bf00      	nop
 800637a:	370c      	adds	r7, #12
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr

08006384 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006384:	b480      	push	{r7}
 8006386:	b083      	sub	sp, #12
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	460b      	mov	r3, r1
 800638e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006390:	bf00      	nop
 8006392:	370c      	adds	r7, #12
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr

0800639c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800639c:	b480      	push	{r7}
 800639e:	b095      	sub	sp, #84	; 0x54
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	330c      	adds	r3, #12
 80063aa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063ae:	e853 3f00 	ldrex	r3, [r3]
 80063b2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80063b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80063ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	330c      	adds	r3, #12
 80063c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80063c4:	643a      	str	r2, [r7, #64]	; 0x40
 80063c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80063ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80063cc:	e841 2300 	strex	r3, r2, [r1]
 80063d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80063d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d1e5      	bne.n	80063a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	3314      	adds	r3, #20
 80063de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e0:	6a3b      	ldr	r3, [r7, #32]
 80063e2:	e853 3f00 	ldrex	r3, [r3]
 80063e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80063e8:	69fb      	ldr	r3, [r7, #28]
 80063ea:	f023 0301 	bic.w	r3, r3, #1
 80063ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	3314      	adds	r3, #20
 80063f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80063f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80063fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80063fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006400:	e841 2300 	strex	r3, r2, [r1]
 8006404:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006408:	2b00      	cmp	r3, #0
 800640a:	d1e5      	bne.n	80063d8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006410:	2b01      	cmp	r3, #1
 8006412:	d119      	bne.n	8006448 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	330c      	adds	r3, #12
 800641a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	e853 3f00 	ldrex	r3, [r3]
 8006422:	60bb      	str	r3, [r7, #8]
   return(result);
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	f023 0310 	bic.w	r3, r3, #16
 800642a:	647b      	str	r3, [r7, #68]	; 0x44
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	330c      	adds	r3, #12
 8006432:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006434:	61ba      	str	r2, [r7, #24]
 8006436:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006438:	6979      	ldr	r1, [r7, #20]
 800643a:	69ba      	ldr	r2, [r7, #24]
 800643c:	e841 2300 	strex	r3, r2, [r1]
 8006440:	613b      	str	r3, [r7, #16]
   return(result);
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d1e5      	bne.n	8006414 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2220      	movs	r2, #32
 800644c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2200      	movs	r2, #0
 8006454:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006456:	bf00      	nop
 8006458:	3754      	adds	r7, #84	; 0x54
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr

08006462 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006462:	b580      	push	{r7, lr}
 8006464:	b084      	sub	sp, #16
 8006466:	af00      	add	r7, sp, #0
 8006468:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800646e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2200      	movs	r2, #0
 8006474:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2200      	movs	r2, #0
 800647a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800647c:	68f8      	ldr	r0, [r7, #12]
 800647e:	f7ff ff77 	bl	8006370 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006482:	bf00      	nop
 8006484:	3710      	adds	r7, #16
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}

0800648a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800648a:	b480      	push	{r7}
 800648c:	b085      	sub	sp, #20
 800648e:	af00      	add	r7, sp, #0
 8006490:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006498:	b2db      	uxtb	r3, r3
 800649a:	2b21      	cmp	r3, #33	; 0x21
 800649c:	d13e      	bne.n	800651c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	689b      	ldr	r3, [r3, #8]
 80064a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064a6:	d114      	bne.n	80064d2 <UART_Transmit_IT+0x48>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	691b      	ldr	r3, [r3, #16]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d110      	bne.n	80064d2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6a1b      	ldr	r3, [r3, #32]
 80064b4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	881b      	ldrh	r3, [r3, #0]
 80064ba:	461a      	mov	r2, r3
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80064c4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6a1b      	ldr	r3, [r3, #32]
 80064ca:	1c9a      	adds	r2, r3, #2
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	621a      	str	r2, [r3, #32]
 80064d0:	e008      	b.n	80064e4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6a1b      	ldr	r3, [r3, #32]
 80064d6:	1c59      	adds	r1, r3, #1
 80064d8:	687a      	ldr	r2, [r7, #4]
 80064da:	6211      	str	r1, [r2, #32]
 80064dc:	781a      	ldrb	r2, [r3, #0]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80064e8:	b29b      	uxth	r3, r3
 80064ea:	3b01      	subs	r3, #1
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	687a      	ldr	r2, [r7, #4]
 80064f0:	4619      	mov	r1, r3
 80064f2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d10f      	bne.n	8006518 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	68da      	ldr	r2, [r3, #12]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006506:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	68da      	ldr	r2, [r3, #12]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006516:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006518:	2300      	movs	r3, #0
 800651a:	e000      	b.n	800651e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800651c:	2302      	movs	r3, #2
  }
}
 800651e:	4618      	mov	r0, r3
 8006520:	3714      	adds	r7, #20
 8006522:	46bd      	mov	sp, r7
 8006524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006528:	4770      	bx	lr

0800652a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800652a:	b580      	push	{r7, lr}
 800652c:	b082      	sub	sp, #8
 800652e:	af00      	add	r7, sp, #0
 8006530:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	68da      	ldr	r2, [r3, #12]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006540:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2220      	movs	r2, #32
 8006546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f7ff fefc 	bl	8006348 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006550:	2300      	movs	r3, #0
}
 8006552:	4618      	mov	r0, r3
 8006554:	3708      	adds	r7, #8
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}

0800655a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800655a:	b580      	push	{r7, lr}
 800655c:	b08c      	sub	sp, #48	; 0x30
 800655e:	af00      	add	r7, sp, #0
 8006560:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006568:	b2db      	uxtb	r3, r3
 800656a:	2b22      	cmp	r3, #34	; 0x22
 800656c:	f040 80ab 	bne.w	80066c6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	689b      	ldr	r3, [r3, #8]
 8006574:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006578:	d117      	bne.n	80065aa <UART_Receive_IT+0x50>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	691b      	ldr	r3, [r3, #16]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d113      	bne.n	80065aa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006582:	2300      	movs	r3, #0
 8006584:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800658a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	b29b      	uxth	r3, r3
 8006594:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006598:	b29a      	uxth	r2, r3
 800659a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800659c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065a2:	1c9a      	adds	r2, r3, #2
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	629a      	str	r2, [r3, #40]	; 0x28
 80065a8:	e026      	b.n	80065f8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80065b0:	2300      	movs	r3, #0
 80065b2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	689b      	ldr	r3, [r3, #8]
 80065b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065bc:	d007      	beq.n	80065ce <UART_Receive_IT+0x74>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d10a      	bne.n	80065dc <UART_Receive_IT+0x82>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	691b      	ldr	r3, [r3, #16]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d106      	bne.n	80065dc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	685b      	ldr	r3, [r3, #4]
 80065d4:	b2da      	uxtb	r2, r3
 80065d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065d8:	701a      	strb	r2, [r3, #0]
 80065da:	e008      	b.n	80065ee <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065e8:	b2da      	uxtb	r2, r3
 80065ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ec:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065f2:	1c5a      	adds	r2, r3, #1
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80065fc:	b29b      	uxth	r3, r3
 80065fe:	3b01      	subs	r3, #1
 8006600:	b29b      	uxth	r3, r3
 8006602:	687a      	ldr	r2, [r7, #4]
 8006604:	4619      	mov	r1, r3
 8006606:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006608:	2b00      	cmp	r3, #0
 800660a:	d15a      	bne.n	80066c2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	68da      	ldr	r2, [r3, #12]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f022 0220 	bic.w	r2, r2, #32
 800661a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	68da      	ldr	r2, [r3, #12]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800662a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	695a      	ldr	r2, [r3, #20]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f022 0201 	bic.w	r2, r2, #1
 800663a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2220      	movs	r2, #32
 8006640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006648:	2b01      	cmp	r3, #1
 800664a:	d135      	bne.n	80066b8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2200      	movs	r2, #0
 8006650:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	330c      	adds	r3, #12
 8006658:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	e853 3f00 	ldrex	r3, [r3]
 8006660:	613b      	str	r3, [r7, #16]
   return(result);
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	f023 0310 	bic.w	r3, r3, #16
 8006668:	627b      	str	r3, [r7, #36]	; 0x24
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	330c      	adds	r3, #12
 8006670:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006672:	623a      	str	r2, [r7, #32]
 8006674:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006676:	69f9      	ldr	r1, [r7, #28]
 8006678:	6a3a      	ldr	r2, [r7, #32]
 800667a:	e841 2300 	strex	r3, r2, [r1]
 800667e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006680:	69bb      	ldr	r3, [r7, #24]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d1e5      	bne.n	8006652 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f003 0310 	and.w	r3, r3, #16
 8006690:	2b10      	cmp	r3, #16
 8006692:	d10a      	bne.n	80066aa <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006694:	2300      	movs	r3, #0
 8006696:	60fb      	str	r3, [r7, #12]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	60fb      	str	r3, [r7, #12]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	60fb      	str	r3, [r7, #12]
 80066a8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80066ae:	4619      	mov	r1, r3
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f7ff fe67 	bl	8006384 <HAL_UARTEx_RxEventCallback>
 80066b6:	e002      	b.n	80066be <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f7ff fe4f 	bl	800635c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80066be:	2300      	movs	r3, #0
 80066c0:	e002      	b.n	80066c8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80066c2:	2300      	movs	r3, #0
 80066c4:	e000      	b.n	80066c8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80066c6:	2302      	movs	r3, #2
  }
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3730      	adds	r7, #48	; 0x30
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}

080066d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80066d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80066d4:	b0c0      	sub	sp, #256	; 0x100
 80066d6:	af00      	add	r7, sp, #0
 80066d8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80066dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	691b      	ldr	r3, [r3, #16]
 80066e4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80066e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066ec:	68d9      	ldr	r1, [r3, #12]
 80066ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	ea40 0301 	orr.w	r3, r0, r1
 80066f8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80066fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066fe:	689a      	ldr	r2, [r3, #8]
 8006700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006704:	691b      	ldr	r3, [r3, #16]
 8006706:	431a      	orrs	r2, r3
 8006708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800670c:	695b      	ldr	r3, [r3, #20]
 800670e:	431a      	orrs	r2, r3
 8006710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006714:	69db      	ldr	r3, [r3, #28]
 8006716:	4313      	orrs	r3, r2
 8006718:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800671c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	68db      	ldr	r3, [r3, #12]
 8006724:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006728:	f021 010c 	bic.w	r1, r1, #12
 800672c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006730:	681a      	ldr	r2, [r3, #0]
 8006732:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006736:	430b      	orrs	r3, r1
 8006738:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800673a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	695b      	ldr	r3, [r3, #20]
 8006742:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006746:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800674a:	6999      	ldr	r1, [r3, #24]
 800674c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	ea40 0301 	orr.w	r3, r0, r1
 8006756:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800675c:	681a      	ldr	r2, [r3, #0]
 800675e:	4b8f      	ldr	r3, [pc, #572]	; (800699c <UART_SetConfig+0x2cc>)
 8006760:	429a      	cmp	r2, r3
 8006762:	d005      	beq.n	8006770 <UART_SetConfig+0xa0>
 8006764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006768:	681a      	ldr	r2, [r3, #0]
 800676a:	4b8d      	ldr	r3, [pc, #564]	; (80069a0 <UART_SetConfig+0x2d0>)
 800676c:	429a      	cmp	r2, r3
 800676e:	d104      	bne.n	800677a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006770:	f7ff f932 	bl	80059d8 <HAL_RCC_GetPCLK2Freq>
 8006774:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006778:	e003      	b.n	8006782 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800677a:	f7ff f919 	bl	80059b0 <HAL_RCC_GetPCLK1Freq>
 800677e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006782:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006786:	69db      	ldr	r3, [r3, #28]
 8006788:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800678c:	f040 810c 	bne.w	80069a8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006790:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006794:	2200      	movs	r2, #0
 8006796:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800679a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800679e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80067a2:	4622      	mov	r2, r4
 80067a4:	462b      	mov	r3, r5
 80067a6:	1891      	adds	r1, r2, r2
 80067a8:	65b9      	str	r1, [r7, #88]	; 0x58
 80067aa:	415b      	adcs	r3, r3
 80067ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80067ae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80067b2:	4621      	mov	r1, r4
 80067b4:	eb12 0801 	adds.w	r8, r2, r1
 80067b8:	4629      	mov	r1, r5
 80067ba:	eb43 0901 	adc.w	r9, r3, r1
 80067be:	f04f 0200 	mov.w	r2, #0
 80067c2:	f04f 0300 	mov.w	r3, #0
 80067c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80067ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80067ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80067d2:	4690      	mov	r8, r2
 80067d4:	4699      	mov	r9, r3
 80067d6:	4623      	mov	r3, r4
 80067d8:	eb18 0303 	adds.w	r3, r8, r3
 80067dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80067e0:	462b      	mov	r3, r5
 80067e2:	eb49 0303 	adc.w	r3, r9, r3
 80067e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80067ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	2200      	movs	r2, #0
 80067f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80067f6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80067fa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80067fe:	460b      	mov	r3, r1
 8006800:	18db      	adds	r3, r3, r3
 8006802:	653b      	str	r3, [r7, #80]	; 0x50
 8006804:	4613      	mov	r3, r2
 8006806:	eb42 0303 	adc.w	r3, r2, r3
 800680a:	657b      	str	r3, [r7, #84]	; 0x54
 800680c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006810:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006814:	f7fa f99c 	bl	8000b50 <__aeabi_uldivmod>
 8006818:	4602      	mov	r2, r0
 800681a:	460b      	mov	r3, r1
 800681c:	4b61      	ldr	r3, [pc, #388]	; (80069a4 <UART_SetConfig+0x2d4>)
 800681e:	fba3 2302 	umull	r2, r3, r3, r2
 8006822:	095b      	lsrs	r3, r3, #5
 8006824:	011c      	lsls	r4, r3, #4
 8006826:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800682a:	2200      	movs	r2, #0
 800682c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006830:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006834:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006838:	4642      	mov	r2, r8
 800683a:	464b      	mov	r3, r9
 800683c:	1891      	adds	r1, r2, r2
 800683e:	64b9      	str	r1, [r7, #72]	; 0x48
 8006840:	415b      	adcs	r3, r3
 8006842:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006844:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006848:	4641      	mov	r1, r8
 800684a:	eb12 0a01 	adds.w	sl, r2, r1
 800684e:	4649      	mov	r1, r9
 8006850:	eb43 0b01 	adc.w	fp, r3, r1
 8006854:	f04f 0200 	mov.w	r2, #0
 8006858:	f04f 0300 	mov.w	r3, #0
 800685c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006860:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006864:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006868:	4692      	mov	sl, r2
 800686a:	469b      	mov	fp, r3
 800686c:	4643      	mov	r3, r8
 800686e:	eb1a 0303 	adds.w	r3, sl, r3
 8006872:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006876:	464b      	mov	r3, r9
 8006878:	eb4b 0303 	adc.w	r3, fp, r3
 800687c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	2200      	movs	r2, #0
 8006888:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800688c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006890:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006894:	460b      	mov	r3, r1
 8006896:	18db      	adds	r3, r3, r3
 8006898:	643b      	str	r3, [r7, #64]	; 0x40
 800689a:	4613      	mov	r3, r2
 800689c:	eb42 0303 	adc.w	r3, r2, r3
 80068a0:	647b      	str	r3, [r7, #68]	; 0x44
 80068a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80068a6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80068aa:	f7fa f951 	bl	8000b50 <__aeabi_uldivmod>
 80068ae:	4602      	mov	r2, r0
 80068b0:	460b      	mov	r3, r1
 80068b2:	4611      	mov	r1, r2
 80068b4:	4b3b      	ldr	r3, [pc, #236]	; (80069a4 <UART_SetConfig+0x2d4>)
 80068b6:	fba3 2301 	umull	r2, r3, r3, r1
 80068ba:	095b      	lsrs	r3, r3, #5
 80068bc:	2264      	movs	r2, #100	; 0x64
 80068be:	fb02 f303 	mul.w	r3, r2, r3
 80068c2:	1acb      	subs	r3, r1, r3
 80068c4:	00db      	lsls	r3, r3, #3
 80068c6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80068ca:	4b36      	ldr	r3, [pc, #216]	; (80069a4 <UART_SetConfig+0x2d4>)
 80068cc:	fba3 2302 	umull	r2, r3, r3, r2
 80068d0:	095b      	lsrs	r3, r3, #5
 80068d2:	005b      	lsls	r3, r3, #1
 80068d4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80068d8:	441c      	add	r4, r3
 80068da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068de:	2200      	movs	r2, #0
 80068e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80068e4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80068e8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80068ec:	4642      	mov	r2, r8
 80068ee:	464b      	mov	r3, r9
 80068f0:	1891      	adds	r1, r2, r2
 80068f2:	63b9      	str	r1, [r7, #56]	; 0x38
 80068f4:	415b      	adcs	r3, r3
 80068f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80068fc:	4641      	mov	r1, r8
 80068fe:	1851      	adds	r1, r2, r1
 8006900:	6339      	str	r1, [r7, #48]	; 0x30
 8006902:	4649      	mov	r1, r9
 8006904:	414b      	adcs	r3, r1
 8006906:	637b      	str	r3, [r7, #52]	; 0x34
 8006908:	f04f 0200 	mov.w	r2, #0
 800690c:	f04f 0300 	mov.w	r3, #0
 8006910:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006914:	4659      	mov	r1, fp
 8006916:	00cb      	lsls	r3, r1, #3
 8006918:	4651      	mov	r1, sl
 800691a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800691e:	4651      	mov	r1, sl
 8006920:	00ca      	lsls	r2, r1, #3
 8006922:	4610      	mov	r0, r2
 8006924:	4619      	mov	r1, r3
 8006926:	4603      	mov	r3, r0
 8006928:	4642      	mov	r2, r8
 800692a:	189b      	adds	r3, r3, r2
 800692c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006930:	464b      	mov	r3, r9
 8006932:	460a      	mov	r2, r1
 8006934:	eb42 0303 	adc.w	r3, r2, r3
 8006938:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800693c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	2200      	movs	r2, #0
 8006944:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006948:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800694c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006950:	460b      	mov	r3, r1
 8006952:	18db      	adds	r3, r3, r3
 8006954:	62bb      	str	r3, [r7, #40]	; 0x28
 8006956:	4613      	mov	r3, r2
 8006958:	eb42 0303 	adc.w	r3, r2, r3
 800695c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800695e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006962:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006966:	f7fa f8f3 	bl	8000b50 <__aeabi_uldivmod>
 800696a:	4602      	mov	r2, r0
 800696c:	460b      	mov	r3, r1
 800696e:	4b0d      	ldr	r3, [pc, #52]	; (80069a4 <UART_SetConfig+0x2d4>)
 8006970:	fba3 1302 	umull	r1, r3, r3, r2
 8006974:	095b      	lsrs	r3, r3, #5
 8006976:	2164      	movs	r1, #100	; 0x64
 8006978:	fb01 f303 	mul.w	r3, r1, r3
 800697c:	1ad3      	subs	r3, r2, r3
 800697e:	00db      	lsls	r3, r3, #3
 8006980:	3332      	adds	r3, #50	; 0x32
 8006982:	4a08      	ldr	r2, [pc, #32]	; (80069a4 <UART_SetConfig+0x2d4>)
 8006984:	fba2 2303 	umull	r2, r3, r2, r3
 8006988:	095b      	lsrs	r3, r3, #5
 800698a:	f003 0207 	and.w	r2, r3, #7
 800698e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4422      	add	r2, r4
 8006996:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006998:	e105      	b.n	8006ba6 <UART_SetConfig+0x4d6>
 800699a:	bf00      	nop
 800699c:	40011000 	.word	0x40011000
 80069a0:	40011400 	.word	0x40011400
 80069a4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80069a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069ac:	2200      	movs	r2, #0
 80069ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80069b2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80069b6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80069ba:	4642      	mov	r2, r8
 80069bc:	464b      	mov	r3, r9
 80069be:	1891      	adds	r1, r2, r2
 80069c0:	6239      	str	r1, [r7, #32]
 80069c2:	415b      	adcs	r3, r3
 80069c4:	627b      	str	r3, [r7, #36]	; 0x24
 80069c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80069ca:	4641      	mov	r1, r8
 80069cc:	1854      	adds	r4, r2, r1
 80069ce:	4649      	mov	r1, r9
 80069d0:	eb43 0501 	adc.w	r5, r3, r1
 80069d4:	f04f 0200 	mov.w	r2, #0
 80069d8:	f04f 0300 	mov.w	r3, #0
 80069dc:	00eb      	lsls	r3, r5, #3
 80069de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80069e2:	00e2      	lsls	r2, r4, #3
 80069e4:	4614      	mov	r4, r2
 80069e6:	461d      	mov	r5, r3
 80069e8:	4643      	mov	r3, r8
 80069ea:	18e3      	adds	r3, r4, r3
 80069ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80069f0:	464b      	mov	r3, r9
 80069f2:	eb45 0303 	adc.w	r3, r5, r3
 80069f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80069fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	2200      	movs	r2, #0
 8006a02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006a06:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006a0a:	f04f 0200 	mov.w	r2, #0
 8006a0e:	f04f 0300 	mov.w	r3, #0
 8006a12:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006a16:	4629      	mov	r1, r5
 8006a18:	008b      	lsls	r3, r1, #2
 8006a1a:	4621      	mov	r1, r4
 8006a1c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a20:	4621      	mov	r1, r4
 8006a22:	008a      	lsls	r2, r1, #2
 8006a24:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006a28:	f7fa f892 	bl	8000b50 <__aeabi_uldivmod>
 8006a2c:	4602      	mov	r2, r0
 8006a2e:	460b      	mov	r3, r1
 8006a30:	4b60      	ldr	r3, [pc, #384]	; (8006bb4 <UART_SetConfig+0x4e4>)
 8006a32:	fba3 2302 	umull	r2, r3, r3, r2
 8006a36:	095b      	lsrs	r3, r3, #5
 8006a38:	011c      	lsls	r4, r3, #4
 8006a3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a3e:	2200      	movs	r2, #0
 8006a40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006a44:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006a48:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006a4c:	4642      	mov	r2, r8
 8006a4e:	464b      	mov	r3, r9
 8006a50:	1891      	adds	r1, r2, r2
 8006a52:	61b9      	str	r1, [r7, #24]
 8006a54:	415b      	adcs	r3, r3
 8006a56:	61fb      	str	r3, [r7, #28]
 8006a58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006a5c:	4641      	mov	r1, r8
 8006a5e:	1851      	adds	r1, r2, r1
 8006a60:	6139      	str	r1, [r7, #16]
 8006a62:	4649      	mov	r1, r9
 8006a64:	414b      	adcs	r3, r1
 8006a66:	617b      	str	r3, [r7, #20]
 8006a68:	f04f 0200 	mov.w	r2, #0
 8006a6c:	f04f 0300 	mov.w	r3, #0
 8006a70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006a74:	4659      	mov	r1, fp
 8006a76:	00cb      	lsls	r3, r1, #3
 8006a78:	4651      	mov	r1, sl
 8006a7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a7e:	4651      	mov	r1, sl
 8006a80:	00ca      	lsls	r2, r1, #3
 8006a82:	4610      	mov	r0, r2
 8006a84:	4619      	mov	r1, r3
 8006a86:	4603      	mov	r3, r0
 8006a88:	4642      	mov	r2, r8
 8006a8a:	189b      	adds	r3, r3, r2
 8006a8c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006a90:	464b      	mov	r3, r9
 8006a92:	460a      	mov	r2, r1
 8006a94:	eb42 0303 	adc.w	r3, r2, r3
 8006a98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	67bb      	str	r3, [r7, #120]	; 0x78
 8006aa6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006aa8:	f04f 0200 	mov.w	r2, #0
 8006aac:	f04f 0300 	mov.w	r3, #0
 8006ab0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006ab4:	4649      	mov	r1, r9
 8006ab6:	008b      	lsls	r3, r1, #2
 8006ab8:	4641      	mov	r1, r8
 8006aba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006abe:	4641      	mov	r1, r8
 8006ac0:	008a      	lsls	r2, r1, #2
 8006ac2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006ac6:	f7fa f843 	bl	8000b50 <__aeabi_uldivmod>
 8006aca:	4602      	mov	r2, r0
 8006acc:	460b      	mov	r3, r1
 8006ace:	4b39      	ldr	r3, [pc, #228]	; (8006bb4 <UART_SetConfig+0x4e4>)
 8006ad0:	fba3 1302 	umull	r1, r3, r3, r2
 8006ad4:	095b      	lsrs	r3, r3, #5
 8006ad6:	2164      	movs	r1, #100	; 0x64
 8006ad8:	fb01 f303 	mul.w	r3, r1, r3
 8006adc:	1ad3      	subs	r3, r2, r3
 8006ade:	011b      	lsls	r3, r3, #4
 8006ae0:	3332      	adds	r3, #50	; 0x32
 8006ae2:	4a34      	ldr	r2, [pc, #208]	; (8006bb4 <UART_SetConfig+0x4e4>)
 8006ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8006ae8:	095b      	lsrs	r3, r3, #5
 8006aea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006aee:	441c      	add	r4, r3
 8006af0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006af4:	2200      	movs	r2, #0
 8006af6:	673b      	str	r3, [r7, #112]	; 0x70
 8006af8:	677a      	str	r2, [r7, #116]	; 0x74
 8006afa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006afe:	4642      	mov	r2, r8
 8006b00:	464b      	mov	r3, r9
 8006b02:	1891      	adds	r1, r2, r2
 8006b04:	60b9      	str	r1, [r7, #8]
 8006b06:	415b      	adcs	r3, r3
 8006b08:	60fb      	str	r3, [r7, #12]
 8006b0a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006b0e:	4641      	mov	r1, r8
 8006b10:	1851      	adds	r1, r2, r1
 8006b12:	6039      	str	r1, [r7, #0]
 8006b14:	4649      	mov	r1, r9
 8006b16:	414b      	adcs	r3, r1
 8006b18:	607b      	str	r3, [r7, #4]
 8006b1a:	f04f 0200 	mov.w	r2, #0
 8006b1e:	f04f 0300 	mov.w	r3, #0
 8006b22:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006b26:	4659      	mov	r1, fp
 8006b28:	00cb      	lsls	r3, r1, #3
 8006b2a:	4651      	mov	r1, sl
 8006b2c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b30:	4651      	mov	r1, sl
 8006b32:	00ca      	lsls	r2, r1, #3
 8006b34:	4610      	mov	r0, r2
 8006b36:	4619      	mov	r1, r3
 8006b38:	4603      	mov	r3, r0
 8006b3a:	4642      	mov	r2, r8
 8006b3c:	189b      	adds	r3, r3, r2
 8006b3e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006b40:	464b      	mov	r3, r9
 8006b42:	460a      	mov	r2, r1
 8006b44:	eb42 0303 	adc.w	r3, r2, r3
 8006b48:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006b4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	2200      	movs	r2, #0
 8006b52:	663b      	str	r3, [r7, #96]	; 0x60
 8006b54:	667a      	str	r2, [r7, #100]	; 0x64
 8006b56:	f04f 0200 	mov.w	r2, #0
 8006b5a:	f04f 0300 	mov.w	r3, #0
 8006b5e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006b62:	4649      	mov	r1, r9
 8006b64:	008b      	lsls	r3, r1, #2
 8006b66:	4641      	mov	r1, r8
 8006b68:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b6c:	4641      	mov	r1, r8
 8006b6e:	008a      	lsls	r2, r1, #2
 8006b70:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006b74:	f7f9 ffec 	bl	8000b50 <__aeabi_uldivmod>
 8006b78:	4602      	mov	r2, r0
 8006b7a:	460b      	mov	r3, r1
 8006b7c:	4b0d      	ldr	r3, [pc, #52]	; (8006bb4 <UART_SetConfig+0x4e4>)
 8006b7e:	fba3 1302 	umull	r1, r3, r3, r2
 8006b82:	095b      	lsrs	r3, r3, #5
 8006b84:	2164      	movs	r1, #100	; 0x64
 8006b86:	fb01 f303 	mul.w	r3, r1, r3
 8006b8a:	1ad3      	subs	r3, r2, r3
 8006b8c:	011b      	lsls	r3, r3, #4
 8006b8e:	3332      	adds	r3, #50	; 0x32
 8006b90:	4a08      	ldr	r2, [pc, #32]	; (8006bb4 <UART_SetConfig+0x4e4>)
 8006b92:	fba2 2303 	umull	r2, r3, r2, r3
 8006b96:	095b      	lsrs	r3, r3, #5
 8006b98:	f003 020f 	and.w	r2, r3, #15
 8006b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4422      	add	r2, r4
 8006ba4:	609a      	str	r2, [r3, #8]
}
 8006ba6:	bf00      	nop
 8006ba8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006bac:	46bd      	mov	sp, r7
 8006bae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006bb2:	bf00      	nop
 8006bb4:	51eb851f 	.word	0x51eb851f

08006bb8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006bb8:	b084      	sub	sp, #16
 8006bba:	b580      	push	{r7, lr}
 8006bbc:	b084      	sub	sp, #16
 8006bbe:	af00      	add	r7, sp, #0
 8006bc0:	6078      	str	r0, [r7, #4]
 8006bc2:	f107 001c 	add.w	r0, r7, #28
 8006bc6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bcc:	2b01      	cmp	r3, #1
 8006bce:	d122      	bne.n	8006c16 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bd4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	68db      	ldr	r3, [r3, #12]
 8006be0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006be4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006be8:	687a      	ldr	r2, [r7, #4]
 8006bea:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	68db      	ldr	r3, [r3, #12]
 8006bf0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006bf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d105      	bne.n	8006c0a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	68db      	ldr	r3, [r3, #12]
 8006c02:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f000 f9c0 	bl	8006f90 <USB_CoreReset>
 8006c10:	4603      	mov	r3, r0
 8006c12:	73fb      	strb	r3, [r7, #15]
 8006c14:	e01a      	b.n	8006c4c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	68db      	ldr	r3, [r3, #12]
 8006c1a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f000 f9b4 	bl	8006f90 <USB_CoreReset>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006c2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d106      	bne.n	8006c40 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c36:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	639a      	str	r2, [r3, #56]	; 0x38
 8006c3e:	e005      	b.n	8006c4c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c44:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c4e:	2b01      	cmp	r3, #1
 8006c50:	d10b      	bne.n	8006c6a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	689b      	ldr	r3, [r3, #8]
 8006c56:	f043 0206 	orr.w	r2, r3, #6
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	689b      	ldr	r3, [r3, #8]
 8006c62:	f043 0220 	orr.w	r2, r3, #32
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006c6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3710      	adds	r7, #16
 8006c70:	46bd      	mov	sp, r7
 8006c72:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006c76:	b004      	add	sp, #16
 8006c78:	4770      	bx	lr

08006c7a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c7a:	b480      	push	{r7}
 8006c7c:	b083      	sub	sp, #12
 8006c7e:	af00      	add	r7, sp, #0
 8006c80:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	689b      	ldr	r3, [r3, #8]
 8006c86:	f043 0201 	orr.w	r2, r3, #1
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006c8e:	2300      	movs	r3, #0
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	370c      	adds	r7, #12
 8006c94:	46bd      	mov	sp, r7
 8006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9a:	4770      	bx	lr

08006c9c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b083      	sub	sp, #12
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	f023 0201 	bic.w	r2, r3, #1
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006cb0:	2300      	movs	r3, #0
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	370c      	adds	r7, #12
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbc:	4770      	bx	lr

08006cbe <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006cbe:	b580      	push	{r7, lr}
 8006cc0:	b084      	sub	sp, #16
 8006cc2:	af00      	add	r7, sp, #0
 8006cc4:	6078      	str	r0, [r7, #4]
 8006cc6:	460b      	mov	r3, r1
 8006cc8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	68db      	ldr	r3, [r3, #12]
 8006cd2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006cda:	78fb      	ldrb	r3, [r7, #3]
 8006cdc:	2b01      	cmp	r3, #1
 8006cde:	d115      	bne.n	8006d0c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	68db      	ldr	r3, [r3, #12]
 8006ce4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006cec:	2001      	movs	r0, #1
 8006cee:	f7fb fdc7 	bl	8002880 <HAL_Delay>
      ms++;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	3301      	adds	r3, #1
 8006cf6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f000 f93a 	bl	8006f72 <USB_GetMode>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	2b01      	cmp	r3, #1
 8006d02:	d01e      	beq.n	8006d42 <USB_SetCurrentMode+0x84>
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2b31      	cmp	r3, #49	; 0x31
 8006d08:	d9f0      	bls.n	8006cec <USB_SetCurrentMode+0x2e>
 8006d0a:	e01a      	b.n	8006d42 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006d0c:	78fb      	ldrb	r3, [r7, #3]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d115      	bne.n	8006d3e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	68db      	ldr	r3, [r3, #12]
 8006d16:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006d1e:	2001      	movs	r0, #1
 8006d20:	f7fb fdae 	bl	8002880 <HAL_Delay>
      ms++;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	3301      	adds	r3, #1
 8006d28:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f000 f921 	bl	8006f72 <USB_GetMode>
 8006d30:	4603      	mov	r3, r0
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d005      	beq.n	8006d42 <USB_SetCurrentMode+0x84>
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	2b31      	cmp	r3, #49	; 0x31
 8006d3a:	d9f0      	bls.n	8006d1e <USB_SetCurrentMode+0x60>
 8006d3c:	e001      	b.n	8006d42 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	e005      	b.n	8006d4e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	2b32      	cmp	r3, #50	; 0x32
 8006d46:	d101      	bne.n	8006d4c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006d48:	2301      	movs	r3, #1
 8006d4a:	e000      	b.n	8006d4e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006d4c:	2300      	movs	r3, #0
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3710      	adds	r7, #16
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}
	...

08006d58 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b085      	sub	sp, #20
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
 8006d60:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006d62:	2300      	movs	r3, #0
 8006d64:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	3301      	adds	r3, #1
 8006d6a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	4a13      	ldr	r2, [pc, #76]	; (8006dbc <USB_FlushTxFifo+0x64>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d901      	bls.n	8006d78 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006d74:	2303      	movs	r3, #3
 8006d76:	e01b      	b.n	8006db0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	691b      	ldr	r3, [r3, #16]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	daf2      	bge.n	8006d66 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006d80:	2300      	movs	r3, #0
 8006d82:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	019b      	lsls	r3, r3, #6
 8006d88:	f043 0220 	orr.w	r2, r3, #32
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	3301      	adds	r3, #1
 8006d94:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	4a08      	ldr	r2, [pc, #32]	; (8006dbc <USB_FlushTxFifo+0x64>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d901      	bls.n	8006da2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006d9e:	2303      	movs	r3, #3
 8006da0:	e006      	b.n	8006db0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	691b      	ldr	r3, [r3, #16]
 8006da6:	f003 0320 	and.w	r3, r3, #32
 8006daa:	2b20      	cmp	r3, #32
 8006dac:	d0f0      	beq.n	8006d90 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006dae:	2300      	movs	r3, #0
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	3714      	adds	r7, #20
 8006db4:	46bd      	mov	sp, r7
 8006db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dba:	4770      	bx	lr
 8006dbc:	00030d40 	.word	0x00030d40

08006dc0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b085      	sub	sp, #20
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006dc8:	2300      	movs	r3, #0
 8006dca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	3301      	adds	r3, #1
 8006dd0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	4a11      	ldr	r2, [pc, #68]	; (8006e1c <USB_FlushRxFifo+0x5c>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d901      	bls.n	8006dde <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006dda:	2303      	movs	r3, #3
 8006ddc:	e018      	b.n	8006e10 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	691b      	ldr	r3, [r3, #16]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	daf2      	bge.n	8006dcc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006de6:	2300      	movs	r3, #0
 8006de8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2210      	movs	r2, #16
 8006dee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	3301      	adds	r3, #1
 8006df4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	4a08      	ldr	r2, [pc, #32]	; (8006e1c <USB_FlushRxFifo+0x5c>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d901      	bls.n	8006e02 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006dfe:	2303      	movs	r3, #3
 8006e00:	e006      	b.n	8006e10 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	691b      	ldr	r3, [r3, #16]
 8006e06:	f003 0310 	and.w	r3, r3, #16
 8006e0a:	2b10      	cmp	r3, #16
 8006e0c:	d0f0      	beq.n	8006df0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006e0e:	2300      	movs	r3, #0
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3714      	adds	r7, #20
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr
 8006e1c:	00030d40 	.word	0x00030d40

08006e20 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b089      	sub	sp, #36	; 0x24
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	60f8      	str	r0, [r7, #12]
 8006e28:	60b9      	str	r1, [r7, #8]
 8006e2a:	4611      	mov	r1, r2
 8006e2c:	461a      	mov	r2, r3
 8006e2e:	460b      	mov	r3, r1
 8006e30:	71fb      	strb	r3, [r7, #7]
 8006e32:	4613      	mov	r3, r2
 8006e34:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006e3e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d123      	bne.n	8006e8e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006e46:	88bb      	ldrh	r3, [r7, #4]
 8006e48:	3303      	adds	r3, #3
 8006e4a:	089b      	lsrs	r3, r3, #2
 8006e4c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006e4e:	2300      	movs	r3, #0
 8006e50:	61bb      	str	r3, [r7, #24]
 8006e52:	e018      	b.n	8006e86 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006e54:	79fb      	ldrb	r3, [r7, #7]
 8006e56:	031a      	lsls	r2, r3, #12
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	4413      	add	r3, r2
 8006e5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e60:	461a      	mov	r2, r3
 8006e62:	69fb      	ldr	r3, [r7, #28]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006e68:	69fb      	ldr	r3, [r7, #28]
 8006e6a:	3301      	adds	r3, #1
 8006e6c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006e6e:	69fb      	ldr	r3, [r7, #28]
 8006e70:	3301      	adds	r3, #1
 8006e72:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006e74:	69fb      	ldr	r3, [r7, #28]
 8006e76:	3301      	adds	r3, #1
 8006e78:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006e7a:	69fb      	ldr	r3, [r7, #28]
 8006e7c:	3301      	adds	r3, #1
 8006e7e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006e80:	69bb      	ldr	r3, [r7, #24]
 8006e82:	3301      	adds	r3, #1
 8006e84:	61bb      	str	r3, [r7, #24]
 8006e86:	69ba      	ldr	r2, [r7, #24]
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	429a      	cmp	r2, r3
 8006e8c:	d3e2      	bcc.n	8006e54 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006e8e:	2300      	movs	r3, #0
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	3724      	adds	r7, #36	; 0x24
 8006e94:	46bd      	mov	sp, r7
 8006e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9a:	4770      	bx	lr

08006e9c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b08b      	sub	sp, #44	; 0x2c
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	60f8      	str	r0, [r7, #12]
 8006ea4:	60b9      	str	r1, [r7, #8]
 8006ea6:	4613      	mov	r3, r2
 8006ea8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006eb2:	88fb      	ldrh	r3, [r7, #6]
 8006eb4:	089b      	lsrs	r3, r3, #2
 8006eb6:	b29b      	uxth	r3, r3
 8006eb8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006eba:	88fb      	ldrh	r3, [r7, #6]
 8006ebc:	f003 0303 	and.w	r3, r3, #3
 8006ec0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	623b      	str	r3, [r7, #32]
 8006ec6:	e014      	b.n	8006ef2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006ec8:	69bb      	ldr	r3, [r7, #24]
 8006eca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ece:	681a      	ldr	r2, [r3, #0]
 8006ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed2:	601a      	str	r2, [r3, #0]
    pDest++;
 8006ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed6:	3301      	adds	r3, #1
 8006ed8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006edc:	3301      	adds	r3, #1
 8006ede:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee2:	3301      	adds	r3, #1
 8006ee4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee8:	3301      	adds	r3, #1
 8006eea:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006eec:	6a3b      	ldr	r3, [r7, #32]
 8006eee:	3301      	adds	r3, #1
 8006ef0:	623b      	str	r3, [r7, #32]
 8006ef2:	6a3a      	ldr	r2, [r7, #32]
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	429a      	cmp	r2, r3
 8006ef8:	d3e6      	bcc.n	8006ec8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006efa:	8bfb      	ldrh	r3, [r7, #30]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d01e      	beq.n	8006f3e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006f00:	2300      	movs	r3, #0
 8006f02:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006f04:	69bb      	ldr	r3, [r7, #24]
 8006f06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f0a:	461a      	mov	r2, r3
 8006f0c:	f107 0310 	add.w	r3, r7, #16
 8006f10:	6812      	ldr	r2, [r2, #0]
 8006f12:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006f14:	693a      	ldr	r2, [r7, #16]
 8006f16:	6a3b      	ldr	r3, [r7, #32]
 8006f18:	b2db      	uxtb	r3, r3
 8006f1a:	00db      	lsls	r3, r3, #3
 8006f1c:	fa22 f303 	lsr.w	r3, r2, r3
 8006f20:	b2da      	uxtb	r2, r3
 8006f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f24:	701a      	strb	r2, [r3, #0]
      i++;
 8006f26:	6a3b      	ldr	r3, [r7, #32]
 8006f28:	3301      	adds	r3, #1
 8006f2a:	623b      	str	r3, [r7, #32]
      pDest++;
 8006f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f2e:	3301      	adds	r3, #1
 8006f30:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006f32:	8bfb      	ldrh	r3, [r7, #30]
 8006f34:	3b01      	subs	r3, #1
 8006f36:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006f38:	8bfb      	ldrh	r3, [r7, #30]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d1ea      	bne.n	8006f14 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	372c      	adds	r7, #44	; 0x2c
 8006f44:	46bd      	mov	sp, r7
 8006f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4a:	4770      	bx	lr

08006f4c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b085      	sub	sp, #20
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	695b      	ldr	r3, [r3, #20]
 8006f58:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	699b      	ldr	r3, [r3, #24]
 8006f5e:	68fa      	ldr	r2, [r7, #12]
 8006f60:	4013      	ands	r3, r2
 8006f62:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006f64:	68fb      	ldr	r3, [r7, #12]
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3714      	adds	r7, #20
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f70:	4770      	bx	lr

08006f72 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006f72:	b480      	push	{r7}
 8006f74:	b083      	sub	sp, #12
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	695b      	ldr	r3, [r3, #20]
 8006f7e:	f003 0301 	and.w	r3, r3, #1
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	370c      	adds	r7, #12
 8006f86:	46bd      	mov	sp, r7
 8006f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8c:	4770      	bx	lr
	...

08006f90 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b085      	sub	sp, #20
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006f98:	2300      	movs	r3, #0
 8006f9a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	3301      	adds	r3, #1
 8006fa0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	4a13      	ldr	r2, [pc, #76]	; (8006ff4 <USB_CoreReset+0x64>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d901      	bls.n	8006fae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006faa:	2303      	movs	r3, #3
 8006fac:	e01b      	b.n	8006fe6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	691b      	ldr	r3, [r3, #16]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	daf2      	bge.n	8006f9c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	691b      	ldr	r3, [r3, #16]
 8006fbe:	f043 0201 	orr.w	r2, r3, #1
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	3301      	adds	r3, #1
 8006fca:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	4a09      	ldr	r2, [pc, #36]	; (8006ff4 <USB_CoreReset+0x64>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d901      	bls.n	8006fd8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006fd4:	2303      	movs	r3, #3
 8006fd6:	e006      	b.n	8006fe6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	691b      	ldr	r3, [r3, #16]
 8006fdc:	f003 0301 	and.w	r3, r3, #1
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	d0f0      	beq.n	8006fc6 <USB_CoreReset+0x36>

  return HAL_OK;
 8006fe4:	2300      	movs	r3, #0
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3714      	adds	r7, #20
 8006fea:	46bd      	mov	sp, r7
 8006fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff0:	4770      	bx	lr
 8006ff2:	bf00      	nop
 8006ff4:	00030d40 	.word	0x00030d40

08006ff8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006ff8:	b084      	sub	sp, #16
 8006ffa:	b580      	push	{r7, lr}
 8006ffc:	b086      	sub	sp, #24
 8006ffe:	af00      	add	r7, sp, #0
 8007000:	6078      	str	r0, [r7, #4]
 8007002:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007006:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800700a:	2300      	movs	r3, #0
 800700c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007018:	461a      	mov	r2, r3
 800701a:	2300      	movs	r3, #0
 800701c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007022:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800702e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800703a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800704a:	2b00      	cmp	r3, #0
 800704c:	d018      	beq.n	8007080 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800704e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007050:	2b01      	cmp	r3, #1
 8007052:	d10a      	bne.n	800706a <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	68fa      	ldr	r2, [r7, #12]
 800705e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007062:	f043 0304 	orr.w	r3, r3, #4
 8007066:	6013      	str	r3, [r2, #0]
 8007068:	e014      	b.n	8007094 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	68fa      	ldr	r2, [r7, #12]
 8007074:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007078:	f023 0304 	bic.w	r3, r3, #4
 800707c:	6013      	str	r3, [r2, #0]
 800707e:	e009      	b.n	8007094 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	68fa      	ldr	r2, [r7, #12]
 800708a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800708e:	f023 0304 	bic.w	r3, r3, #4
 8007092:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007094:	2110      	movs	r1, #16
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f7ff fe5e 	bl	8006d58 <USB_FlushTxFifo>
 800709c:	4603      	mov	r3, r0
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d001      	beq.n	80070a6 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 80070a2:	2301      	movs	r3, #1
 80070a4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f7ff fe8a 	bl	8006dc0 <USB_FlushRxFifo>
 80070ac:	4603      	mov	r3, r0
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d001      	beq.n	80070b6 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 80070b2:	2301      	movs	r3, #1
 80070b4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80070b6:	2300      	movs	r3, #0
 80070b8:	613b      	str	r3, [r7, #16]
 80070ba:	e015      	b.n	80070e8 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	015a      	lsls	r2, r3, #5
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	4413      	add	r3, r2
 80070c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070c8:	461a      	mov	r2, r3
 80070ca:	f04f 33ff 	mov.w	r3, #4294967295
 80070ce:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	015a      	lsls	r2, r3, #5
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	4413      	add	r3, r2
 80070d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070dc:	461a      	mov	r2, r3
 80070de:	2300      	movs	r3, #0
 80070e0:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	3301      	adds	r3, #1
 80070e6:	613b      	str	r3, [r7, #16]
 80070e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ea:	693a      	ldr	r2, [r7, #16]
 80070ec:	429a      	cmp	r2, r3
 80070ee:	d3e5      	bcc.n	80070bc <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2200      	movs	r2, #0
 80070f4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f04f 32ff 	mov.w	r2, #4294967295
 80070fc:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007106:	2b00      	cmp	r3, #0
 8007108:	d00b      	beq.n	8007122 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007110:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	4a13      	ldr	r2, [pc, #76]	; (8007164 <USB_HostInit+0x16c>)
 8007116:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	4a13      	ldr	r2, [pc, #76]	; (8007168 <USB_HostInit+0x170>)
 800711c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8007120:	e009      	b.n	8007136 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2280      	movs	r2, #128	; 0x80
 8007126:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	4a10      	ldr	r2, [pc, #64]	; (800716c <USB_HostInit+0x174>)
 800712c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	4a0f      	ldr	r2, [pc, #60]	; (8007170 <USB_HostInit+0x178>)
 8007132:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007138:	2b00      	cmp	r3, #0
 800713a:	d105      	bne.n	8007148 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	699b      	ldr	r3, [r3, #24]
 8007140:	f043 0210 	orr.w	r2, r3, #16
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	699a      	ldr	r2, [r3, #24]
 800714c:	4b09      	ldr	r3, [pc, #36]	; (8007174 <USB_HostInit+0x17c>)
 800714e:	4313      	orrs	r3, r2
 8007150:	687a      	ldr	r2, [r7, #4]
 8007152:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8007154:	7dfb      	ldrb	r3, [r7, #23]
}
 8007156:	4618      	mov	r0, r3
 8007158:	3718      	adds	r7, #24
 800715a:	46bd      	mov	sp, r7
 800715c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007160:	b004      	add	sp, #16
 8007162:	4770      	bx	lr
 8007164:	01000200 	.word	0x01000200
 8007168:	00e00300 	.word	0x00e00300
 800716c:	00600080 	.word	0x00600080
 8007170:	004000e0 	.word	0x004000e0
 8007174:	a3200008 	.word	0xa3200008

08007178 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007178:	b480      	push	{r7}
 800717a:	b085      	sub	sp, #20
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
 8007180:	460b      	mov	r3, r1
 8007182:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	68fa      	ldr	r2, [r7, #12]
 8007192:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007196:	f023 0303 	bic.w	r3, r3, #3
 800719a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80071a2:	681a      	ldr	r2, [r3, #0]
 80071a4:	78fb      	ldrb	r3, [r7, #3]
 80071a6:	f003 0303 	and.w	r3, r3, #3
 80071aa:	68f9      	ldr	r1, [r7, #12]
 80071ac:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80071b0:	4313      	orrs	r3, r2
 80071b2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80071b4:	78fb      	ldrb	r3, [r7, #3]
 80071b6:	2b01      	cmp	r3, #1
 80071b8:	d107      	bne.n	80071ca <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80071c0:	461a      	mov	r2, r3
 80071c2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80071c6:	6053      	str	r3, [r2, #4]
 80071c8:	e009      	b.n	80071de <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80071ca:	78fb      	ldrb	r3, [r7, #3]
 80071cc:	2b02      	cmp	r3, #2
 80071ce:	d106      	bne.n	80071de <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80071d6:	461a      	mov	r2, r3
 80071d8:	f241 7370 	movw	r3, #6000	; 0x1770
 80071dc:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80071de:	2300      	movs	r3, #0
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3714      	adds	r7, #20
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr

080071ec <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b084      	sub	sp, #16
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80071f8:	2300      	movs	r3, #0
 80071fa:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800720c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	68fa      	ldr	r2, [r7, #12]
 8007212:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007216:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800721a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800721c:	2064      	movs	r0, #100	; 0x64
 800721e:	f7fb fb2f 	bl	8002880 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	68fa      	ldr	r2, [r7, #12]
 8007226:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800722a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800722e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8007230:	200a      	movs	r0, #10
 8007232:	f7fb fb25 	bl	8002880 <HAL_Delay>

  return HAL_OK;
 8007236:	2300      	movs	r3, #0
}
 8007238:	4618      	mov	r0, r3
 800723a:	3710      	adds	r7, #16
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}

08007240 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007240:	b480      	push	{r7}
 8007242:	b085      	sub	sp, #20
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
 8007248:	460b      	mov	r3, r1
 800724a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007250:	2300      	movs	r3, #0
 8007252:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007264:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800726c:	2b00      	cmp	r3, #0
 800726e:	d109      	bne.n	8007284 <USB_DriveVbus+0x44>
 8007270:	78fb      	ldrb	r3, [r7, #3]
 8007272:	2b01      	cmp	r3, #1
 8007274:	d106      	bne.n	8007284 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	68fa      	ldr	r2, [r7, #12]
 800727a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800727e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007282:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800728a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800728e:	d109      	bne.n	80072a4 <USB_DriveVbus+0x64>
 8007290:	78fb      	ldrb	r3, [r7, #3]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d106      	bne.n	80072a4 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	68fa      	ldr	r2, [r7, #12]
 800729a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800729e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80072a2:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80072a4:	2300      	movs	r3, #0
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	3714      	adds	r7, #20
 80072aa:	46bd      	mov	sp, r7
 80072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b0:	4770      	bx	lr

080072b2 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80072b2:	b480      	push	{r7}
 80072b4:	b085      	sub	sp, #20
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80072be:	2300      	movs	r3, #0
 80072c0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	0c5b      	lsrs	r3, r3, #17
 80072d0:	f003 0303 	and.w	r3, r3, #3
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3714      	adds	r7, #20
 80072d8:	46bd      	mov	sp, r7
 80072da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072de:	4770      	bx	lr

080072e0 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80072e0:	b480      	push	{r7}
 80072e2:	b085      	sub	sp, #20
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80072f2:	689b      	ldr	r3, [r3, #8]
 80072f4:	b29b      	uxth	r3, r3
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3714      	adds	r7, #20
 80072fa:	46bd      	mov	sp, r7
 80072fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007300:	4770      	bx	lr
	...

08007304 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b088      	sub	sp, #32
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
 800730c:	4608      	mov	r0, r1
 800730e:	4611      	mov	r1, r2
 8007310:	461a      	mov	r2, r3
 8007312:	4603      	mov	r3, r0
 8007314:	70fb      	strb	r3, [r7, #3]
 8007316:	460b      	mov	r3, r1
 8007318:	70bb      	strb	r3, [r7, #2]
 800731a:	4613      	mov	r3, r2
 800731c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800731e:	2300      	movs	r3, #0
 8007320:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8007326:	78fb      	ldrb	r3, [r7, #3]
 8007328:	015a      	lsls	r2, r3, #5
 800732a:	693b      	ldr	r3, [r7, #16]
 800732c:	4413      	add	r3, r2
 800732e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007332:	461a      	mov	r2, r3
 8007334:	f04f 33ff 	mov.w	r3, #4294967295
 8007338:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800733a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800733e:	2b03      	cmp	r3, #3
 8007340:	d87e      	bhi.n	8007440 <USB_HC_Init+0x13c>
 8007342:	a201      	add	r2, pc, #4	; (adr r2, 8007348 <USB_HC_Init+0x44>)
 8007344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007348:	08007359 	.word	0x08007359
 800734c:	08007403 	.word	0x08007403
 8007350:	08007359 	.word	0x08007359
 8007354:	080073c5 	.word	0x080073c5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007358:	78fb      	ldrb	r3, [r7, #3]
 800735a:	015a      	lsls	r2, r3, #5
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	4413      	add	r3, r2
 8007360:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007364:	461a      	mov	r2, r3
 8007366:	f240 439d 	movw	r3, #1181	; 0x49d
 800736a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800736c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007370:	2b00      	cmp	r3, #0
 8007372:	da10      	bge.n	8007396 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007374:	78fb      	ldrb	r3, [r7, #3]
 8007376:	015a      	lsls	r2, r3, #5
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	4413      	add	r3, r2
 800737c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007380:	68db      	ldr	r3, [r3, #12]
 8007382:	78fa      	ldrb	r2, [r7, #3]
 8007384:	0151      	lsls	r1, r2, #5
 8007386:	693a      	ldr	r2, [r7, #16]
 8007388:	440a      	add	r2, r1
 800738a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800738e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007392:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8007394:	e057      	b.n	8007446 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800739a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d051      	beq.n	8007446 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80073a2:	78fb      	ldrb	r3, [r7, #3]
 80073a4:	015a      	lsls	r2, r3, #5
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	4413      	add	r3, r2
 80073aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073ae:	68db      	ldr	r3, [r3, #12]
 80073b0:	78fa      	ldrb	r2, [r7, #3]
 80073b2:	0151      	lsls	r1, r2, #5
 80073b4:	693a      	ldr	r2, [r7, #16]
 80073b6:	440a      	add	r2, r1
 80073b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80073bc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80073c0:	60d3      	str	r3, [r2, #12]
      break;
 80073c2:	e040      	b.n	8007446 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80073c4:	78fb      	ldrb	r3, [r7, #3]
 80073c6:	015a      	lsls	r2, r3, #5
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	4413      	add	r3, r2
 80073cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073d0:	461a      	mov	r2, r3
 80073d2:	f240 639d 	movw	r3, #1693	; 0x69d
 80073d6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80073d8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	da34      	bge.n	800744a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80073e0:	78fb      	ldrb	r3, [r7, #3]
 80073e2:	015a      	lsls	r2, r3, #5
 80073e4:	693b      	ldr	r3, [r7, #16]
 80073e6:	4413      	add	r3, r2
 80073e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073ec:	68db      	ldr	r3, [r3, #12]
 80073ee:	78fa      	ldrb	r2, [r7, #3]
 80073f0:	0151      	lsls	r1, r2, #5
 80073f2:	693a      	ldr	r2, [r7, #16]
 80073f4:	440a      	add	r2, r1
 80073f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80073fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073fe:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007400:	e023      	b.n	800744a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007402:	78fb      	ldrb	r3, [r7, #3]
 8007404:	015a      	lsls	r2, r3, #5
 8007406:	693b      	ldr	r3, [r7, #16]
 8007408:	4413      	add	r3, r2
 800740a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800740e:	461a      	mov	r2, r3
 8007410:	f240 2325 	movw	r3, #549	; 0x225
 8007414:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007416:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800741a:	2b00      	cmp	r3, #0
 800741c:	da17      	bge.n	800744e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800741e:	78fb      	ldrb	r3, [r7, #3]
 8007420:	015a      	lsls	r2, r3, #5
 8007422:	693b      	ldr	r3, [r7, #16]
 8007424:	4413      	add	r3, r2
 8007426:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800742a:	68db      	ldr	r3, [r3, #12]
 800742c:	78fa      	ldrb	r2, [r7, #3]
 800742e:	0151      	lsls	r1, r2, #5
 8007430:	693a      	ldr	r2, [r7, #16]
 8007432:	440a      	add	r2, r1
 8007434:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007438:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800743c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800743e:	e006      	b.n	800744e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8007440:	2301      	movs	r3, #1
 8007442:	77fb      	strb	r3, [r7, #31]
      break;
 8007444:	e004      	b.n	8007450 <USB_HC_Init+0x14c>
      break;
 8007446:	bf00      	nop
 8007448:	e002      	b.n	8007450 <USB_HC_Init+0x14c>
      break;
 800744a:	bf00      	nop
 800744c:	e000      	b.n	8007450 <USB_HC_Init+0x14c>
      break;
 800744e:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8007450:	78fb      	ldrb	r3, [r7, #3]
 8007452:	015a      	lsls	r2, r3, #5
 8007454:	693b      	ldr	r3, [r7, #16]
 8007456:	4413      	add	r3, r2
 8007458:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800745c:	68db      	ldr	r3, [r3, #12]
 800745e:	78fa      	ldrb	r2, [r7, #3]
 8007460:	0151      	lsls	r1, r2, #5
 8007462:	693a      	ldr	r2, [r7, #16]
 8007464:	440a      	add	r2, r1
 8007466:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800746a:	f043 0302 	orr.w	r3, r3, #2
 800746e:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007470:	693b      	ldr	r3, [r7, #16]
 8007472:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007476:	699a      	ldr	r2, [r3, #24]
 8007478:	78fb      	ldrb	r3, [r7, #3]
 800747a:	f003 030f 	and.w	r3, r3, #15
 800747e:	2101      	movs	r1, #1
 8007480:	fa01 f303 	lsl.w	r3, r1, r3
 8007484:	6939      	ldr	r1, [r7, #16]
 8007486:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800748a:	4313      	orrs	r3, r2
 800748c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	699b      	ldr	r3, [r3, #24]
 8007492:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800749a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	da03      	bge.n	80074aa <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80074a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80074a6:	61bb      	str	r3, [r7, #24]
 80074a8:	e001      	b.n	80074ae <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 80074aa:	2300      	movs	r3, #0
 80074ac:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f7ff feff 	bl	80072b2 <USB_GetHostSpeed>
 80074b4:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80074b6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80074ba:	2b02      	cmp	r3, #2
 80074bc:	d106      	bne.n	80074cc <USB_HC_Init+0x1c8>
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	2b02      	cmp	r3, #2
 80074c2:	d003      	beq.n	80074cc <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80074c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80074c8:	617b      	str	r3, [r7, #20]
 80074ca:	e001      	b.n	80074d0 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80074cc:	2300      	movs	r3, #0
 80074ce:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80074d0:	787b      	ldrb	r3, [r7, #1]
 80074d2:	059b      	lsls	r3, r3, #22
 80074d4:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80074d8:	78bb      	ldrb	r3, [r7, #2]
 80074da:	02db      	lsls	r3, r3, #11
 80074dc:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80074e0:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80074e2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80074e6:	049b      	lsls	r3, r3, #18
 80074e8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80074ec:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80074ee:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80074f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80074f4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80074f6:	69bb      	ldr	r3, [r7, #24]
 80074f8:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80074fa:	78fb      	ldrb	r3, [r7, #3]
 80074fc:	0159      	lsls	r1, r3, #5
 80074fe:	693b      	ldr	r3, [r7, #16]
 8007500:	440b      	add	r3, r1
 8007502:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007506:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800750c:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800750e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007512:	2b03      	cmp	r3, #3
 8007514:	d003      	beq.n	800751e <USB_HC_Init+0x21a>
 8007516:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800751a:	2b01      	cmp	r3, #1
 800751c:	d10f      	bne.n	800753e <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800751e:	78fb      	ldrb	r3, [r7, #3]
 8007520:	015a      	lsls	r2, r3, #5
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	4413      	add	r3, r2
 8007526:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	78fa      	ldrb	r2, [r7, #3]
 800752e:	0151      	lsls	r1, r2, #5
 8007530:	693a      	ldr	r2, [r7, #16]
 8007532:	440a      	add	r2, r1
 8007534:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007538:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800753c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800753e:	7ffb      	ldrb	r3, [r7, #31]
}
 8007540:	4618      	mov	r0, r3
 8007542:	3720      	adds	r7, #32
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}

08007548 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b08c      	sub	sp, #48	; 0x30
 800754c:	af02      	add	r7, sp, #8
 800754e:	60f8      	str	r0, [r7, #12]
 8007550:	60b9      	str	r1, [r7, #8]
 8007552:	4613      	mov	r3, r2
 8007554:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	785b      	ldrb	r3, [r3, #1]
 800755e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8007560:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007564:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800756a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800756e:	2b00      	cmp	r3, #0
 8007570:	d02d      	beq.n	80075ce <USB_HC_StartXfer+0x86>
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	791b      	ldrb	r3, [r3, #4]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d129      	bne.n	80075ce <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800757a:	79fb      	ldrb	r3, [r7, #7]
 800757c:	2b01      	cmp	r3, #1
 800757e:	d117      	bne.n	80075b0 <USB_HC_StartXfer+0x68>
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	79db      	ldrb	r3, [r3, #7]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d003      	beq.n	8007590 <USB_HC_StartXfer+0x48>
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	79db      	ldrb	r3, [r3, #7]
 800758c:	2b02      	cmp	r3, #2
 800758e:	d10f      	bne.n	80075b0 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007590:	69fb      	ldr	r3, [r7, #28]
 8007592:	015a      	lsls	r2, r3, #5
 8007594:	6a3b      	ldr	r3, [r7, #32]
 8007596:	4413      	add	r3, r2
 8007598:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800759c:	68db      	ldr	r3, [r3, #12]
 800759e:	69fa      	ldr	r2, [r7, #28]
 80075a0:	0151      	lsls	r1, r2, #5
 80075a2:	6a3a      	ldr	r2, [r7, #32]
 80075a4:	440a      	add	r2, r1
 80075a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80075aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075ae:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80075b0:	79fb      	ldrb	r3, [r7, #7]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d10b      	bne.n	80075ce <USB_HC_StartXfer+0x86>
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	795b      	ldrb	r3, [r3, #5]
 80075ba:	2b01      	cmp	r3, #1
 80075bc:	d107      	bne.n	80075ce <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	785b      	ldrb	r3, [r3, #1]
 80075c2:	4619      	mov	r1, r3
 80075c4:	68f8      	ldr	r0, [r7, #12]
 80075c6:	f000 fa0f 	bl	80079e8 <USB_DoPing>
      return HAL_OK;
 80075ca:	2300      	movs	r3, #0
 80075cc:	e0f8      	b.n	80077c0 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	695b      	ldr	r3, [r3, #20]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d018      	beq.n	8007608 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	695b      	ldr	r3, [r3, #20]
 80075da:	68ba      	ldr	r2, [r7, #8]
 80075dc:	8912      	ldrh	r2, [r2, #8]
 80075de:	4413      	add	r3, r2
 80075e0:	3b01      	subs	r3, #1
 80075e2:	68ba      	ldr	r2, [r7, #8]
 80075e4:	8912      	ldrh	r2, [r2, #8]
 80075e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80075ea:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80075ec:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80075ee:	8b7b      	ldrh	r3, [r7, #26]
 80075f0:	429a      	cmp	r2, r3
 80075f2:	d90b      	bls.n	800760c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80075f4:	8b7b      	ldrh	r3, [r7, #26]
 80075f6:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80075f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80075fa:	68ba      	ldr	r2, [r7, #8]
 80075fc:	8912      	ldrh	r2, [r2, #8]
 80075fe:	fb03 f202 	mul.w	r2, r3, r2
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	611a      	str	r2, [r3, #16]
 8007606:	e001      	b.n	800760c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8007608:	2301      	movs	r3, #1
 800760a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	78db      	ldrb	r3, [r3, #3]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d007      	beq.n	8007624 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007614:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007616:	68ba      	ldr	r2, [r7, #8]
 8007618:	8912      	ldrh	r2, [r2, #8]
 800761a:	fb03 f202 	mul.w	r2, r3, r2
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	611a      	str	r2, [r3, #16]
 8007622:	e003      	b.n	800762c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	695a      	ldr	r2, [r3, #20]
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	691b      	ldr	r3, [r3, #16]
 8007630:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007634:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007636:	04d9      	lsls	r1, r3, #19
 8007638:	4b63      	ldr	r3, [pc, #396]	; (80077c8 <USB_HC_StartXfer+0x280>)
 800763a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800763c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	7a9b      	ldrb	r3, [r3, #10]
 8007642:	075b      	lsls	r3, r3, #29
 8007644:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007648:	69f9      	ldr	r1, [r7, #28]
 800764a:	0148      	lsls	r0, r1, #5
 800764c:	6a39      	ldr	r1, [r7, #32]
 800764e:	4401      	add	r1, r0
 8007650:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007654:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007656:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007658:	79fb      	ldrb	r3, [r7, #7]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d009      	beq.n	8007672 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	68d9      	ldr	r1, [r3, #12]
 8007662:	69fb      	ldr	r3, [r7, #28]
 8007664:	015a      	lsls	r2, r3, #5
 8007666:	6a3b      	ldr	r3, [r7, #32]
 8007668:	4413      	add	r3, r2
 800766a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800766e:	460a      	mov	r2, r1
 8007670:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007672:	6a3b      	ldr	r3, [r7, #32]
 8007674:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007678:	689b      	ldr	r3, [r3, #8]
 800767a:	f003 0301 	and.w	r3, r3, #1
 800767e:	2b00      	cmp	r3, #0
 8007680:	bf0c      	ite	eq
 8007682:	2301      	moveq	r3, #1
 8007684:	2300      	movne	r3, #0
 8007686:	b2db      	uxtb	r3, r3
 8007688:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800768a:	69fb      	ldr	r3, [r7, #28]
 800768c:	015a      	lsls	r2, r3, #5
 800768e:	6a3b      	ldr	r3, [r7, #32]
 8007690:	4413      	add	r3, r2
 8007692:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	69fa      	ldr	r2, [r7, #28]
 800769a:	0151      	lsls	r1, r2, #5
 800769c:	6a3a      	ldr	r2, [r7, #32]
 800769e:	440a      	add	r2, r1
 80076a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80076a4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80076a8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80076aa:	69fb      	ldr	r3, [r7, #28]
 80076ac:	015a      	lsls	r2, r3, #5
 80076ae:	6a3b      	ldr	r3, [r7, #32]
 80076b0:	4413      	add	r3, r2
 80076b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076b6:	681a      	ldr	r2, [r3, #0]
 80076b8:	7e7b      	ldrb	r3, [r7, #25]
 80076ba:	075b      	lsls	r3, r3, #29
 80076bc:	69f9      	ldr	r1, [r7, #28]
 80076be:	0148      	lsls	r0, r1, #5
 80076c0:	6a39      	ldr	r1, [r7, #32]
 80076c2:	4401      	add	r1, r0
 80076c4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80076c8:	4313      	orrs	r3, r2
 80076ca:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80076cc:	69fb      	ldr	r3, [r7, #28]
 80076ce:	015a      	lsls	r2, r3, #5
 80076d0:	6a3b      	ldr	r3, [r7, #32]
 80076d2:	4413      	add	r3, r2
 80076d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80076e2:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	78db      	ldrb	r3, [r3, #3]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d004      	beq.n	80076f6 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076f2:	613b      	str	r3, [r7, #16]
 80076f4:	e003      	b.n	80076fe <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80076fc:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007704:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007706:	69fb      	ldr	r3, [r7, #28]
 8007708:	015a      	lsls	r2, r3, #5
 800770a:	6a3b      	ldr	r3, [r7, #32]
 800770c:	4413      	add	r3, r2
 800770e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007712:	461a      	mov	r2, r3
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007718:	79fb      	ldrb	r3, [r7, #7]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d001      	beq.n	8007722 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800771e:	2300      	movs	r3, #0
 8007720:	e04e      	b.n	80077c0 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	78db      	ldrb	r3, [r3, #3]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d149      	bne.n	80077be <USB_HC_StartXfer+0x276>
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	695b      	ldr	r3, [r3, #20]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d045      	beq.n	80077be <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	79db      	ldrb	r3, [r3, #7]
 8007736:	2b03      	cmp	r3, #3
 8007738:	d830      	bhi.n	800779c <USB_HC_StartXfer+0x254>
 800773a:	a201      	add	r2, pc, #4	; (adr r2, 8007740 <USB_HC_StartXfer+0x1f8>)
 800773c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007740:	08007751 	.word	0x08007751
 8007744:	08007775 	.word	0x08007775
 8007748:	08007751 	.word	0x08007751
 800774c:	08007775 	.word	0x08007775
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	695b      	ldr	r3, [r3, #20]
 8007754:	3303      	adds	r3, #3
 8007756:	089b      	lsrs	r3, r3, #2
 8007758:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800775a:	8afa      	ldrh	r2, [r7, #22]
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007760:	b29b      	uxth	r3, r3
 8007762:	429a      	cmp	r2, r3
 8007764:	d91c      	bls.n	80077a0 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	699b      	ldr	r3, [r3, #24]
 800776a:	f043 0220 	orr.w	r2, r3, #32
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	619a      	str	r2, [r3, #24]
        }
        break;
 8007772:	e015      	b.n	80077a0 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	695b      	ldr	r3, [r3, #20]
 8007778:	3303      	adds	r3, #3
 800777a:	089b      	lsrs	r3, r3, #2
 800777c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800777e:	8afa      	ldrh	r2, [r7, #22]
 8007780:	6a3b      	ldr	r3, [r7, #32]
 8007782:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007786:	691b      	ldr	r3, [r3, #16]
 8007788:	b29b      	uxth	r3, r3
 800778a:	429a      	cmp	r2, r3
 800778c:	d90a      	bls.n	80077a4 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	699b      	ldr	r3, [r3, #24]
 8007792:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	619a      	str	r2, [r3, #24]
        }
        break;
 800779a:	e003      	b.n	80077a4 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800779c:	bf00      	nop
 800779e:	e002      	b.n	80077a6 <USB_HC_StartXfer+0x25e>
        break;
 80077a0:	bf00      	nop
 80077a2:	e000      	b.n	80077a6 <USB_HC_StartXfer+0x25e>
        break;
 80077a4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	68d9      	ldr	r1, [r3, #12]
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	785a      	ldrb	r2, [r3, #1]
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	695b      	ldr	r3, [r3, #20]
 80077b2:	b29b      	uxth	r3, r3
 80077b4:	2000      	movs	r0, #0
 80077b6:	9000      	str	r0, [sp, #0]
 80077b8:	68f8      	ldr	r0, [r7, #12]
 80077ba:	f7ff fb31 	bl	8006e20 <USB_WritePacket>
  }

  return HAL_OK;
 80077be:	2300      	movs	r3, #0
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	3728      	adds	r7, #40	; 0x28
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}
 80077c8:	1ff80000 	.word	0x1ff80000

080077cc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80077cc:	b480      	push	{r7}
 80077ce:	b085      	sub	sp, #20
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80077de:	695b      	ldr	r3, [r3, #20]
 80077e0:	b29b      	uxth	r3, r3
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3714      	adds	r7, #20
 80077e6:	46bd      	mov	sp, r7
 80077e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ec:	4770      	bx	lr

080077ee <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80077ee:	b480      	push	{r7}
 80077f0:	b089      	sub	sp, #36	; 0x24
 80077f2:	af00      	add	r7, sp, #0
 80077f4:	6078      	str	r0, [r7, #4]
 80077f6:	460b      	mov	r3, r1
 80077f8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80077fe:	78fb      	ldrb	r3, [r7, #3]
 8007800:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007802:	2300      	movs	r3, #0
 8007804:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007806:	69bb      	ldr	r3, [r7, #24]
 8007808:	015a      	lsls	r2, r3, #5
 800780a:	69fb      	ldr	r3, [r7, #28]
 800780c:	4413      	add	r3, r2
 800780e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	0c9b      	lsrs	r3, r3, #18
 8007816:	f003 0303 	and.w	r3, r3, #3
 800781a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800781c:	69bb      	ldr	r3, [r7, #24]
 800781e:	015a      	lsls	r2, r3, #5
 8007820:	69fb      	ldr	r3, [r7, #28]
 8007822:	4413      	add	r3, r2
 8007824:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	0fdb      	lsrs	r3, r3, #31
 800782c:	f003 0301 	and.w	r3, r3, #1
 8007830:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	689b      	ldr	r3, [r3, #8]
 8007836:	f003 0320 	and.w	r3, r3, #32
 800783a:	2b20      	cmp	r3, #32
 800783c:	d104      	bne.n	8007848 <USB_HC_Halt+0x5a>
 800783e:	693b      	ldr	r3, [r7, #16]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d101      	bne.n	8007848 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8007844:	2300      	movs	r3, #0
 8007846:	e0c8      	b.n	80079da <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d002      	beq.n	8007854 <USB_HC_Halt+0x66>
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	2b02      	cmp	r3, #2
 8007852:	d163      	bne.n	800791c <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007854:	69bb      	ldr	r3, [r7, #24]
 8007856:	015a      	lsls	r2, r3, #5
 8007858:	69fb      	ldr	r3, [r7, #28]
 800785a:	4413      	add	r3, r2
 800785c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	69ba      	ldr	r2, [r7, #24]
 8007864:	0151      	lsls	r1, r2, #5
 8007866:	69fa      	ldr	r2, [r7, #28]
 8007868:	440a      	add	r2, r1
 800786a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800786e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007872:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	689b      	ldr	r3, [r3, #8]
 8007878:	f003 0320 	and.w	r3, r3, #32
 800787c:	2b00      	cmp	r3, #0
 800787e:	f040 80ab 	bne.w	80079d8 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007886:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800788a:	2b00      	cmp	r3, #0
 800788c:	d133      	bne.n	80078f6 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800788e:	69bb      	ldr	r3, [r7, #24]
 8007890:	015a      	lsls	r2, r3, #5
 8007892:	69fb      	ldr	r3, [r7, #28]
 8007894:	4413      	add	r3, r2
 8007896:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	69ba      	ldr	r2, [r7, #24]
 800789e:	0151      	lsls	r1, r2, #5
 80078a0:	69fa      	ldr	r2, [r7, #28]
 80078a2:	440a      	add	r2, r1
 80078a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80078a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80078ac:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80078ae:	69bb      	ldr	r3, [r7, #24]
 80078b0:	015a      	lsls	r2, r3, #5
 80078b2:	69fb      	ldr	r3, [r7, #28]
 80078b4:	4413      	add	r3, r2
 80078b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	69ba      	ldr	r2, [r7, #24]
 80078be:	0151      	lsls	r1, r2, #5
 80078c0:	69fa      	ldr	r2, [r7, #28]
 80078c2:	440a      	add	r2, r1
 80078c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80078c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80078cc:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	3301      	adds	r3, #1
 80078d2:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80078da:	d81d      	bhi.n	8007918 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80078dc:	69bb      	ldr	r3, [r7, #24]
 80078de:	015a      	lsls	r2, r3, #5
 80078e0:	69fb      	ldr	r3, [r7, #28]
 80078e2:	4413      	add	r3, r2
 80078e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80078ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80078f2:	d0ec      	beq.n	80078ce <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80078f4:	e070      	b.n	80079d8 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80078f6:	69bb      	ldr	r3, [r7, #24]
 80078f8:	015a      	lsls	r2, r3, #5
 80078fa:	69fb      	ldr	r3, [r7, #28]
 80078fc:	4413      	add	r3, r2
 80078fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	69ba      	ldr	r2, [r7, #24]
 8007906:	0151      	lsls	r1, r2, #5
 8007908:	69fa      	ldr	r2, [r7, #28]
 800790a:	440a      	add	r2, r1
 800790c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007910:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007914:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007916:	e05f      	b.n	80079d8 <USB_HC_Halt+0x1ea>
            break;
 8007918:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800791a:	e05d      	b.n	80079d8 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800791c:	69bb      	ldr	r3, [r7, #24]
 800791e:	015a      	lsls	r2, r3, #5
 8007920:	69fb      	ldr	r3, [r7, #28]
 8007922:	4413      	add	r3, r2
 8007924:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	69ba      	ldr	r2, [r7, #24]
 800792c:	0151      	lsls	r1, r2, #5
 800792e:	69fa      	ldr	r2, [r7, #28]
 8007930:	440a      	add	r2, r1
 8007932:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007936:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800793a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800793c:	69fb      	ldr	r3, [r7, #28]
 800793e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007942:	691b      	ldr	r3, [r3, #16]
 8007944:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007948:	2b00      	cmp	r3, #0
 800794a:	d133      	bne.n	80079b4 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800794c:	69bb      	ldr	r3, [r7, #24]
 800794e:	015a      	lsls	r2, r3, #5
 8007950:	69fb      	ldr	r3, [r7, #28]
 8007952:	4413      	add	r3, r2
 8007954:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	69ba      	ldr	r2, [r7, #24]
 800795c:	0151      	lsls	r1, r2, #5
 800795e:	69fa      	ldr	r2, [r7, #28]
 8007960:	440a      	add	r2, r1
 8007962:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007966:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800796a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800796c:	69bb      	ldr	r3, [r7, #24]
 800796e:	015a      	lsls	r2, r3, #5
 8007970:	69fb      	ldr	r3, [r7, #28]
 8007972:	4413      	add	r3, r2
 8007974:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	69ba      	ldr	r2, [r7, #24]
 800797c:	0151      	lsls	r1, r2, #5
 800797e:	69fa      	ldr	r2, [r7, #28]
 8007980:	440a      	add	r2, r1
 8007982:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007986:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800798a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	3301      	adds	r3, #1
 8007990:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007998:	d81d      	bhi.n	80079d6 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800799a:	69bb      	ldr	r3, [r7, #24]
 800799c:	015a      	lsls	r2, r3, #5
 800799e:	69fb      	ldr	r3, [r7, #28]
 80079a0:	4413      	add	r3, r2
 80079a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80079ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80079b0:	d0ec      	beq.n	800798c <USB_HC_Halt+0x19e>
 80079b2:	e011      	b.n	80079d8 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80079b4:	69bb      	ldr	r3, [r7, #24]
 80079b6:	015a      	lsls	r2, r3, #5
 80079b8:	69fb      	ldr	r3, [r7, #28]
 80079ba:	4413      	add	r3, r2
 80079bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	69ba      	ldr	r2, [r7, #24]
 80079c4:	0151      	lsls	r1, r2, #5
 80079c6:	69fa      	ldr	r2, [r7, #28]
 80079c8:	440a      	add	r2, r1
 80079ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80079ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80079d2:	6013      	str	r3, [r2, #0]
 80079d4:	e000      	b.n	80079d8 <USB_HC_Halt+0x1ea>
          break;
 80079d6:	bf00      	nop
    }
  }

  return HAL_OK;
 80079d8:	2300      	movs	r3, #0
}
 80079da:	4618      	mov	r0, r3
 80079dc:	3724      	adds	r7, #36	; 0x24
 80079de:	46bd      	mov	sp, r7
 80079e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e4:	4770      	bx	lr
	...

080079e8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80079e8:	b480      	push	{r7}
 80079ea:	b087      	sub	sp, #28
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
 80079f0:	460b      	mov	r3, r1
 80079f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80079f8:	78fb      	ldrb	r3, [r7, #3]
 80079fa:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80079fc:	2301      	movs	r3, #1
 80079fe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	04da      	lsls	r2, r3, #19
 8007a04:	4b15      	ldr	r3, [pc, #84]	; (8007a5c <USB_DoPing+0x74>)
 8007a06:	4013      	ands	r3, r2
 8007a08:	693a      	ldr	r2, [r7, #16]
 8007a0a:	0151      	lsls	r1, r2, #5
 8007a0c:	697a      	ldr	r2, [r7, #20]
 8007a0e:	440a      	add	r2, r1
 8007a10:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a14:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007a18:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	015a      	lsls	r2, r3, #5
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	4413      	add	r3, r2
 8007a22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007a30:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007a38:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	015a      	lsls	r2, r3, #5
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	4413      	add	r3, r2
 8007a42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a46:	461a      	mov	r2, r3
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007a4c:	2300      	movs	r3, #0
}
 8007a4e:	4618      	mov	r0, r3
 8007a50:	371c      	adds	r7, #28
 8007a52:	46bd      	mov	sp, r7
 8007a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a58:	4770      	bx	lr
 8007a5a:	bf00      	nop
 8007a5c:	1ff80000 	.word	0x1ff80000

08007a60 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b088      	sub	sp, #32
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8007a70:	2300      	movs	r3, #0
 8007a72:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f7ff f911 	bl	8006c9c <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007a7a:	2110      	movs	r1, #16
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f7ff f96b 	bl	8006d58 <USB_FlushTxFifo>
 8007a82:	4603      	mov	r3, r0
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d001      	beq.n	8007a8c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007a88:	2301      	movs	r3, #1
 8007a8a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f7ff f997 	bl	8006dc0 <USB_FlushRxFifo>
 8007a92:	4603      	mov	r3, r0
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d001      	beq.n	8007a9c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007a98:	2301      	movs	r3, #1
 8007a9a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	61bb      	str	r3, [r7, #24]
 8007aa0:	e01f      	b.n	8007ae2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8007aa2:	69bb      	ldr	r3, [r7, #24]
 8007aa4:	015a      	lsls	r2, r3, #5
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	4413      	add	r3, r2
 8007aaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007ab8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007aba:	693b      	ldr	r3, [r7, #16]
 8007abc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007ac0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007ac8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007aca:	69bb      	ldr	r3, [r7, #24]
 8007acc:	015a      	lsls	r2, r3, #5
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	4413      	add	r3, r2
 8007ad2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ad6:	461a      	mov	r2, r3
 8007ad8:	693b      	ldr	r3, [r7, #16]
 8007ada:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007adc:	69bb      	ldr	r3, [r7, #24]
 8007ade:	3301      	adds	r3, #1
 8007ae0:	61bb      	str	r3, [r7, #24]
 8007ae2:	69bb      	ldr	r3, [r7, #24]
 8007ae4:	2b0f      	cmp	r3, #15
 8007ae6:	d9dc      	bls.n	8007aa2 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007ae8:	2300      	movs	r3, #0
 8007aea:	61bb      	str	r3, [r7, #24]
 8007aec:	e034      	b.n	8007b58 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8007aee:	69bb      	ldr	r3, [r7, #24]
 8007af0:	015a      	lsls	r2, r3, #5
 8007af2:	697b      	ldr	r3, [r7, #20]
 8007af4:	4413      	add	r3, r2
 8007af6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007b04:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007b0c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007b0e:	693b      	ldr	r3, [r7, #16]
 8007b10:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007b14:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007b16:	69bb      	ldr	r3, [r7, #24]
 8007b18:	015a      	lsls	r2, r3, #5
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	4413      	add	r3, r2
 8007b1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b22:	461a      	mov	r2, r3
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	3301      	adds	r3, #1
 8007b2c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007b34:	d80c      	bhi.n	8007b50 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007b36:	69bb      	ldr	r3, [r7, #24]
 8007b38:	015a      	lsls	r2, r3, #5
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	4413      	add	r3, r2
 8007b3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007b48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007b4c:	d0ec      	beq.n	8007b28 <USB_StopHost+0xc8>
 8007b4e:	e000      	b.n	8007b52 <USB_StopHost+0xf2>
        break;
 8007b50:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007b52:	69bb      	ldr	r3, [r7, #24]
 8007b54:	3301      	adds	r3, #1
 8007b56:	61bb      	str	r3, [r7, #24]
 8007b58:	69bb      	ldr	r3, [r7, #24]
 8007b5a:	2b0f      	cmp	r3, #15
 8007b5c:	d9c7      	bls.n	8007aee <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8007b5e:	697b      	ldr	r3, [r7, #20]
 8007b60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b64:	461a      	mov	r2, r3
 8007b66:	f04f 33ff 	mov.w	r3, #4294967295
 8007b6a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f04f 32ff 	mov.w	r2, #4294967295
 8007b72:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f7ff f880 	bl	8006c7a <USB_EnableGlobalInt>

  return ret;
 8007b7a:	7ffb      	ldrb	r3, [r7, #31]
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3720      	adds	r7, #32
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}

08007b84 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007b84:	b590      	push	{r4, r7, lr}
 8007b86:	b089      	sub	sp, #36	; 0x24
 8007b88:	af04      	add	r7, sp, #16
 8007b8a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	2202      	movs	r2, #2
 8007b90:	2102      	movs	r1, #2
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f000 fc66 	bl	8008464 <USBH_FindInterface>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007b9c:	7bfb      	ldrb	r3, [r7, #15]
 8007b9e:	2bff      	cmp	r3, #255	; 0xff
 8007ba0:	d002      	beq.n	8007ba8 <USBH_CDC_InterfaceInit+0x24>
 8007ba2:	7bfb      	ldrb	r3, [r7, #15]
 8007ba4:	2b01      	cmp	r3, #1
 8007ba6:	d901      	bls.n	8007bac <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007ba8:	2302      	movs	r3, #2
 8007baa:	e13d      	b.n	8007e28 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007bac:	7bfb      	ldrb	r3, [r7, #15]
 8007bae:	4619      	mov	r1, r3
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f000 fc3b 	bl	800842c <USBH_SelectInterface>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007bba:	7bbb      	ldrb	r3, [r7, #14]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d001      	beq.n	8007bc4 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007bc0:	2302      	movs	r3, #2
 8007bc2:	e131      	b.n	8007e28 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8007bca:	2050      	movs	r0, #80	; 0x50
 8007bcc:	f002 fafe 	bl	800a1cc <malloc>
 8007bd0:	4603      	mov	r3, r0
 8007bd2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007bda:	69db      	ldr	r3, [r3, #28]
 8007bdc:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d101      	bne.n	8007be8 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007be4:	2302      	movs	r3, #2
 8007be6:	e11f      	b.n	8007e28 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007be8:	2250      	movs	r2, #80	; 0x50
 8007bea:	2100      	movs	r1, #0
 8007bec:	68b8      	ldr	r0, [r7, #8]
 8007bee:	f002 fafd 	bl	800a1ec <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007bf2:	7bfb      	ldrb	r3, [r7, #15]
 8007bf4:	687a      	ldr	r2, [r7, #4]
 8007bf6:	211a      	movs	r1, #26
 8007bf8:	fb01 f303 	mul.w	r3, r1, r3
 8007bfc:	4413      	add	r3, r2
 8007bfe:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007c02:	781b      	ldrb	r3, [r3, #0]
 8007c04:	b25b      	sxtb	r3, r3
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	da15      	bge.n	8007c36 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007c0a:	7bfb      	ldrb	r3, [r7, #15]
 8007c0c:	687a      	ldr	r2, [r7, #4]
 8007c0e:	211a      	movs	r1, #26
 8007c10:	fb01 f303 	mul.w	r3, r1, r3
 8007c14:	4413      	add	r3, r2
 8007c16:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007c1a:	781a      	ldrb	r2, [r3, #0]
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007c20:	7bfb      	ldrb	r3, [r7, #15]
 8007c22:	687a      	ldr	r2, [r7, #4]
 8007c24:	211a      	movs	r1, #26
 8007c26:	fb01 f303 	mul.w	r3, r1, r3
 8007c2a:	4413      	add	r3, r2
 8007c2c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007c30:	881a      	ldrh	r2, [r3, #0]
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	785b      	ldrb	r3, [r3, #1]
 8007c3a:	4619      	mov	r1, r3
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f001 ff2c 	bl	8009a9a <USBH_AllocPipe>
 8007c42:	4603      	mov	r3, r0
 8007c44:	461a      	mov	r2, r3
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	7819      	ldrb	r1, [r3, #0]
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	7858      	ldrb	r0, [r3, #1]
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007c5e:	68ba      	ldr	r2, [r7, #8]
 8007c60:	8952      	ldrh	r2, [r2, #10]
 8007c62:	9202      	str	r2, [sp, #8]
 8007c64:	2203      	movs	r2, #3
 8007c66:	9201      	str	r2, [sp, #4]
 8007c68:	9300      	str	r3, [sp, #0]
 8007c6a:	4623      	mov	r3, r4
 8007c6c:	4602      	mov	r2, r0
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f001 fee4 	bl	8009a3c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	781b      	ldrb	r3, [r3, #0]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	4619      	mov	r1, r3
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f002 f9f3 	bl	800a068 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8007c82:	2300      	movs	r3, #0
 8007c84:	2200      	movs	r2, #0
 8007c86:	210a      	movs	r1, #10
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f000 fbeb 	bl	8008464 <USBH_FindInterface>
 8007c8e:	4603      	mov	r3, r0
 8007c90:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007c92:	7bfb      	ldrb	r3, [r7, #15]
 8007c94:	2bff      	cmp	r3, #255	; 0xff
 8007c96:	d002      	beq.n	8007c9e <USBH_CDC_InterfaceInit+0x11a>
 8007c98:	7bfb      	ldrb	r3, [r7, #15]
 8007c9a:	2b01      	cmp	r3, #1
 8007c9c:	d901      	bls.n	8007ca2 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007c9e:	2302      	movs	r3, #2
 8007ca0:	e0c2      	b.n	8007e28 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007ca2:	7bfb      	ldrb	r3, [r7, #15]
 8007ca4:	687a      	ldr	r2, [r7, #4]
 8007ca6:	211a      	movs	r1, #26
 8007ca8:	fb01 f303 	mul.w	r3, r1, r3
 8007cac:	4413      	add	r3, r2
 8007cae:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007cb2:	781b      	ldrb	r3, [r3, #0]
 8007cb4:	b25b      	sxtb	r3, r3
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	da16      	bge.n	8007ce8 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007cba:	7bfb      	ldrb	r3, [r7, #15]
 8007cbc:	687a      	ldr	r2, [r7, #4]
 8007cbe:	211a      	movs	r1, #26
 8007cc0:	fb01 f303 	mul.w	r3, r1, r3
 8007cc4:	4413      	add	r3, r2
 8007cc6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007cca:	781a      	ldrb	r2, [r3, #0]
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007cd0:	7bfb      	ldrb	r3, [r7, #15]
 8007cd2:	687a      	ldr	r2, [r7, #4]
 8007cd4:	211a      	movs	r1, #26
 8007cd6:	fb01 f303 	mul.w	r3, r1, r3
 8007cda:	4413      	add	r3, r2
 8007cdc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007ce0:	881a      	ldrh	r2, [r3, #0]
 8007ce2:	68bb      	ldr	r3, [r7, #8]
 8007ce4:	835a      	strh	r2, [r3, #26]
 8007ce6:	e015      	b.n	8007d14 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007ce8:	7bfb      	ldrb	r3, [r7, #15]
 8007cea:	687a      	ldr	r2, [r7, #4]
 8007cec:	211a      	movs	r1, #26
 8007cee:	fb01 f303 	mul.w	r3, r1, r3
 8007cf2:	4413      	add	r3, r2
 8007cf4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007cf8:	781a      	ldrb	r2, [r3, #0]
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007cfe:	7bfb      	ldrb	r3, [r7, #15]
 8007d00:	687a      	ldr	r2, [r7, #4]
 8007d02:	211a      	movs	r1, #26
 8007d04:	fb01 f303 	mul.w	r3, r1, r3
 8007d08:	4413      	add	r3, r2
 8007d0a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007d0e:	881a      	ldrh	r2, [r3, #0]
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8007d14:	7bfb      	ldrb	r3, [r7, #15]
 8007d16:	687a      	ldr	r2, [r7, #4]
 8007d18:	211a      	movs	r1, #26
 8007d1a:	fb01 f303 	mul.w	r3, r1, r3
 8007d1e:	4413      	add	r3, r2
 8007d20:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007d24:	781b      	ldrb	r3, [r3, #0]
 8007d26:	b25b      	sxtb	r3, r3
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	da16      	bge.n	8007d5a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007d2c:	7bfb      	ldrb	r3, [r7, #15]
 8007d2e:	687a      	ldr	r2, [r7, #4]
 8007d30:	211a      	movs	r1, #26
 8007d32:	fb01 f303 	mul.w	r3, r1, r3
 8007d36:	4413      	add	r3, r2
 8007d38:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007d3c:	781a      	ldrb	r2, [r3, #0]
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007d42:	7bfb      	ldrb	r3, [r7, #15]
 8007d44:	687a      	ldr	r2, [r7, #4]
 8007d46:	211a      	movs	r1, #26
 8007d48:	fb01 f303 	mul.w	r3, r1, r3
 8007d4c:	4413      	add	r3, r2
 8007d4e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007d52:	881a      	ldrh	r2, [r3, #0]
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	835a      	strh	r2, [r3, #26]
 8007d58:	e015      	b.n	8007d86 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007d5a:	7bfb      	ldrb	r3, [r7, #15]
 8007d5c:	687a      	ldr	r2, [r7, #4]
 8007d5e:	211a      	movs	r1, #26
 8007d60:	fb01 f303 	mul.w	r3, r1, r3
 8007d64:	4413      	add	r3, r2
 8007d66:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007d6a:	781a      	ldrb	r2, [r3, #0]
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007d70:	7bfb      	ldrb	r3, [r7, #15]
 8007d72:	687a      	ldr	r2, [r7, #4]
 8007d74:	211a      	movs	r1, #26
 8007d76:	fb01 f303 	mul.w	r3, r1, r3
 8007d7a:	4413      	add	r3, r2
 8007d7c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007d80:	881a      	ldrh	r2, [r3, #0]
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8007d86:	68bb      	ldr	r3, [r7, #8]
 8007d88:	7b9b      	ldrb	r3, [r3, #14]
 8007d8a:	4619      	mov	r1, r3
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f001 fe84 	bl	8009a9a <USBH_AllocPipe>
 8007d92:	4603      	mov	r3, r0
 8007d94:	461a      	mov	r2, r3
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	7bdb      	ldrb	r3, [r3, #15]
 8007d9e:	4619      	mov	r1, r3
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f001 fe7a 	bl	8009a9a <USBH_AllocPipe>
 8007da6:	4603      	mov	r3, r0
 8007da8:	461a      	mov	r2, r3
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	7b59      	ldrb	r1, [r3, #13]
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	7b98      	ldrb	r0, [r3, #14]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007dc2:	68ba      	ldr	r2, [r7, #8]
 8007dc4:	8b12      	ldrh	r2, [r2, #24]
 8007dc6:	9202      	str	r2, [sp, #8]
 8007dc8:	2202      	movs	r2, #2
 8007dca:	9201      	str	r2, [sp, #4]
 8007dcc:	9300      	str	r3, [sp, #0]
 8007dce:	4623      	mov	r3, r4
 8007dd0:	4602      	mov	r2, r0
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f001 fe32 	bl	8009a3c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	7b19      	ldrb	r1, [r3, #12]
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	7bd8      	ldrb	r0, [r3, #15]
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007dec:	68ba      	ldr	r2, [r7, #8]
 8007dee:	8b52      	ldrh	r2, [r2, #26]
 8007df0:	9202      	str	r2, [sp, #8]
 8007df2:	2202      	movs	r2, #2
 8007df4:	9201      	str	r2, [sp, #4]
 8007df6:	9300      	str	r3, [sp, #0]
 8007df8:	4623      	mov	r3, r4
 8007dfa:	4602      	mov	r2, r0
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f001 fe1d 	bl	8009a3c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	2200      	movs	r2, #0
 8007e06:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	7b5b      	ldrb	r3, [r3, #13]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	4619      	mov	r1, r3
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f002 f928 	bl	800a068 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	7b1b      	ldrb	r3, [r3, #12]
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	4619      	mov	r1, r3
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	f002 f921 	bl	800a068 <USBH_LL_SetToggle>

  return USBH_OK;
 8007e26:	2300      	movs	r3, #0
}
 8007e28:	4618      	mov	r0, r3
 8007e2a:	3714      	adds	r7, #20
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bd90      	pop	{r4, r7, pc}

08007e30 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b084      	sub	sp, #16
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007e3e:	69db      	ldr	r3, [r3, #28]
 8007e40:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	781b      	ldrb	r3, [r3, #0]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d00e      	beq.n	8007e68 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	781b      	ldrb	r3, [r3, #0]
 8007e4e:	4619      	mov	r1, r3
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f001 fe12 	bl	8009a7a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	781b      	ldrb	r3, [r3, #0]
 8007e5a:	4619      	mov	r1, r3
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f001 fe3d 	bl	8009adc <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	2200      	movs	r2, #0
 8007e66:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	7b1b      	ldrb	r3, [r3, #12]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d00e      	beq.n	8007e8e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	7b1b      	ldrb	r3, [r3, #12]
 8007e74:	4619      	mov	r1, r3
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f001 fdff 	bl	8009a7a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	7b1b      	ldrb	r3, [r3, #12]
 8007e80:	4619      	mov	r1, r3
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f001 fe2a 	bl	8009adc <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	7b5b      	ldrb	r3, [r3, #13]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d00e      	beq.n	8007eb4 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	7b5b      	ldrb	r3, [r3, #13]
 8007e9a:	4619      	mov	r1, r3
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f001 fdec 	bl	8009a7a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	7b5b      	ldrb	r3, [r3, #13]
 8007ea6:	4619      	mov	r1, r3
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f001 fe17 	bl	8009adc <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007eba:	69db      	ldr	r3, [r3, #28]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d00b      	beq.n	8007ed8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007ec6:	69db      	ldr	r3, [r3, #28]
 8007ec8:	4618      	mov	r0, r3
 8007eca:	f002 f987 	bl	800a1dc <free>
    phost->pActiveClass->pData = 0U;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007ed8:	2300      	movs	r3, #0
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	3710      	adds	r7, #16
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}

08007ee2 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007ee2:	b580      	push	{r7, lr}
 8007ee4:	b084      	sub	sp, #16
 8007ee6:	af00      	add	r7, sp, #0
 8007ee8:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007ef0:	69db      	ldr	r3, [r3, #28]
 8007ef2:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	3340      	adds	r3, #64	; 0x40
 8007ef8:	4619      	mov	r1, r3
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f000 f8b1 	bl	8008062 <GetLineCoding>
 8007f00:	4603      	mov	r3, r0
 8007f02:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007f04:	7afb      	ldrb	r3, [r7, #11]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d105      	bne.n	8007f16 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007f10:	2102      	movs	r1, #2
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8007f16:	7afb      	ldrb	r3, [r7, #11]
}
 8007f18:	4618      	mov	r0, r3
 8007f1a:	3710      	adds	r7, #16
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd80      	pop	{r7, pc}

08007f20 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b084      	sub	sp, #16
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007f28:	2301      	movs	r3, #1
 8007f2a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007f36:	69db      	ldr	r3, [r3, #28]
 8007f38:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8007f3a:	68bb      	ldr	r3, [r7, #8]
 8007f3c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007f40:	2b04      	cmp	r3, #4
 8007f42:	d877      	bhi.n	8008034 <USBH_CDC_Process+0x114>
 8007f44:	a201      	add	r2, pc, #4	; (adr r2, 8007f4c <USBH_CDC_Process+0x2c>)
 8007f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f4a:	bf00      	nop
 8007f4c:	08007f61 	.word	0x08007f61
 8007f50:	08007f67 	.word	0x08007f67
 8007f54:	08007f97 	.word	0x08007f97
 8007f58:	0800800b 	.word	0x0800800b
 8007f5c:	08008019 	.word	0x08008019
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007f60:	2300      	movs	r3, #0
 8007f62:	73fb      	strb	r3, [r7, #15]
      break;
 8007f64:	e06d      	b.n	8008042 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8007f66:	68bb      	ldr	r3, [r7, #8]
 8007f68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f6a:	4619      	mov	r1, r3
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f000 f897 	bl	80080a0 <SetLineCoding>
 8007f72:	4603      	mov	r3, r0
 8007f74:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007f76:	7bbb      	ldrb	r3, [r7, #14]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d104      	bne.n	8007f86 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	2202      	movs	r2, #2
 8007f80:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007f84:	e058      	b.n	8008038 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8007f86:	7bbb      	ldrb	r3, [r7, #14]
 8007f88:	2b01      	cmp	r3, #1
 8007f8a:	d055      	beq.n	8008038 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	2204      	movs	r2, #4
 8007f90:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007f94:	e050      	b.n	8008038 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	3340      	adds	r3, #64	; 0x40
 8007f9a:	4619      	mov	r1, r3
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f000 f860 	bl	8008062 <GetLineCoding>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007fa6:	7bbb      	ldrb	r3, [r7, #14]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d126      	bne.n	8007ffa <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	2200      	movs	r2, #0
 8007fb0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fbe:	791b      	ldrb	r3, [r3, #4]
 8007fc0:	429a      	cmp	r2, r3
 8007fc2:	d13b      	bne.n	800803c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fce:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007fd0:	429a      	cmp	r2, r3
 8007fd2:	d133      	bne.n	800803c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fde:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007fe0:	429a      	cmp	r2, r3
 8007fe2:	d12b      	bne.n	800803c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fec:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007fee:	429a      	cmp	r2, r3
 8007ff0:	d124      	bne.n	800803c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f000 f958 	bl	80082a8 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007ff8:	e020      	b.n	800803c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8007ffa:	7bbb      	ldrb	r3, [r7, #14]
 8007ffc:	2b01      	cmp	r3, #1
 8007ffe:	d01d      	beq.n	800803c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	2204      	movs	r2, #4
 8008004:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008008:	e018      	b.n	800803c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f000 f867 	bl	80080de <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f000 f8da 	bl	80081ca <CDC_ProcessReception>
      break;
 8008016:	e014      	b.n	8008042 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8008018:	2100      	movs	r1, #0
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f000 ffef 	bl	8008ffe <USBH_ClrFeature>
 8008020:	4603      	mov	r3, r0
 8008022:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008024:	7bbb      	ldrb	r3, [r7, #14]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d10a      	bne.n	8008040 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	2200      	movs	r2, #0
 800802e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8008032:	e005      	b.n	8008040 <USBH_CDC_Process+0x120>

    default:
      break;
 8008034:	bf00      	nop
 8008036:	e004      	b.n	8008042 <USBH_CDC_Process+0x122>
      break;
 8008038:	bf00      	nop
 800803a:	e002      	b.n	8008042 <USBH_CDC_Process+0x122>
      break;
 800803c:	bf00      	nop
 800803e:	e000      	b.n	8008042 <USBH_CDC_Process+0x122>
      break;
 8008040:	bf00      	nop

  }

  return status;
 8008042:	7bfb      	ldrb	r3, [r7, #15]
}
 8008044:	4618      	mov	r0, r3
 8008046:	3710      	adds	r7, #16
 8008048:	46bd      	mov	sp, r7
 800804a:	bd80      	pop	{r7, pc}

0800804c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800804c:	b480      	push	{r7}
 800804e:	b083      	sub	sp, #12
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008054:	2300      	movs	r3, #0
}
 8008056:	4618      	mov	r0, r3
 8008058:	370c      	adds	r7, #12
 800805a:	46bd      	mov	sp, r7
 800805c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008060:	4770      	bx	lr

08008062 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8008062:	b580      	push	{r7, lr}
 8008064:	b082      	sub	sp, #8
 8008066:	af00      	add	r7, sp, #0
 8008068:	6078      	str	r0, [r7, #4]
 800806a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	22a1      	movs	r2, #161	; 0xa1
 8008070:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2221      	movs	r2, #33	; 0x21
 8008076:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2200      	movs	r2, #0
 800807c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2200      	movs	r2, #0
 8008082:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2207      	movs	r2, #7
 8008088:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	2207      	movs	r2, #7
 800808e:	4619      	mov	r1, r3
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f001 fa81 	bl	8009598 <USBH_CtlReq>
 8008096:	4603      	mov	r3, r0
}
 8008098:	4618      	mov	r0, r3
 800809a:	3708      	adds	r7, #8
 800809c:	46bd      	mov	sp, r7
 800809e:	bd80      	pop	{r7, pc}

080080a0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b082      	sub	sp, #8
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
 80080a8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2221      	movs	r2, #33	; 0x21
 80080ae:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2220      	movs	r2, #32
 80080b4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2200      	movs	r2, #0
 80080ba:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2200      	movs	r2, #0
 80080c0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2207      	movs	r2, #7
 80080c6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	2207      	movs	r2, #7
 80080cc:	4619      	mov	r1, r3
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f001 fa62 	bl	8009598 <USBH_CtlReq>
 80080d4:	4603      	mov	r3, r0
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	3708      	adds	r7, #8
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}

080080de <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80080de:	b580      	push	{r7, lr}
 80080e0:	b086      	sub	sp, #24
 80080e2:	af02      	add	r7, sp, #8
 80080e4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80080ec:	69db      	ldr	r3, [r3, #28]
 80080ee:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80080f0:	2300      	movs	r3, #0
 80080f2:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80080fa:	2b01      	cmp	r3, #1
 80080fc:	d002      	beq.n	8008104 <CDC_ProcessTransmission+0x26>
 80080fe:	2b02      	cmp	r3, #2
 8008100:	d023      	beq.n	800814a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8008102:	e05e      	b.n	80081c2 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008108:	68fa      	ldr	r2, [r7, #12]
 800810a:	8b12      	ldrh	r2, [r2, #24]
 800810c:	4293      	cmp	r3, r2
 800810e:	d90b      	bls.n	8008128 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	69d9      	ldr	r1, [r3, #28]
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	8b1a      	ldrh	r2, [r3, #24]
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	7b5b      	ldrb	r3, [r3, #13]
 800811c:	2001      	movs	r0, #1
 800811e:	9000      	str	r0, [sp, #0]
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f001 fc48 	bl	80099b6 <USBH_BulkSendData>
 8008126:	e00b      	b.n	8008140 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8008130:	b29a      	uxth	r2, r3
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	7b5b      	ldrb	r3, [r3, #13]
 8008136:	2001      	movs	r0, #1
 8008138:	9000      	str	r0, [sp, #0]
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f001 fc3b 	bl	80099b6 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	2202      	movs	r2, #2
 8008144:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008148:	e03b      	b.n	80081c2 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	7b5b      	ldrb	r3, [r3, #13]
 800814e:	4619      	mov	r1, r3
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f001 ff5f 	bl	800a014 <USBH_LL_GetURBState>
 8008156:	4603      	mov	r3, r0
 8008158:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800815a:	7afb      	ldrb	r3, [r7, #11]
 800815c:	2b01      	cmp	r3, #1
 800815e:	d128      	bne.n	80081b2 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008164:	68fa      	ldr	r2, [r7, #12]
 8008166:	8b12      	ldrh	r2, [r2, #24]
 8008168:	4293      	cmp	r3, r2
 800816a:	d90e      	bls.n	800818a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008170:	68fa      	ldr	r2, [r7, #12]
 8008172:	8b12      	ldrh	r2, [r2, #24]
 8008174:	1a9a      	subs	r2, r3, r2
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	69db      	ldr	r3, [r3, #28]
 800817e:	68fa      	ldr	r2, [r7, #12]
 8008180:	8b12      	ldrh	r2, [r2, #24]
 8008182:	441a      	add	r2, r3
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	61da      	str	r2, [r3, #28]
 8008188:	e002      	b.n	8008190 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	2200      	movs	r2, #0
 800818e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008194:	2b00      	cmp	r3, #0
 8008196:	d004      	beq.n	80081a2 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	2201      	movs	r2, #1
 800819c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80081a0:	e00e      	b.n	80081c0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	2200      	movs	r2, #0
 80081a6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f000 f868 	bl	8008280 <USBH_CDC_TransmitCallback>
      break;
 80081b0:	e006      	b.n	80081c0 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80081b2:	7afb      	ldrb	r3, [r7, #11]
 80081b4:	2b02      	cmp	r3, #2
 80081b6:	d103      	bne.n	80081c0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	2201      	movs	r2, #1
 80081bc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80081c0:	bf00      	nop
  }
}
 80081c2:	bf00      	nop
 80081c4:	3710      	adds	r7, #16
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bd80      	pop	{r7, pc}

080081ca <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80081ca:	b580      	push	{r7, lr}
 80081cc:	b086      	sub	sp, #24
 80081ce:	af00      	add	r7, sp, #0
 80081d0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80081d8:	69db      	ldr	r3, [r3, #28]
 80081da:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80081dc:	2300      	movs	r3, #0
 80081de:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80081e0:	697b      	ldr	r3, [r7, #20]
 80081e2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80081e6:	2b03      	cmp	r3, #3
 80081e8:	d002      	beq.n	80081f0 <CDC_ProcessReception+0x26>
 80081ea:	2b04      	cmp	r3, #4
 80081ec:	d00e      	beq.n	800820c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80081ee:	e043      	b.n	8008278 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80081f0:	697b      	ldr	r3, [r7, #20]
 80081f2:	6a19      	ldr	r1, [r3, #32]
 80081f4:	697b      	ldr	r3, [r7, #20]
 80081f6:	8b5a      	ldrh	r2, [r3, #26]
 80081f8:	697b      	ldr	r3, [r7, #20]
 80081fa:	7b1b      	ldrb	r3, [r3, #12]
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	f001 fbff 	bl	8009a00 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8008202:	697b      	ldr	r3, [r7, #20]
 8008204:	2204      	movs	r2, #4
 8008206:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800820a:	e035      	b.n	8008278 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800820c:	697b      	ldr	r3, [r7, #20]
 800820e:	7b1b      	ldrb	r3, [r3, #12]
 8008210:	4619      	mov	r1, r3
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f001 fefe 	bl	800a014 <USBH_LL_GetURBState>
 8008218:	4603      	mov	r3, r0
 800821a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800821c:	7cfb      	ldrb	r3, [r7, #19]
 800821e:	2b01      	cmp	r3, #1
 8008220:	d129      	bne.n	8008276 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8008222:	697b      	ldr	r3, [r7, #20]
 8008224:	7b1b      	ldrb	r3, [r3, #12]
 8008226:	4619      	mov	r1, r3
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f001 fe61 	bl	8009ef0 <USBH_LL_GetLastXferSize>
 800822e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8008230:	697b      	ldr	r3, [r7, #20]
 8008232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008234:	68fa      	ldr	r2, [r7, #12]
 8008236:	429a      	cmp	r2, r3
 8008238:	d016      	beq.n	8008268 <CDC_ProcessReception+0x9e>
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	8b5b      	ldrh	r3, [r3, #26]
 800823e:	461a      	mov	r2, r3
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	4293      	cmp	r3, r2
 8008244:	d910      	bls.n	8008268 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8008246:	697b      	ldr	r3, [r7, #20]
 8008248:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	1ad2      	subs	r2, r2, r3
 800824e:	697b      	ldr	r3, [r7, #20]
 8008250:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8008252:	697b      	ldr	r3, [r7, #20]
 8008254:	6a1a      	ldr	r2, [r3, #32]
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	441a      	add	r2, r3
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800825e:	697b      	ldr	r3, [r7, #20]
 8008260:	2203      	movs	r2, #3
 8008262:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8008266:	e006      	b.n	8008276 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8008268:	697b      	ldr	r3, [r7, #20]
 800826a:	2200      	movs	r2, #0
 800826c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f000 f80f 	bl	8008294 <USBH_CDC_ReceiveCallback>
      break;
 8008276:	bf00      	nop
  }
}
 8008278:	bf00      	nop
 800827a:	3718      	adds	r7, #24
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}

08008280 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8008280:	b480      	push	{r7}
 8008282:	b083      	sub	sp, #12
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008288:	bf00      	nop
 800828a:	370c      	adds	r7, #12
 800828c:	46bd      	mov	sp, r7
 800828e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008292:	4770      	bx	lr

08008294 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8008294:	b480      	push	{r7}
 8008296:	b083      	sub	sp, #12
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800829c:	bf00      	nop
 800829e:	370c      	adds	r7, #12
 80082a0:	46bd      	mov	sp, r7
 80082a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a6:	4770      	bx	lr

080082a8 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80082a8:	b480      	push	{r7}
 80082aa:	b083      	sub	sp, #12
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80082b0:	bf00      	nop
 80082b2:	370c      	adds	r7, #12
 80082b4:	46bd      	mov	sp, r7
 80082b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ba:	4770      	bx	lr

080082bc <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b084      	sub	sp, #16
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	60f8      	str	r0, [r7, #12]
 80082c4:	60b9      	str	r1, [r7, #8]
 80082c6:	4613      	mov	r3, r2
 80082c8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d101      	bne.n	80082d4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80082d0:	2302      	movs	r3, #2
 80082d2:	e029      	b.n	8008328 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	79fa      	ldrb	r2, [r7, #7]
 80082d8:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	2200      	movs	r2, #0
 80082e0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	2200      	movs	r2, #0
 80082e8:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80082ec:	68f8      	ldr	r0, [r7, #12]
 80082ee:	f000 f81f 	bl	8008330 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	2200      	movs	r2, #0
 80082f6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	2200      	movs	r2, #0
 80082fe:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	2200      	movs	r2, #0
 8008306:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	2200      	movs	r2, #0
 800830e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d003      	beq.n	8008320 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	68ba      	ldr	r2, [r7, #8]
 800831c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8008320:	68f8      	ldr	r0, [r7, #12]
 8008322:	f001 fd31 	bl	8009d88 <USBH_LL_Init>

  return USBH_OK;
 8008326:	2300      	movs	r3, #0
}
 8008328:	4618      	mov	r0, r3
 800832a:	3710      	adds	r7, #16
 800832c:	46bd      	mov	sp, r7
 800832e:	bd80      	pop	{r7, pc}

08008330 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008330:	b480      	push	{r7}
 8008332:	b085      	sub	sp, #20
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8008338:	2300      	movs	r3, #0
 800833a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800833c:	2300      	movs	r3, #0
 800833e:	60fb      	str	r3, [r7, #12]
 8008340:	e009      	b.n	8008356 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8008342:	687a      	ldr	r2, [r7, #4]
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	33e0      	adds	r3, #224	; 0xe0
 8008348:	009b      	lsls	r3, r3, #2
 800834a:	4413      	add	r3, r2
 800834c:	2200      	movs	r2, #0
 800834e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	3301      	adds	r3, #1
 8008354:	60fb      	str	r3, [r7, #12]
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	2b0f      	cmp	r3, #15
 800835a:	d9f2      	bls.n	8008342 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800835c:	2300      	movs	r3, #0
 800835e:	60fb      	str	r3, [r7, #12]
 8008360:	e009      	b.n	8008376 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8008362:	687a      	ldr	r2, [r7, #4]
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	4413      	add	r3, r2
 8008368:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800836c:	2200      	movs	r2, #0
 800836e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	3301      	adds	r3, #1
 8008374:	60fb      	str	r3, [r7, #12]
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800837c:	d3f1      	bcc.n	8008362 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2200      	movs	r2, #0
 8008382:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2200      	movs	r2, #0
 8008388:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2201      	movs	r2, #1
 800838e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2200      	movs	r2, #0
 8008394:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2201      	movs	r2, #1
 800839c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2240      	movs	r2, #64	; 0x40
 80083a2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2200      	movs	r2, #0
 80083a8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2200      	movs	r2, #0
 80083ae:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2201      	movs	r2, #1
 80083b6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2200      	movs	r2, #0
 80083be:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2200      	movs	r2, #0
 80083c6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80083ca:	2300      	movs	r3, #0
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	3714      	adds	r7, #20
 80083d0:	46bd      	mov	sp, r7
 80083d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d6:	4770      	bx	lr

080083d8 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80083d8:	b480      	push	{r7}
 80083da:	b085      	sub	sp, #20
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
 80083e0:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80083e2:	2300      	movs	r3, #0
 80083e4:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d016      	beq.n	800841a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d10e      	bne.n	8008414 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80083fc:	1c59      	adds	r1, r3, #1
 80083fe:	687a      	ldr	r2, [r7, #4]
 8008400:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8008404:	687a      	ldr	r2, [r7, #4]
 8008406:	33de      	adds	r3, #222	; 0xde
 8008408:	6839      	ldr	r1, [r7, #0]
 800840a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800840e:	2300      	movs	r3, #0
 8008410:	73fb      	strb	r3, [r7, #15]
 8008412:	e004      	b.n	800841e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008414:	2302      	movs	r3, #2
 8008416:	73fb      	strb	r3, [r7, #15]
 8008418:	e001      	b.n	800841e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800841a:	2302      	movs	r3, #2
 800841c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800841e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008420:	4618      	mov	r0, r3
 8008422:	3714      	adds	r7, #20
 8008424:	46bd      	mov	sp, r7
 8008426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842a:	4770      	bx	lr

0800842c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800842c:	b480      	push	{r7}
 800842e:	b085      	sub	sp, #20
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
 8008434:	460b      	mov	r3, r1
 8008436:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8008438:	2300      	movs	r3, #0
 800843a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8008442:	78fa      	ldrb	r2, [r7, #3]
 8008444:	429a      	cmp	r2, r3
 8008446:	d204      	bcs.n	8008452 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	78fa      	ldrb	r2, [r7, #3]
 800844c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8008450:	e001      	b.n	8008456 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8008452:	2302      	movs	r3, #2
 8008454:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008456:	7bfb      	ldrb	r3, [r7, #15]
}
 8008458:	4618      	mov	r0, r3
 800845a:	3714      	adds	r7, #20
 800845c:	46bd      	mov	sp, r7
 800845e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008462:	4770      	bx	lr

08008464 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008464:	b480      	push	{r7}
 8008466:	b087      	sub	sp, #28
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
 800846c:	4608      	mov	r0, r1
 800846e:	4611      	mov	r1, r2
 8008470:	461a      	mov	r2, r3
 8008472:	4603      	mov	r3, r0
 8008474:	70fb      	strb	r3, [r7, #3]
 8008476:	460b      	mov	r3, r1
 8008478:	70bb      	strb	r3, [r7, #2]
 800847a:	4613      	mov	r3, r2
 800847c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800847e:	2300      	movs	r3, #0
 8008480:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008482:	2300      	movs	r3, #0
 8008484:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800848c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800848e:	e025      	b.n	80084dc <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008490:	7dfb      	ldrb	r3, [r7, #23]
 8008492:	221a      	movs	r2, #26
 8008494:	fb02 f303 	mul.w	r3, r2, r3
 8008498:	3308      	adds	r3, #8
 800849a:	68fa      	ldr	r2, [r7, #12]
 800849c:	4413      	add	r3, r2
 800849e:	3302      	adds	r3, #2
 80084a0:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80084a2:	693b      	ldr	r3, [r7, #16]
 80084a4:	795b      	ldrb	r3, [r3, #5]
 80084a6:	78fa      	ldrb	r2, [r7, #3]
 80084a8:	429a      	cmp	r2, r3
 80084aa:	d002      	beq.n	80084b2 <USBH_FindInterface+0x4e>
 80084ac:	78fb      	ldrb	r3, [r7, #3]
 80084ae:	2bff      	cmp	r3, #255	; 0xff
 80084b0:	d111      	bne.n	80084d6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80084b2:	693b      	ldr	r3, [r7, #16]
 80084b4:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80084b6:	78ba      	ldrb	r2, [r7, #2]
 80084b8:	429a      	cmp	r2, r3
 80084ba:	d002      	beq.n	80084c2 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80084bc:	78bb      	ldrb	r3, [r7, #2]
 80084be:	2bff      	cmp	r3, #255	; 0xff
 80084c0:	d109      	bne.n	80084d6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80084c2:	693b      	ldr	r3, [r7, #16]
 80084c4:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80084c6:	787a      	ldrb	r2, [r7, #1]
 80084c8:	429a      	cmp	r2, r3
 80084ca:	d002      	beq.n	80084d2 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80084cc:	787b      	ldrb	r3, [r7, #1]
 80084ce:	2bff      	cmp	r3, #255	; 0xff
 80084d0:	d101      	bne.n	80084d6 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80084d2:	7dfb      	ldrb	r3, [r7, #23]
 80084d4:	e006      	b.n	80084e4 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80084d6:	7dfb      	ldrb	r3, [r7, #23]
 80084d8:	3301      	adds	r3, #1
 80084da:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80084dc:	7dfb      	ldrb	r3, [r7, #23]
 80084de:	2b01      	cmp	r3, #1
 80084e0:	d9d6      	bls.n	8008490 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80084e2:	23ff      	movs	r3, #255	; 0xff
}
 80084e4:	4618      	mov	r0, r3
 80084e6:	371c      	adds	r7, #28
 80084e8:	46bd      	mov	sp, r7
 80084ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ee:	4770      	bx	lr

080084f0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b082      	sub	sp, #8
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	f001 fc81 	bl	8009e00 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80084fe:	2101      	movs	r1, #1
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	f001 fd9a 	bl	800a03a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008506:	2300      	movs	r3, #0
}
 8008508:	4618      	mov	r0, r3
 800850a:	3708      	adds	r7, #8
 800850c:	46bd      	mov	sp, r7
 800850e:	bd80      	pop	{r7, pc}

08008510 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b088      	sub	sp, #32
 8008514:	af04      	add	r7, sp, #16
 8008516:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008518:	2302      	movs	r3, #2
 800851a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800851c:	2300      	movs	r3, #0
 800851e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8008526:	b2db      	uxtb	r3, r3
 8008528:	2b01      	cmp	r3, #1
 800852a:	d102      	bne.n	8008532 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2203      	movs	r2, #3
 8008530:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	781b      	ldrb	r3, [r3, #0]
 8008536:	b2db      	uxtb	r3, r3
 8008538:	2b0b      	cmp	r3, #11
 800853a:	f200 81be 	bhi.w	80088ba <USBH_Process+0x3aa>
 800853e:	a201      	add	r2, pc, #4	; (adr r2, 8008544 <USBH_Process+0x34>)
 8008540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008544:	08008575 	.word	0x08008575
 8008548:	080085a7 	.word	0x080085a7
 800854c:	0800860f 	.word	0x0800860f
 8008550:	08008855 	.word	0x08008855
 8008554:	080088bb 	.word	0x080088bb
 8008558:	080086b3 	.word	0x080086b3
 800855c:	080087fb 	.word	0x080087fb
 8008560:	080086e9 	.word	0x080086e9
 8008564:	08008709 	.word	0x08008709
 8008568:	08008729 	.word	0x08008729
 800856c:	0800876d 	.word	0x0800876d
 8008570:	0800883d 	.word	0x0800883d
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800857a:	b2db      	uxtb	r3, r3
 800857c:	2b00      	cmp	r3, #0
 800857e:	f000 819e 	beq.w	80088be <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2201      	movs	r2, #1
 8008586:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008588:	20c8      	movs	r0, #200	; 0xc8
 800858a:	f001 fd9d 	bl	800a0c8 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f001 fc93 	bl	8009eba <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2200      	movs	r2, #0
 8008598:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2200      	movs	r2, #0
 80085a0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80085a4:	e18b      	b.n	80088be <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80085ac:	2b01      	cmp	r3, #1
 80085ae:	d107      	bne.n	80085c0 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2200      	movs	r2, #0
 80085b4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2202      	movs	r2, #2
 80085bc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80085be:	e18d      	b.n	80088dc <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80085c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80085ca:	d914      	bls.n	80085f6 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80085d2:	3301      	adds	r3, #1
 80085d4:	b2da      	uxtb	r2, r3
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80085e2:	2b03      	cmp	r3, #3
 80085e4:	d903      	bls.n	80085ee <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	220d      	movs	r2, #13
 80085ea:	701a      	strb	r2, [r3, #0]
      break;
 80085ec:	e176      	b.n	80088dc <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2200      	movs	r2, #0
 80085f2:	701a      	strb	r2, [r3, #0]
      break;
 80085f4:	e172      	b.n	80088dc <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80085fc:	f103 020a 	add.w	r2, r3, #10
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8008606:	200a      	movs	r0, #10
 8008608:	f001 fd5e 	bl	800a0c8 <USBH_Delay>
      break;
 800860c:	e166      	b.n	80088dc <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008614:	2b00      	cmp	r3, #0
 8008616:	d005      	beq.n	8008624 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800861e:	2104      	movs	r1, #4
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008624:	2064      	movs	r0, #100	; 0x64
 8008626:	f001 fd4f 	bl	800a0c8 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f001 fc1e 	bl	8009e6c <USBH_LL_GetSpeed>
 8008630:	4603      	mov	r3, r0
 8008632:	461a      	mov	r2, r3
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2205      	movs	r2, #5
 800863e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008640:	2100      	movs	r1, #0
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	f001 fa29 	bl	8009a9a <USBH_AllocPipe>
 8008648:	4603      	mov	r3, r0
 800864a:	461a      	mov	r2, r3
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008650:	2180      	movs	r1, #128	; 0x80
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	f001 fa21 	bl	8009a9a <USBH_AllocPipe>
 8008658:	4603      	mov	r3, r0
 800865a:	461a      	mov	r2, r3
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	7919      	ldrb	r1, [r3, #4]
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008670:	687a      	ldr	r2, [r7, #4]
 8008672:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008674:	b292      	uxth	r2, r2
 8008676:	9202      	str	r2, [sp, #8]
 8008678:	2200      	movs	r2, #0
 800867a:	9201      	str	r2, [sp, #4]
 800867c:	9300      	str	r3, [sp, #0]
 800867e:	4603      	mov	r3, r0
 8008680:	2280      	movs	r2, #128	; 0x80
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f001 f9da 	bl	8009a3c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	7959      	ldrb	r1, [r3, #5]
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008698:	687a      	ldr	r2, [r7, #4]
 800869a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800869c:	b292      	uxth	r2, r2
 800869e:	9202      	str	r2, [sp, #8]
 80086a0:	2200      	movs	r2, #0
 80086a2:	9201      	str	r2, [sp, #4]
 80086a4:	9300      	str	r3, [sp, #0]
 80086a6:	4603      	mov	r3, r0
 80086a8:	2200      	movs	r2, #0
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f001 f9c6 	bl	8009a3c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80086b0:	e114      	b.n	80088dc <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f000 f918 	bl	80088e8 <USBH_HandleEnum>
 80086b8:	4603      	mov	r3, r0
 80086ba:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80086bc:	7bbb      	ldrb	r3, [r7, #14]
 80086be:	b2db      	uxtb	r3, r3
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	f040 80fe 	bne.w	80088c2 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2200      	movs	r2, #0
 80086ca:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80086d4:	2b01      	cmp	r3, #1
 80086d6:	d103      	bne.n	80086e0 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2208      	movs	r2, #8
 80086dc:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80086de:	e0f0      	b.n	80088c2 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2207      	movs	r2, #7
 80086e4:	701a      	strb	r2, [r3, #0]
      break;
 80086e6:	e0ec      	b.n	80088c2 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	f000 80e9 	beq.w	80088c6 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80086fa:	2101      	movs	r1, #1
 80086fc:	6878      	ldr	r0, [r7, #4]
 80086fe:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2208      	movs	r2, #8
 8008704:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8008706:	e0de      	b.n	80088c6 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800870e:	b29b      	uxth	r3, r3
 8008710:	4619      	mov	r1, r3
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f000 fc2c 	bl	8008f70 <USBH_SetCfg>
 8008718:	4603      	mov	r3, r0
 800871a:	2b00      	cmp	r3, #0
 800871c:	f040 80d5 	bne.w	80088ca <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2209      	movs	r2, #9
 8008724:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008726:	e0d0      	b.n	80088ca <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800872e:	f003 0320 	and.w	r3, r3, #32
 8008732:	2b00      	cmp	r3, #0
 8008734:	d016      	beq.n	8008764 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8008736:	2101      	movs	r1, #1
 8008738:	6878      	ldr	r0, [r7, #4]
 800873a:	f000 fc3c 	bl	8008fb6 <USBH_SetFeature>
 800873e:	4603      	mov	r3, r0
 8008740:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008742:	7bbb      	ldrb	r3, [r7, #14]
 8008744:	b2db      	uxtb	r3, r3
 8008746:	2b00      	cmp	r3, #0
 8008748:	d103      	bne.n	8008752 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	220a      	movs	r2, #10
 800874e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008750:	e0bd      	b.n	80088ce <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8008752:	7bbb      	ldrb	r3, [r7, #14]
 8008754:	b2db      	uxtb	r3, r3
 8008756:	2b03      	cmp	r3, #3
 8008758:	f040 80b9 	bne.w	80088ce <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	220a      	movs	r2, #10
 8008760:	701a      	strb	r2, [r3, #0]
      break;
 8008762:	e0b4      	b.n	80088ce <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	220a      	movs	r2, #10
 8008768:	701a      	strb	r2, [r3, #0]
      break;
 800876a:	e0b0      	b.n	80088ce <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008772:	2b00      	cmp	r3, #0
 8008774:	f000 80ad 	beq.w	80088d2 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2200      	movs	r2, #0
 800877c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008780:	2300      	movs	r3, #0
 8008782:	73fb      	strb	r3, [r7, #15]
 8008784:	e016      	b.n	80087b4 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008786:	7bfa      	ldrb	r2, [r7, #15]
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	32de      	adds	r2, #222	; 0xde
 800878c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008790:	791a      	ldrb	r2, [r3, #4]
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8008798:	429a      	cmp	r2, r3
 800879a:	d108      	bne.n	80087ae <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800879c:	7bfa      	ldrb	r2, [r7, #15]
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	32de      	adds	r2, #222	; 0xde
 80087a2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80087ac:	e005      	b.n	80087ba <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80087ae:	7bfb      	ldrb	r3, [r7, #15]
 80087b0:	3301      	adds	r3, #1
 80087b2:	73fb      	strb	r3, [r7, #15]
 80087b4:	7bfb      	ldrb	r3, [r7, #15]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d0e5      	beq.n	8008786 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d016      	beq.n	80087f2 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80087ca:	689b      	ldr	r3, [r3, #8]
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	4798      	blx	r3
 80087d0:	4603      	mov	r3, r0
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d109      	bne.n	80087ea <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2206      	movs	r2, #6
 80087da:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80087e2:	2103      	movs	r1, #3
 80087e4:	6878      	ldr	r0, [r7, #4]
 80087e6:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80087e8:	e073      	b.n	80088d2 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	220d      	movs	r2, #13
 80087ee:	701a      	strb	r2, [r3, #0]
      break;
 80087f0:	e06f      	b.n	80088d2 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	220d      	movs	r2, #13
 80087f6:	701a      	strb	r2, [r3, #0]
      break;
 80087f8:	e06b      	b.n	80088d2 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008800:	2b00      	cmp	r3, #0
 8008802:	d017      	beq.n	8008834 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800880a:	691b      	ldr	r3, [r3, #16]
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	4798      	blx	r3
 8008810:	4603      	mov	r3, r0
 8008812:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008814:	7bbb      	ldrb	r3, [r7, #14]
 8008816:	b2db      	uxtb	r3, r3
 8008818:	2b00      	cmp	r3, #0
 800881a:	d103      	bne.n	8008824 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	220b      	movs	r2, #11
 8008820:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008822:	e058      	b.n	80088d6 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8008824:	7bbb      	ldrb	r3, [r7, #14]
 8008826:	b2db      	uxtb	r3, r3
 8008828:	2b02      	cmp	r3, #2
 800882a:	d154      	bne.n	80088d6 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	220d      	movs	r2, #13
 8008830:	701a      	strb	r2, [r3, #0]
      break;
 8008832:	e050      	b.n	80088d6 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	220d      	movs	r2, #13
 8008838:	701a      	strb	r2, [r3, #0]
      break;
 800883a:	e04c      	b.n	80088d6 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008842:	2b00      	cmp	r3, #0
 8008844:	d049      	beq.n	80088da <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800884c:	695b      	ldr	r3, [r3, #20]
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	4798      	blx	r3
      }
      break;
 8008852:	e042      	b.n	80088da <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2200      	movs	r2, #0
 8008858:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	f7ff fd67 	bl	8008330 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008868:	2b00      	cmp	r3, #0
 800886a:	d009      	beq.n	8008880 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008872:	68db      	ldr	r3, [r3, #12]
 8008874:	6878      	ldr	r0, [r7, #4]
 8008876:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2200      	movs	r2, #0
 800887c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008886:	2b00      	cmp	r3, #0
 8008888:	d005      	beq.n	8008896 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008890:	2105      	movs	r1, #5
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800889c:	b2db      	uxtb	r3, r3
 800889e:	2b01      	cmp	r3, #1
 80088a0:	d107      	bne.n	80088b2 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2200      	movs	r2, #0
 80088a6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f7ff fe20 	bl	80084f0 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80088b0:	e014      	b.n	80088dc <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f001 faa4 	bl	8009e00 <USBH_LL_Start>
      break;
 80088b8:	e010      	b.n	80088dc <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 80088ba:	bf00      	nop
 80088bc:	e00e      	b.n	80088dc <USBH_Process+0x3cc>
      break;
 80088be:	bf00      	nop
 80088c0:	e00c      	b.n	80088dc <USBH_Process+0x3cc>
      break;
 80088c2:	bf00      	nop
 80088c4:	e00a      	b.n	80088dc <USBH_Process+0x3cc>
    break;
 80088c6:	bf00      	nop
 80088c8:	e008      	b.n	80088dc <USBH_Process+0x3cc>
      break;
 80088ca:	bf00      	nop
 80088cc:	e006      	b.n	80088dc <USBH_Process+0x3cc>
      break;
 80088ce:	bf00      	nop
 80088d0:	e004      	b.n	80088dc <USBH_Process+0x3cc>
      break;
 80088d2:	bf00      	nop
 80088d4:	e002      	b.n	80088dc <USBH_Process+0x3cc>
      break;
 80088d6:	bf00      	nop
 80088d8:	e000      	b.n	80088dc <USBH_Process+0x3cc>
      break;
 80088da:	bf00      	nop
  }
  return USBH_OK;
 80088dc:	2300      	movs	r3, #0
}
 80088de:	4618      	mov	r0, r3
 80088e0:	3710      	adds	r7, #16
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}
 80088e6:	bf00      	nop

080088e8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b088      	sub	sp, #32
 80088ec:	af04      	add	r7, sp, #16
 80088ee:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80088f0:	2301      	movs	r3, #1
 80088f2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80088f4:	2301      	movs	r3, #1
 80088f6:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	785b      	ldrb	r3, [r3, #1]
 80088fc:	2b07      	cmp	r3, #7
 80088fe:	f200 81c1 	bhi.w	8008c84 <USBH_HandleEnum+0x39c>
 8008902:	a201      	add	r2, pc, #4	; (adr r2, 8008908 <USBH_HandleEnum+0x20>)
 8008904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008908:	08008929 	.word	0x08008929
 800890c:	080089e7 	.word	0x080089e7
 8008910:	08008a51 	.word	0x08008a51
 8008914:	08008adf 	.word	0x08008adf
 8008918:	08008b49 	.word	0x08008b49
 800891c:	08008bb9 	.word	0x08008bb9
 8008920:	08008bff 	.word	0x08008bff
 8008924:	08008c45 	.word	0x08008c45
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008928:	2108      	movs	r1, #8
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f000 fa50 	bl	8008dd0 <USBH_Get_DevDesc>
 8008930:	4603      	mov	r3, r0
 8008932:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008934:	7bbb      	ldrb	r3, [r7, #14]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d130      	bne.n	800899c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2201      	movs	r2, #1
 8008948:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	7919      	ldrb	r1, [r3, #4]
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800895a:	687a      	ldr	r2, [r7, #4]
 800895c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800895e:	b292      	uxth	r2, r2
 8008960:	9202      	str	r2, [sp, #8]
 8008962:	2200      	movs	r2, #0
 8008964:	9201      	str	r2, [sp, #4]
 8008966:	9300      	str	r3, [sp, #0]
 8008968:	4603      	mov	r3, r0
 800896a:	2280      	movs	r2, #128	; 0x80
 800896c:	6878      	ldr	r0, [r7, #4]
 800896e:	f001 f865 	bl	8009a3c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	7959      	ldrb	r1, [r3, #5]
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008982:	687a      	ldr	r2, [r7, #4]
 8008984:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008986:	b292      	uxth	r2, r2
 8008988:	9202      	str	r2, [sp, #8]
 800898a:	2200      	movs	r2, #0
 800898c:	9201      	str	r2, [sp, #4]
 800898e:	9300      	str	r3, [sp, #0]
 8008990:	4603      	mov	r3, r0
 8008992:	2200      	movs	r2, #0
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f001 f851 	bl	8009a3c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800899a:	e175      	b.n	8008c88 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800899c:	7bbb      	ldrb	r3, [r7, #14]
 800899e:	2b03      	cmp	r3, #3
 80089a0:	f040 8172 	bne.w	8008c88 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80089aa:	3301      	adds	r3, #1
 80089ac:	b2da      	uxtb	r2, r3
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80089ba:	2b03      	cmp	r3, #3
 80089bc:	d903      	bls.n	80089c6 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	220d      	movs	r2, #13
 80089c2:	701a      	strb	r2, [r3, #0]
      break;
 80089c4:	e160      	b.n	8008c88 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	795b      	ldrb	r3, [r3, #5]
 80089ca:	4619      	mov	r1, r3
 80089cc:	6878      	ldr	r0, [r7, #4]
 80089ce:	f001 f885 	bl	8009adc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	791b      	ldrb	r3, [r3, #4]
 80089d6:	4619      	mov	r1, r3
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	f001 f87f 	bl	8009adc <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2200      	movs	r2, #0
 80089e2:	701a      	strb	r2, [r3, #0]
      break;
 80089e4:	e150      	b.n	8008c88 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80089e6:	2112      	movs	r1, #18
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	f000 f9f1 	bl	8008dd0 <USBH_Get_DevDesc>
 80089ee:	4603      	mov	r3, r0
 80089f0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80089f2:	7bbb      	ldrb	r3, [r7, #14]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d103      	bne.n	8008a00 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2202      	movs	r2, #2
 80089fc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80089fe:	e145      	b.n	8008c8c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008a00:	7bbb      	ldrb	r3, [r7, #14]
 8008a02:	2b03      	cmp	r3, #3
 8008a04:	f040 8142 	bne.w	8008c8c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008a0e:	3301      	adds	r3, #1
 8008a10:	b2da      	uxtb	r2, r3
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008a1e:	2b03      	cmp	r3, #3
 8008a20:	d903      	bls.n	8008a2a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	220d      	movs	r2, #13
 8008a26:	701a      	strb	r2, [r3, #0]
      break;
 8008a28:	e130      	b.n	8008c8c <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	795b      	ldrb	r3, [r3, #5]
 8008a2e:	4619      	mov	r1, r3
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f001 f853 	bl	8009adc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	791b      	ldrb	r3, [r3, #4]
 8008a3a:	4619      	mov	r1, r3
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	f001 f84d 	bl	8009adc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2200      	movs	r2, #0
 8008a46:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	701a      	strb	r2, [r3, #0]
      break;
 8008a4e:	e11d      	b.n	8008c8c <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008a50:	2101      	movs	r1, #1
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f000 fa68 	bl	8008f28 <USBH_SetAddress>
 8008a58:	4603      	mov	r3, r0
 8008a5a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008a5c:	7bbb      	ldrb	r3, [r7, #14]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d132      	bne.n	8008ac8 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8008a62:	2002      	movs	r0, #2
 8008a64:	f001 fb30 	bl	800a0c8 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2201      	movs	r2, #1
 8008a6c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2203      	movs	r2, #3
 8008a74:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	7919      	ldrb	r1, [r3, #4]
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008a86:	687a      	ldr	r2, [r7, #4]
 8008a88:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008a8a:	b292      	uxth	r2, r2
 8008a8c:	9202      	str	r2, [sp, #8]
 8008a8e:	2200      	movs	r2, #0
 8008a90:	9201      	str	r2, [sp, #4]
 8008a92:	9300      	str	r3, [sp, #0]
 8008a94:	4603      	mov	r3, r0
 8008a96:	2280      	movs	r2, #128	; 0x80
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f000 ffcf 	bl	8009a3c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	7959      	ldrb	r1, [r3, #5]
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008aae:	687a      	ldr	r2, [r7, #4]
 8008ab0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008ab2:	b292      	uxth	r2, r2
 8008ab4:	9202      	str	r2, [sp, #8]
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	9201      	str	r2, [sp, #4]
 8008aba:	9300      	str	r3, [sp, #0]
 8008abc:	4603      	mov	r3, r0
 8008abe:	2200      	movs	r2, #0
 8008ac0:	6878      	ldr	r0, [r7, #4]
 8008ac2:	f000 ffbb 	bl	8009a3c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008ac6:	e0e3      	b.n	8008c90 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008ac8:	7bbb      	ldrb	r3, [r7, #14]
 8008aca:	2b03      	cmp	r3, #3
 8008acc:	f040 80e0 	bne.w	8008c90 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	220d      	movs	r2, #13
 8008ad4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	705a      	strb	r2, [r3, #1]
      break;
 8008adc:	e0d8      	b.n	8008c90 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8008ade:	2109      	movs	r1, #9
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f000 f99d 	bl	8008e20 <USBH_Get_CfgDesc>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008aea:	7bbb      	ldrb	r3, [r7, #14]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d103      	bne.n	8008af8 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2204      	movs	r2, #4
 8008af4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008af6:	e0cd      	b.n	8008c94 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008af8:	7bbb      	ldrb	r3, [r7, #14]
 8008afa:	2b03      	cmp	r3, #3
 8008afc:	f040 80ca 	bne.w	8008c94 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008b06:	3301      	adds	r3, #1
 8008b08:	b2da      	uxtb	r2, r3
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008b16:	2b03      	cmp	r3, #3
 8008b18:	d903      	bls.n	8008b22 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	220d      	movs	r2, #13
 8008b1e:	701a      	strb	r2, [r3, #0]
      break;
 8008b20:	e0b8      	b.n	8008c94 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	795b      	ldrb	r3, [r3, #5]
 8008b26:	4619      	mov	r1, r3
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	f000 ffd7 	bl	8009adc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	791b      	ldrb	r3, [r3, #4]
 8008b32:	4619      	mov	r1, r3
 8008b34:	6878      	ldr	r0, [r7, #4]
 8008b36:	f000 ffd1 	bl	8009adc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2200      	movs	r2, #0
 8008b44:	701a      	strb	r2, [r3, #0]
      break;
 8008b46:	e0a5      	b.n	8008c94 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8008b4e:	4619      	mov	r1, r3
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f000 f965 	bl	8008e20 <USBH_Get_CfgDesc>
 8008b56:	4603      	mov	r3, r0
 8008b58:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008b5a:	7bbb      	ldrb	r3, [r7, #14]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d103      	bne.n	8008b68 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2205      	movs	r2, #5
 8008b64:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008b66:	e097      	b.n	8008c98 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008b68:	7bbb      	ldrb	r3, [r7, #14]
 8008b6a:	2b03      	cmp	r3, #3
 8008b6c:	f040 8094 	bne.w	8008c98 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008b76:	3301      	adds	r3, #1
 8008b78:	b2da      	uxtb	r2, r3
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008b86:	2b03      	cmp	r3, #3
 8008b88:	d903      	bls.n	8008b92 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	220d      	movs	r2, #13
 8008b8e:	701a      	strb	r2, [r3, #0]
      break;
 8008b90:	e082      	b.n	8008c98 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	795b      	ldrb	r3, [r3, #5]
 8008b96:	4619      	mov	r1, r3
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	f000 ff9f 	bl	8009adc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	791b      	ldrb	r3, [r3, #4]
 8008ba2:	4619      	mov	r1, r3
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f000 ff99 	bl	8009adc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2200      	movs	r2, #0
 8008bae:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	701a      	strb	r2, [r3, #0]
      break;
 8008bb6:	e06f      	b.n	8008c98 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d019      	beq.n	8008bf6 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008bce:	23ff      	movs	r3, #255	; 0xff
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f000 f949 	bl	8008e68 <USBH_Get_StringDesc>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008bda:	7bbb      	ldrb	r3, [r7, #14]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d103      	bne.n	8008be8 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2206      	movs	r2, #6
 8008be4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008be6:	e059      	b.n	8008c9c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008be8:	7bbb      	ldrb	r3, [r7, #14]
 8008bea:	2b03      	cmp	r3, #3
 8008bec:	d156      	bne.n	8008c9c <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2206      	movs	r2, #6
 8008bf2:	705a      	strb	r2, [r3, #1]
      break;
 8008bf4:	e052      	b.n	8008c9c <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2206      	movs	r2, #6
 8008bfa:	705a      	strb	r2, [r3, #1]
      break;
 8008bfc:	e04e      	b.n	8008c9c <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d019      	beq.n	8008c3c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008c14:	23ff      	movs	r3, #255	; 0xff
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	f000 f926 	bl	8008e68 <USBH_Get_StringDesc>
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008c20:	7bbb      	ldrb	r3, [r7, #14]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d103      	bne.n	8008c2e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2207      	movs	r2, #7
 8008c2a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008c2c:	e038      	b.n	8008ca0 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008c2e:	7bbb      	ldrb	r3, [r7, #14]
 8008c30:	2b03      	cmp	r3, #3
 8008c32:	d135      	bne.n	8008ca0 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2207      	movs	r2, #7
 8008c38:	705a      	strb	r2, [r3, #1]
      break;
 8008c3a:	e031      	b.n	8008ca0 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2207      	movs	r2, #7
 8008c40:	705a      	strb	r2, [r3, #1]
      break;
 8008c42:	e02d      	b.n	8008ca0 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d017      	beq.n	8008c7e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008c5a:	23ff      	movs	r3, #255	; 0xff
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f000 f903 	bl	8008e68 <USBH_Get_StringDesc>
 8008c62:	4603      	mov	r3, r0
 8008c64:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008c66:	7bbb      	ldrb	r3, [r7, #14]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d102      	bne.n	8008c72 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008c70:	e018      	b.n	8008ca4 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008c72:	7bbb      	ldrb	r3, [r7, #14]
 8008c74:	2b03      	cmp	r3, #3
 8008c76:	d115      	bne.n	8008ca4 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8008c78:	2300      	movs	r3, #0
 8008c7a:	73fb      	strb	r3, [r7, #15]
      break;
 8008c7c:	e012      	b.n	8008ca4 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8008c7e:	2300      	movs	r3, #0
 8008c80:	73fb      	strb	r3, [r7, #15]
      break;
 8008c82:	e00f      	b.n	8008ca4 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8008c84:	bf00      	nop
 8008c86:	e00e      	b.n	8008ca6 <USBH_HandleEnum+0x3be>
      break;
 8008c88:	bf00      	nop
 8008c8a:	e00c      	b.n	8008ca6 <USBH_HandleEnum+0x3be>
      break;
 8008c8c:	bf00      	nop
 8008c8e:	e00a      	b.n	8008ca6 <USBH_HandleEnum+0x3be>
      break;
 8008c90:	bf00      	nop
 8008c92:	e008      	b.n	8008ca6 <USBH_HandleEnum+0x3be>
      break;
 8008c94:	bf00      	nop
 8008c96:	e006      	b.n	8008ca6 <USBH_HandleEnum+0x3be>
      break;
 8008c98:	bf00      	nop
 8008c9a:	e004      	b.n	8008ca6 <USBH_HandleEnum+0x3be>
      break;
 8008c9c:	bf00      	nop
 8008c9e:	e002      	b.n	8008ca6 <USBH_HandleEnum+0x3be>
      break;
 8008ca0:	bf00      	nop
 8008ca2:	e000      	b.n	8008ca6 <USBH_HandleEnum+0x3be>
      break;
 8008ca4:	bf00      	nop
  }
  return Status;
 8008ca6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	3710      	adds	r7, #16
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bd80      	pop	{r7, pc}

08008cb0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	b083      	sub	sp, #12
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
 8008cb8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	683a      	ldr	r2, [r7, #0]
 8008cbe:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8008cc2:	bf00      	nop
 8008cc4:	370c      	adds	r7, #12
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ccc:	4770      	bx	lr

08008cce <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008cce:	b580      	push	{r7, lr}
 8008cd0:	b082      	sub	sp, #8
 8008cd2:	af00      	add	r7, sp, #0
 8008cd4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008cdc:	1c5a      	adds	r2, r3, #1
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	f000 f804 	bl	8008cf2 <USBH_HandleSof>
}
 8008cea:	bf00      	nop
 8008cec:	3708      	adds	r7, #8
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	bd80      	pop	{r7, pc}

08008cf2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008cf2:	b580      	push	{r7, lr}
 8008cf4:	b082      	sub	sp, #8
 8008cf6:	af00      	add	r7, sp, #0
 8008cf8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	781b      	ldrb	r3, [r3, #0]
 8008cfe:	b2db      	uxtb	r3, r3
 8008d00:	2b0b      	cmp	r3, #11
 8008d02:	d10a      	bne.n	8008d1a <USBH_HandleSof+0x28>
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d005      	beq.n	8008d1a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d14:	699b      	ldr	r3, [r3, #24]
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	4798      	blx	r3
  }
}
 8008d1a:	bf00      	nop
 8008d1c:	3708      	adds	r7, #8
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}

08008d22 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008d22:	b480      	push	{r7}
 8008d24:	b083      	sub	sp, #12
 8008d26:	af00      	add	r7, sp, #0
 8008d28:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2201      	movs	r2, #1
 8008d2e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8008d32:	bf00      	nop
}
 8008d34:	370c      	adds	r7, #12
 8008d36:	46bd      	mov	sp, r7
 8008d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3c:	4770      	bx	lr

08008d3e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008d3e:	b480      	push	{r7}
 8008d40:	b083      	sub	sp, #12
 8008d42:	af00      	add	r7, sp, #0
 8008d44:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8008d4e:	bf00      	nop
}
 8008d50:	370c      	adds	r7, #12
 8008d52:	46bd      	mov	sp, r7
 8008d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d58:	4770      	bx	lr

08008d5a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008d5a:	b480      	push	{r7}
 8008d5c:	b083      	sub	sp, #12
 8008d5e:	af00      	add	r7, sp, #0
 8008d60:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2201      	movs	r2, #1
 8008d66:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2200      	movs	r2, #0
 8008d76:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008d7a:	2300      	movs	r3, #0
}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	370c      	adds	r7, #12
 8008d80:	46bd      	mov	sp, r7
 8008d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d86:	4770      	bx	lr

08008d88 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b082      	sub	sp, #8
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2201      	movs	r2, #1
 8008d94:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2200      	movs	r2, #0
 8008da4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8008da8:	6878      	ldr	r0, [r7, #4]
 8008daa:	f001 f844 	bl	8009e36 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	791b      	ldrb	r3, [r3, #4]
 8008db2:	4619      	mov	r1, r3
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f000 fe91 	bl	8009adc <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	795b      	ldrb	r3, [r3, #5]
 8008dbe:	4619      	mov	r1, r3
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f000 fe8b 	bl	8009adc <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008dc6:	2300      	movs	r3, #0
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	3708      	adds	r7, #8
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}

08008dd0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b086      	sub	sp, #24
 8008dd4:	af02      	add	r7, sp, #8
 8008dd6:	6078      	str	r0, [r7, #4]
 8008dd8:	460b      	mov	r3, r1
 8008dda:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8008de2:	78fb      	ldrb	r3, [r7, #3]
 8008de4:	b29b      	uxth	r3, r3
 8008de6:	9300      	str	r3, [sp, #0]
 8008de8:	4613      	mov	r3, r2
 8008dea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008dee:	2100      	movs	r1, #0
 8008df0:	6878      	ldr	r0, [r7, #4]
 8008df2:	f000 f864 	bl	8008ebe <USBH_GetDescriptor>
 8008df6:	4603      	mov	r3, r0
 8008df8:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8008dfa:	7bfb      	ldrb	r3, [r7, #15]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d10a      	bne.n	8008e16 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f203 3026 	addw	r0, r3, #806	; 0x326
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008e0c:	78fa      	ldrb	r2, [r7, #3]
 8008e0e:	b292      	uxth	r2, r2
 8008e10:	4619      	mov	r1, r3
 8008e12:	f000 f918 	bl	8009046 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8008e16:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3710      	adds	r7, #16
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}

08008e20 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b086      	sub	sp, #24
 8008e24:	af02      	add	r7, sp, #8
 8008e26:	6078      	str	r0, [r7, #4]
 8008e28:	460b      	mov	r3, r1
 8008e2a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	331c      	adds	r3, #28
 8008e30:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008e32:	887b      	ldrh	r3, [r7, #2]
 8008e34:	9300      	str	r3, [sp, #0]
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008e3c:	2100      	movs	r1, #0
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f000 f83d 	bl	8008ebe <USBH_GetDescriptor>
 8008e44:	4603      	mov	r3, r0
 8008e46:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8008e48:	7bfb      	ldrb	r3, [r7, #15]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d107      	bne.n	8008e5e <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8008e4e:	887b      	ldrh	r3, [r7, #2]
 8008e50:	461a      	mov	r2, r3
 8008e52:	68b9      	ldr	r1, [r7, #8]
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f000 f987 	bl	8009168 <USBH_ParseCfgDesc>
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e60:	4618      	mov	r0, r3
 8008e62:	3710      	adds	r7, #16
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd80      	pop	{r7, pc}

08008e68 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b088      	sub	sp, #32
 8008e6c:	af02      	add	r7, sp, #8
 8008e6e:	60f8      	str	r0, [r7, #12]
 8008e70:	607a      	str	r2, [r7, #4]
 8008e72:	461a      	mov	r2, r3
 8008e74:	460b      	mov	r3, r1
 8008e76:	72fb      	strb	r3, [r7, #11]
 8008e78:	4613      	mov	r3, r2
 8008e7a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8008e7c:	7afb      	ldrb	r3, [r7, #11]
 8008e7e:	b29b      	uxth	r3, r3
 8008e80:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8008e84:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8008e8c:	893b      	ldrh	r3, [r7, #8]
 8008e8e:	9300      	str	r3, [sp, #0]
 8008e90:	460b      	mov	r3, r1
 8008e92:	2100      	movs	r1, #0
 8008e94:	68f8      	ldr	r0, [r7, #12]
 8008e96:	f000 f812 	bl	8008ebe <USBH_GetDescriptor>
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8008e9e:	7dfb      	ldrb	r3, [r7, #23]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d107      	bne.n	8008eb4 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008eaa:	893a      	ldrh	r2, [r7, #8]
 8008eac:	6879      	ldr	r1, [r7, #4]
 8008eae:	4618      	mov	r0, r3
 8008eb0:	f000 fb24 	bl	80094fc <USBH_ParseStringDesc>
  }

  return status;
 8008eb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	3718      	adds	r7, #24
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	bd80      	pop	{r7, pc}

08008ebe <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8008ebe:	b580      	push	{r7, lr}
 8008ec0:	b084      	sub	sp, #16
 8008ec2:	af00      	add	r7, sp, #0
 8008ec4:	60f8      	str	r0, [r7, #12]
 8008ec6:	607b      	str	r3, [r7, #4]
 8008ec8:	460b      	mov	r3, r1
 8008eca:	72fb      	strb	r3, [r7, #11]
 8008ecc:	4613      	mov	r3, r2
 8008ece:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	789b      	ldrb	r3, [r3, #2]
 8008ed4:	2b01      	cmp	r3, #1
 8008ed6:	d11c      	bne.n	8008f12 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008ed8:	7afb      	ldrb	r3, [r7, #11]
 8008eda:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008ede:	b2da      	uxtb	r2, r3
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	2206      	movs	r2, #6
 8008ee8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	893a      	ldrh	r2, [r7, #8]
 8008eee:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008ef0:	893b      	ldrh	r3, [r7, #8]
 8008ef2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008ef6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008efa:	d104      	bne.n	8008f06 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	f240 4209 	movw	r2, #1033	; 0x409
 8008f02:	829a      	strh	r2, [r3, #20]
 8008f04:	e002      	b.n	8008f0c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	2200      	movs	r2, #0
 8008f0a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	8b3a      	ldrh	r2, [r7, #24]
 8008f10:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008f12:	8b3b      	ldrh	r3, [r7, #24]
 8008f14:	461a      	mov	r2, r3
 8008f16:	6879      	ldr	r1, [r7, #4]
 8008f18:	68f8      	ldr	r0, [r7, #12]
 8008f1a:	f000 fb3d 	bl	8009598 <USBH_CtlReq>
 8008f1e:	4603      	mov	r3, r0
}
 8008f20:	4618      	mov	r0, r3
 8008f22:	3710      	adds	r7, #16
 8008f24:	46bd      	mov	sp, r7
 8008f26:	bd80      	pop	{r7, pc}

08008f28 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b082      	sub	sp, #8
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
 8008f30:	460b      	mov	r3, r1
 8008f32:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	789b      	ldrb	r3, [r3, #2]
 8008f38:	2b01      	cmp	r3, #1
 8008f3a:	d10f      	bne.n	8008f5c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2205      	movs	r2, #5
 8008f46:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008f48:	78fb      	ldrb	r3, [r7, #3]
 8008f4a:	b29a      	uxth	r2, r3
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2200      	movs	r2, #0
 8008f54:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2200      	movs	r2, #0
 8008f5a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	2100      	movs	r1, #0
 8008f60:	6878      	ldr	r0, [r7, #4]
 8008f62:	f000 fb19 	bl	8009598 <USBH_CtlReq>
 8008f66:	4603      	mov	r3, r0
}
 8008f68:	4618      	mov	r0, r3
 8008f6a:	3708      	adds	r7, #8
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bd80      	pop	{r7, pc}

08008f70 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b082      	sub	sp, #8
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
 8008f78:	460b      	mov	r3, r1
 8008f7a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	789b      	ldrb	r3, [r3, #2]
 8008f80:	2b01      	cmp	r3, #1
 8008f82:	d10e      	bne.n	8008fa2 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2200      	movs	r2, #0
 8008f88:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2209      	movs	r2, #9
 8008f8e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	887a      	ldrh	r2, [r7, #2]
 8008f94:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	2100      	movs	r1, #0
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f000 faf6 	bl	8009598 <USBH_CtlReq>
 8008fac:	4603      	mov	r3, r0
}
 8008fae:	4618      	mov	r0, r3
 8008fb0:	3708      	adds	r7, #8
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bd80      	pop	{r7, pc}

08008fb6 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008fb6:	b580      	push	{r7, lr}
 8008fb8:	b082      	sub	sp, #8
 8008fba:	af00      	add	r7, sp, #0
 8008fbc:	6078      	str	r0, [r7, #4]
 8008fbe:	460b      	mov	r3, r1
 8008fc0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	789b      	ldrb	r3, [r3, #2]
 8008fc6:	2b01      	cmp	r3, #1
 8008fc8:	d10f      	bne.n	8008fea <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2200      	movs	r2, #0
 8008fce:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2203      	movs	r2, #3
 8008fd4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008fd6:	78fb      	ldrb	r3, [r7, #3]
 8008fd8:	b29a      	uxth	r2, r3
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008fea:	2200      	movs	r2, #0
 8008fec:	2100      	movs	r1, #0
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f000 fad2 	bl	8009598 <USBH_CtlReq>
 8008ff4:	4603      	mov	r3, r0
}
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	3708      	adds	r7, #8
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	bd80      	pop	{r7, pc}

08008ffe <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008ffe:	b580      	push	{r7, lr}
 8009000:	b082      	sub	sp, #8
 8009002:	af00      	add	r7, sp, #0
 8009004:	6078      	str	r0, [r7, #4]
 8009006:	460b      	mov	r3, r1
 8009008:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	789b      	ldrb	r3, [r3, #2]
 800900e:	2b01      	cmp	r3, #1
 8009010:	d10f      	bne.n	8009032 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2202      	movs	r2, #2
 8009016:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2201      	movs	r2, #1
 800901c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	2200      	movs	r2, #0
 8009022:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009024:	78fb      	ldrb	r3, [r7, #3]
 8009026:	b29a      	uxth	r2, r3
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2200      	movs	r2, #0
 8009030:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8009032:	2200      	movs	r2, #0
 8009034:	2100      	movs	r1, #0
 8009036:	6878      	ldr	r0, [r7, #4]
 8009038:	f000 faae 	bl	8009598 <USBH_CtlReq>
 800903c:	4603      	mov	r3, r0
}
 800903e:	4618      	mov	r0, r3
 8009040:	3708      	adds	r7, #8
 8009042:	46bd      	mov	sp, r7
 8009044:	bd80      	pop	{r7, pc}

08009046 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8009046:	b480      	push	{r7}
 8009048:	b085      	sub	sp, #20
 800904a:	af00      	add	r7, sp, #0
 800904c:	60f8      	str	r0, [r7, #12]
 800904e:	60b9      	str	r1, [r7, #8]
 8009050:	4613      	mov	r3, r2
 8009052:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	781a      	ldrb	r2, [r3, #0]
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800905c:	68bb      	ldr	r3, [r7, #8]
 800905e:	785a      	ldrb	r2, [r3, #1]
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8009064:	68bb      	ldr	r3, [r7, #8]
 8009066:	3302      	adds	r3, #2
 8009068:	781b      	ldrb	r3, [r3, #0]
 800906a:	b29a      	uxth	r2, r3
 800906c:	68bb      	ldr	r3, [r7, #8]
 800906e:	3303      	adds	r3, #3
 8009070:	781b      	ldrb	r3, [r3, #0]
 8009072:	b29b      	uxth	r3, r3
 8009074:	021b      	lsls	r3, r3, #8
 8009076:	b29b      	uxth	r3, r3
 8009078:	4313      	orrs	r3, r2
 800907a:	b29a      	uxth	r2, r3
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	791a      	ldrb	r2, [r3, #4]
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	795a      	ldrb	r2, [r3, #5]
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	799a      	ldrb	r2, [r3, #6]
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	79da      	ldrb	r2, [r3, #7]
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	79db      	ldrb	r3, [r3, #7]
 80090a4:	2b20      	cmp	r3, #32
 80090a6:	dc11      	bgt.n	80090cc <USBH_ParseDevDesc+0x86>
 80090a8:	2b08      	cmp	r3, #8
 80090aa:	db16      	blt.n	80090da <USBH_ParseDevDesc+0x94>
 80090ac:	3b08      	subs	r3, #8
 80090ae:	2201      	movs	r2, #1
 80090b0:	fa02 f303 	lsl.w	r3, r2, r3
 80090b4:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 80090b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80090bc:	2b00      	cmp	r3, #0
 80090be:	bf14      	ite	ne
 80090c0:	2301      	movne	r3, #1
 80090c2:	2300      	moveq	r3, #0
 80090c4:	b2db      	uxtb	r3, r3
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d102      	bne.n	80090d0 <USBH_ParseDevDesc+0x8a>
 80090ca:	e006      	b.n	80090da <USBH_ParseDevDesc+0x94>
 80090cc:	2b40      	cmp	r3, #64	; 0x40
 80090ce:	d104      	bne.n	80090da <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	79da      	ldrb	r2, [r3, #7]
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	71da      	strb	r2, [r3, #7]
      break;
 80090d8:	e003      	b.n	80090e2 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	2240      	movs	r2, #64	; 0x40
 80090de:	71da      	strb	r2, [r3, #7]
      break;
 80090e0:	bf00      	nop
  }

  if (length > 8U)
 80090e2:	88fb      	ldrh	r3, [r7, #6]
 80090e4:	2b08      	cmp	r3, #8
 80090e6:	d939      	bls.n	800915c <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80090e8:	68bb      	ldr	r3, [r7, #8]
 80090ea:	3308      	adds	r3, #8
 80090ec:	781b      	ldrb	r3, [r3, #0]
 80090ee:	b29a      	uxth	r2, r3
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	3309      	adds	r3, #9
 80090f4:	781b      	ldrb	r3, [r3, #0]
 80090f6:	b29b      	uxth	r3, r3
 80090f8:	021b      	lsls	r3, r3, #8
 80090fa:	b29b      	uxth	r3, r3
 80090fc:	4313      	orrs	r3, r2
 80090fe:	b29a      	uxth	r2, r3
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8009104:	68bb      	ldr	r3, [r7, #8]
 8009106:	330a      	adds	r3, #10
 8009108:	781b      	ldrb	r3, [r3, #0]
 800910a:	b29a      	uxth	r2, r3
 800910c:	68bb      	ldr	r3, [r7, #8]
 800910e:	330b      	adds	r3, #11
 8009110:	781b      	ldrb	r3, [r3, #0]
 8009112:	b29b      	uxth	r3, r3
 8009114:	021b      	lsls	r3, r3, #8
 8009116:	b29b      	uxth	r3, r3
 8009118:	4313      	orrs	r3, r2
 800911a:	b29a      	uxth	r2, r3
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8009120:	68bb      	ldr	r3, [r7, #8]
 8009122:	330c      	adds	r3, #12
 8009124:	781b      	ldrb	r3, [r3, #0]
 8009126:	b29a      	uxth	r2, r3
 8009128:	68bb      	ldr	r3, [r7, #8]
 800912a:	330d      	adds	r3, #13
 800912c:	781b      	ldrb	r3, [r3, #0]
 800912e:	b29b      	uxth	r3, r3
 8009130:	021b      	lsls	r3, r3, #8
 8009132:	b29b      	uxth	r3, r3
 8009134:	4313      	orrs	r3, r2
 8009136:	b29a      	uxth	r2, r3
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	7b9a      	ldrb	r2, [r3, #14]
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8009144:	68bb      	ldr	r3, [r7, #8]
 8009146:	7bda      	ldrb	r2, [r3, #15]
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800914c:	68bb      	ldr	r3, [r7, #8]
 800914e:	7c1a      	ldrb	r2, [r3, #16]
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8009154:	68bb      	ldr	r3, [r7, #8]
 8009156:	7c5a      	ldrb	r2, [r3, #17]
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	745a      	strb	r2, [r3, #17]
  }
}
 800915c:	bf00      	nop
 800915e:	3714      	adds	r7, #20
 8009160:	46bd      	mov	sp, r7
 8009162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009166:	4770      	bx	lr

08009168 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b08c      	sub	sp, #48	; 0x30
 800916c:	af00      	add	r7, sp, #0
 800916e:	60f8      	str	r0, [r7, #12]
 8009170:	60b9      	str	r1, [r7, #8]
 8009172:	4613      	mov	r3, r2
 8009174:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800917c:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800917e:	2300      	movs	r3, #0
 8009180:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009188:	2300      	movs	r3, #0
 800918a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800918e:	2300      	movs	r3, #0
 8009190:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	781a      	ldrb	r2, [r3, #0]
 800919c:	6a3b      	ldr	r3, [r7, #32]
 800919e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	785a      	ldrb	r2, [r3, #1]
 80091a4:	6a3b      	ldr	r3, [r7, #32]
 80091a6:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	3302      	adds	r3, #2
 80091ac:	781b      	ldrb	r3, [r3, #0]
 80091ae:	b29a      	uxth	r2, r3
 80091b0:	68bb      	ldr	r3, [r7, #8]
 80091b2:	3303      	adds	r3, #3
 80091b4:	781b      	ldrb	r3, [r3, #0]
 80091b6:	b29b      	uxth	r3, r3
 80091b8:	021b      	lsls	r3, r3, #8
 80091ba:	b29b      	uxth	r3, r3
 80091bc:	4313      	orrs	r3, r2
 80091be:	b29b      	uxth	r3, r3
 80091c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80091c4:	bf28      	it	cs
 80091c6:	f44f 7380 	movcs.w	r3, #256	; 0x100
 80091ca:	b29a      	uxth	r2, r3
 80091cc:	6a3b      	ldr	r3, [r7, #32]
 80091ce:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	791a      	ldrb	r2, [r3, #4]
 80091d4:	6a3b      	ldr	r3, [r7, #32]
 80091d6:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	795a      	ldrb	r2, [r3, #5]
 80091dc:	6a3b      	ldr	r3, [r7, #32]
 80091de:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	799a      	ldrb	r2, [r3, #6]
 80091e4:	6a3b      	ldr	r3, [r7, #32]
 80091e6:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	79da      	ldrb	r2, [r3, #7]
 80091ec:	6a3b      	ldr	r3, [r7, #32]
 80091ee:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	7a1a      	ldrb	r2, [r3, #8]
 80091f4:	6a3b      	ldr	r3, [r7, #32]
 80091f6:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 80091f8:	6a3b      	ldr	r3, [r7, #32]
 80091fa:	781b      	ldrb	r3, [r3, #0]
 80091fc:	2b09      	cmp	r3, #9
 80091fe:	d002      	beq.n	8009206 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8009200:	6a3b      	ldr	r3, [r7, #32]
 8009202:	2209      	movs	r2, #9
 8009204:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8009206:	88fb      	ldrh	r3, [r7, #6]
 8009208:	2b09      	cmp	r3, #9
 800920a:	f240 809d 	bls.w	8009348 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800920e:	2309      	movs	r3, #9
 8009210:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009212:	2300      	movs	r3, #0
 8009214:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009216:	e081      	b.n	800931c <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009218:	f107 0316 	add.w	r3, r7, #22
 800921c:	4619      	mov	r1, r3
 800921e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009220:	f000 f99f 	bl	8009562 <USBH_GetNextDesc>
 8009224:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8009226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009228:	785b      	ldrb	r3, [r3, #1]
 800922a:	2b04      	cmp	r3, #4
 800922c:	d176      	bne.n	800931c <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800922e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009230:	781b      	ldrb	r3, [r3, #0]
 8009232:	2b09      	cmp	r3, #9
 8009234:	d002      	beq.n	800923c <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8009236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009238:	2209      	movs	r2, #9
 800923a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800923c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009240:	221a      	movs	r2, #26
 8009242:	fb02 f303 	mul.w	r3, r2, r3
 8009246:	3308      	adds	r3, #8
 8009248:	6a3a      	ldr	r2, [r7, #32]
 800924a:	4413      	add	r3, r2
 800924c:	3302      	adds	r3, #2
 800924e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8009250:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009252:	69f8      	ldr	r0, [r7, #28]
 8009254:	f000 f87e 	bl	8009354 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009258:	2300      	movs	r3, #0
 800925a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800925e:	2300      	movs	r3, #0
 8009260:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009262:	e043      	b.n	80092ec <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009264:	f107 0316 	add.w	r3, r7, #22
 8009268:	4619      	mov	r1, r3
 800926a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800926c:	f000 f979 	bl	8009562 <USBH_GetNextDesc>
 8009270:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009274:	785b      	ldrb	r3, [r3, #1]
 8009276:	2b05      	cmp	r3, #5
 8009278:	d138      	bne.n	80092ec <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800927a:	69fb      	ldr	r3, [r7, #28]
 800927c:	795b      	ldrb	r3, [r3, #5]
 800927e:	2b01      	cmp	r3, #1
 8009280:	d10f      	bne.n	80092a2 <USBH_ParseCfgDesc+0x13a>
 8009282:	69fb      	ldr	r3, [r7, #28]
 8009284:	799b      	ldrb	r3, [r3, #6]
 8009286:	2b02      	cmp	r3, #2
 8009288:	d10b      	bne.n	80092a2 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800928a:	69fb      	ldr	r3, [r7, #28]
 800928c:	79db      	ldrb	r3, [r3, #7]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d10f      	bne.n	80092b2 <USBH_ParseCfgDesc+0x14a>
 8009292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009294:	781b      	ldrb	r3, [r3, #0]
 8009296:	2b09      	cmp	r3, #9
 8009298:	d00b      	beq.n	80092b2 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800929a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800929c:	2209      	movs	r2, #9
 800929e:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80092a0:	e007      	b.n	80092b2 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 80092a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092a4:	781b      	ldrb	r3, [r3, #0]
 80092a6:	2b07      	cmp	r3, #7
 80092a8:	d004      	beq.n	80092b4 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80092aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092ac:	2207      	movs	r2, #7
 80092ae:	701a      	strb	r2, [r3, #0]
 80092b0:	e000      	b.n	80092b4 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80092b2:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80092b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80092b8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80092bc:	3201      	adds	r2, #1
 80092be:	00d2      	lsls	r2, r2, #3
 80092c0:	211a      	movs	r1, #26
 80092c2:	fb01 f303 	mul.w	r3, r1, r3
 80092c6:	4413      	add	r3, r2
 80092c8:	3308      	adds	r3, #8
 80092ca:	6a3a      	ldr	r2, [r7, #32]
 80092cc:	4413      	add	r3, r2
 80092ce:	3304      	adds	r3, #4
 80092d0:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 80092d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80092d4:	69b9      	ldr	r1, [r7, #24]
 80092d6:	68f8      	ldr	r0, [r7, #12]
 80092d8:	f000 f86b 	bl	80093b2 <USBH_ParseEPDesc>
 80092dc:	4603      	mov	r3, r0
 80092de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 80092e2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80092e6:	3301      	adds	r3, #1
 80092e8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80092ec:	69fb      	ldr	r3, [r7, #28]
 80092ee:	791b      	ldrb	r3, [r3, #4]
 80092f0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80092f4:	429a      	cmp	r2, r3
 80092f6:	d204      	bcs.n	8009302 <USBH_ParseCfgDesc+0x19a>
 80092f8:	6a3b      	ldr	r3, [r7, #32]
 80092fa:	885a      	ldrh	r2, [r3, #2]
 80092fc:	8afb      	ldrh	r3, [r7, #22]
 80092fe:	429a      	cmp	r2, r3
 8009300:	d8b0      	bhi.n	8009264 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8009302:	69fb      	ldr	r3, [r7, #28]
 8009304:	791b      	ldrb	r3, [r3, #4]
 8009306:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800930a:	429a      	cmp	r2, r3
 800930c:	d201      	bcs.n	8009312 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800930e:	2303      	movs	r3, #3
 8009310:	e01c      	b.n	800934c <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8009312:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009316:	3301      	adds	r3, #1
 8009318:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800931c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009320:	2b01      	cmp	r3, #1
 8009322:	d805      	bhi.n	8009330 <USBH_ParseCfgDesc+0x1c8>
 8009324:	6a3b      	ldr	r3, [r7, #32]
 8009326:	885a      	ldrh	r2, [r3, #2]
 8009328:	8afb      	ldrh	r3, [r7, #22]
 800932a:	429a      	cmp	r2, r3
 800932c:	f63f af74 	bhi.w	8009218 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8009330:	6a3b      	ldr	r3, [r7, #32]
 8009332:	791b      	ldrb	r3, [r3, #4]
 8009334:	2b02      	cmp	r3, #2
 8009336:	bf28      	it	cs
 8009338:	2302      	movcs	r3, #2
 800933a:	b2db      	uxtb	r3, r3
 800933c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009340:	429a      	cmp	r2, r3
 8009342:	d201      	bcs.n	8009348 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8009344:	2303      	movs	r3, #3
 8009346:	e001      	b.n	800934c <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8009348:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800934c:	4618      	mov	r0, r3
 800934e:	3730      	adds	r7, #48	; 0x30
 8009350:	46bd      	mov	sp, r7
 8009352:	bd80      	pop	{r7, pc}

08009354 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8009354:	b480      	push	{r7}
 8009356:	b083      	sub	sp, #12
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
 800935c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	781a      	ldrb	r2, [r3, #0]
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	785a      	ldrb	r2, [r3, #1]
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	789a      	ldrb	r2, [r3, #2]
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	78da      	ldrb	r2, [r3, #3]
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	791a      	ldrb	r2, [r3, #4]
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	795a      	ldrb	r2, [r3, #5]
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	799a      	ldrb	r2, [r3, #6]
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	79da      	ldrb	r2, [r3, #7]
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	7a1a      	ldrb	r2, [r3, #8]
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	721a      	strb	r2, [r3, #8]
}
 80093a6:	bf00      	nop
 80093a8:	370c      	adds	r7, #12
 80093aa:	46bd      	mov	sp, r7
 80093ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b0:	4770      	bx	lr

080093b2 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 80093b2:	b480      	push	{r7}
 80093b4:	b087      	sub	sp, #28
 80093b6:	af00      	add	r7, sp, #0
 80093b8:	60f8      	str	r0, [r7, #12]
 80093ba:	60b9      	str	r1, [r7, #8]
 80093bc:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80093be:	2300      	movs	r3, #0
 80093c0:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	781a      	ldrb	r2, [r3, #0]
 80093c6:	68bb      	ldr	r3, [r7, #8]
 80093c8:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	785a      	ldrb	r2, [r3, #1]
 80093ce:	68bb      	ldr	r3, [r7, #8]
 80093d0:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	789a      	ldrb	r2, [r3, #2]
 80093d6:	68bb      	ldr	r3, [r7, #8]
 80093d8:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	78da      	ldrb	r2, [r3, #3]
 80093de:	68bb      	ldr	r3, [r7, #8]
 80093e0:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	3304      	adds	r3, #4
 80093e6:	781b      	ldrb	r3, [r3, #0]
 80093e8:	b29a      	uxth	r2, r3
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	3305      	adds	r3, #5
 80093ee:	781b      	ldrb	r3, [r3, #0]
 80093f0:	b29b      	uxth	r3, r3
 80093f2:	021b      	lsls	r3, r3, #8
 80093f4:	b29b      	uxth	r3, r3
 80093f6:	4313      	orrs	r3, r2
 80093f8:	b29a      	uxth	r2, r3
 80093fa:	68bb      	ldr	r3, [r7, #8]
 80093fc:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	799a      	ldrb	r2, [r3, #6]
 8009402:	68bb      	ldr	r3, [r7, #8]
 8009404:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8009406:	68bb      	ldr	r3, [r7, #8]
 8009408:	889b      	ldrh	r3, [r3, #4]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d102      	bne.n	8009414 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800940e:	2303      	movs	r3, #3
 8009410:	75fb      	strb	r3, [r7, #23]
 8009412:	e033      	b.n	800947c <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8009414:	68bb      	ldr	r3, [r7, #8]
 8009416:	889b      	ldrh	r3, [r3, #4]
 8009418:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800941c:	f023 0307 	bic.w	r3, r3, #7
 8009420:	b29a      	uxth	r2, r3
 8009422:	68bb      	ldr	r3, [r7, #8]
 8009424:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8009426:	68bb      	ldr	r3, [r7, #8]
 8009428:	889b      	ldrh	r3, [r3, #4]
 800942a:	b21a      	sxth	r2, r3
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	3304      	adds	r3, #4
 8009430:	781b      	ldrb	r3, [r3, #0]
 8009432:	b299      	uxth	r1, r3
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	3305      	adds	r3, #5
 8009438:	781b      	ldrb	r3, [r3, #0]
 800943a:	b29b      	uxth	r3, r3
 800943c:	021b      	lsls	r3, r3, #8
 800943e:	b29b      	uxth	r3, r3
 8009440:	430b      	orrs	r3, r1
 8009442:	b29b      	uxth	r3, r3
 8009444:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009448:	2b00      	cmp	r3, #0
 800944a:	d110      	bne.n	800946e <USBH_ParseEPDesc+0xbc>
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	3304      	adds	r3, #4
 8009450:	781b      	ldrb	r3, [r3, #0]
 8009452:	b299      	uxth	r1, r3
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	3305      	adds	r3, #5
 8009458:	781b      	ldrb	r3, [r3, #0]
 800945a:	b29b      	uxth	r3, r3
 800945c:	021b      	lsls	r3, r3, #8
 800945e:	b29b      	uxth	r3, r3
 8009460:	430b      	orrs	r3, r1
 8009462:	b29b      	uxth	r3, r3
 8009464:	b21b      	sxth	r3, r3
 8009466:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800946a:	b21b      	sxth	r3, r3
 800946c:	e001      	b.n	8009472 <USBH_ParseEPDesc+0xc0>
 800946e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009472:	4313      	orrs	r3, r2
 8009474:	b21b      	sxth	r3, r3
 8009476:	b29a      	uxth	r2, r3
 8009478:	68bb      	ldr	r3, [r7, #8]
 800947a:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009482:	2b00      	cmp	r3, #0
 8009484:	d116      	bne.n	80094b4 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	78db      	ldrb	r3, [r3, #3]
 800948a:	f003 0303 	and.w	r3, r3, #3
 800948e:	2b01      	cmp	r3, #1
 8009490:	d005      	beq.n	800949e <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8009492:	68bb      	ldr	r3, [r7, #8]
 8009494:	78db      	ldrb	r3, [r3, #3]
 8009496:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800949a:	2b03      	cmp	r3, #3
 800949c:	d127      	bne.n	80094ee <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800949e:	68bb      	ldr	r3, [r7, #8]
 80094a0:	799b      	ldrb	r3, [r3, #6]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d003      	beq.n	80094ae <USBH_ParseEPDesc+0xfc>
 80094a6:	68bb      	ldr	r3, [r7, #8]
 80094a8:	799b      	ldrb	r3, [r3, #6]
 80094aa:	2b10      	cmp	r3, #16
 80094ac:	d91f      	bls.n	80094ee <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80094ae:	2303      	movs	r3, #3
 80094b0:	75fb      	strb	r3, [r7, #23]
 80094b2:	e01c      	b.n	80094ee <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	78db      	ldrb	r3, [r3, #3]
 80094b8:	f003 0303 	and.w	r3, r3, #3
 80094bc:	2b01      	cmp	r3, #1
 80094be:	d10a      	bne.n	80094d6 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80094c0:	68bb      	ldr	r3, [r7, #8]
 80094c2:	799b      	ldrb	r3, [r3, #6]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d003      	beq.n	80094d0 <USBH_ParseEPDesc+0x11e>
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	799b      	ldrb	r3, [r3, #6]
 80094cc:	2b10      	cmp	r3, #16
 80094ce:	d90e      	bls.n	80094ee <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80094d0:	2303      	movs	r3, #3
 80094d2:	75fb      	strb	r3, [r7, #23]
 80094d4:	e00b      	b.n	80094ee <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80094d6:	68bb      	ldr	r3, [r7, #8]
 80094d8:	78db      	ldrb	r3, [r3, #3]
 80094da:	f003 0303 	and.w	r3, r3, #3
 80094de:	2b03      	cmp	r3, #3
 80094e0:	d105      	bne.n	80094ee <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 80094e2:	68bb      	ldr	r3, [r7, #8]
 80094e4:	799b      	ldrb	r3, [r3, #6]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d101      	bne.n	80094ee <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80094ea:	2303      	movs	r3, #3
 80094ec:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 80094ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80094f0:	4618      	mov	r0, r3
 80094f2:	371c      	adds	r7, #28
 80094f4:	46bd      	mov	sp, r7
 80094f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fa:	4770      	bx	lr

080094fc <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80094fc:	b480      	push	{r7}
 80094fe:	b087      	sub	sp, #28
 8009500:	af00      	add	r7, sp, #0
 8009502:	60f8      	str	r0, [r7, #12]
 8009504:	60b9      	str	r1, [r7, #8]
 8009506:	4613      	mov	r3, r2
 8009508:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	3301      	adds	r3, #1
 800950e:	781b      	ldrb	r3, [r3, #0]
 8009510:	2b03      	cmp	r3, #3
 8009512:	d120      	bne.n	8009556 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	781b      	ldrb	r3, [r3, #0]
 8009518:	1e9a      	subs	r2, r3, #2
 800951a:	88fb      	ldrh	r3, [r7, #6]
 800951c:	4293      	cmp	r3, r2
 800951e:	bf28      	it	cs
 8009520:	4613      	movcs	r3, r2
 8009522:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	3302      	adds	r3, #2
 8009528:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800952a:	2300      	movs	r3, #0
 800952c:	82fb      	strh	r3, [r7, #22]
 800952e:	e00b      	b.n	8009548 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009530:	8afb      	ldrh	r3, [r7, #22]
 8009532:	68fa      	ldr	r2, [r7, #12]
 8009534:	4413      	add	r3, r2
 8009536:	781a      	ldrb	r2, [r3, #0]
 8009538:	68bb      	ldr	r3, [r7, #8]
 800953a:	701a      	strb	r2, [r3, #0]
      pdest++;
 800953c:	68bb      	ldr	r3, [r7, #8]
 800953e:	3301      	adds	r3, #1
 8009540:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8009542:	8afb      	ldrh	r3, [r7, #22]
 8009544:	3302      	adds	r3, #2
 8009546:	82fb      	strh	r3, [r7, #22]
 8009548:	8afa      	ldrh	r2, [r7, #22]
 800954a:	8abb      	ldrh	r3, [r7, #20]
 800954c:	429a      	cmp	r2, r3
 800954e:	d3ef      	bcc.n	8009530 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009550:	68bb      	ldr	r3, [r7, #8]
 8009552:	2200      	movs	r2, #0
 8009554:	701a      	strb	r2, [r3, #0]
  }
}
 8009556:	bf00      	nop
 8009558:	371c      	adds	r7, #28
 800955a:	46bd      	mov	sp, r7
 800955c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009560:	4770      	bx	lr

08009562 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8009562:	b480      	push	{r7}
 8009564:	b085      	sub	sp, #20
 8009566:	af00      	add	r7, sp, #0
 8009568:	6078      	str	r0, [r7, #4]
 800956a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	881a      	ldrh	r2, [r3, #0]
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	781b      	ldrb	r3, [r3, #0]
 8009574:	b29b      	uxth	r3, r3
 8009576:	4413      	add	r3, r2
 8009578:	b29a      	uxth	r2, r3
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	781b      	ldrb	r3, [r3, #0]
 8009582:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	4413      	add	r3, r2
 8009588:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800958a:	68fb      	ldr	r3, [r7, #12]
}
 800958c:	4618      	mov	r0, r3
 800958e:	3714      	adds	r7, #20
 8009590:	46bd      	mov	sp, r7
 8009592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009596:	4770      	bx	lr

08009598 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b086      	sub	sp, #24
 800959c:	af00      	add	r7, sp, #0
 800959e:	60f8      	str	r0, [r7, #12]
 80095a0:	60b9      	str	r1, [r7, #8]
 80095a2:	4613      	mov	r3, r2
 80095a4:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80095a6:	2301      	movs	r3, #1
 80095a8:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	789b      	ldrb	r3, [r3, #2]
 80095ae:	2b01      	cmp	r3, #1
 80095b0:	d002      	beq.n	80095b8 <USBH_CtlReq+0x20>
 80095b2:	2b02      	cmp	r3, #2
 80095b4:	d00f      	beq.n	80095d6 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80095b6:	e027      	b.n	8009608 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	68ba      	ldr	r2, [r7, #8]
 80095bc:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	88fa      	ldrh	r2, [r7, #6]
 80095c2:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	2201      	movs	r2, #1
 80095c8:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	2202      	movs	r2, #2
 80095ce:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80095d0:	2301      	movs	r3, #1
 80095d2:	75fb      	strb	r3, [r7, #23]
      break;
 80095d4:	e018      	b.n	8009608 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80095d6:	68f8      	ldr	r0, [r7, #12]
 80095d8:	f000 f81c 	bl	8009614 <USBH_HandleControl>
 80095dc:	4603      	mov	r3, r0
 80095de:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80095e0:	7dfb      	ldrb	r3, [r7, #23]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d002      	beq.n	80095ec <USBH_CtlReq+0x54>
 80095e6:	7dfb      	ldrb	r3, [r7, #23]
 80095e8:	2b03      	cmp	r3, #3
 80095ea:	d106      	bne.n	80095fa <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	2201      	movs	r2, #1
 80095f0:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	2200      	movs	r2, #0
 80095f6:	761a      	strb	r2, [r3, #24]
      break;
 80095f8:	e005      	b.n	8009606 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80095fa:	7dfb      	ldrb	r3, [r7, #23]
 80095fc:	2b02      	cmp	r3, #2
 80095fe:	d102      	bne.n	8009606 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	2201      	movs	r2, #1
 8009604:	709a      	strb	r2, [r3, #2]
      break;
 8009606:	bf00      	nop
  }
  return status;
 8009608:	7dfb      	ldrb	r3, [r7, #23]
}
 800960a:	4618      	mov	r0, r3
 800960c:	3718      	adds	r7, #24
 800960e:	46bd      	mov	sp, r7
 8009610:	bd80      	pop	{r7, pc}
	...

08009614 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b086      	sub	sp, #24
 8009618:	af02      	add	r7, sp, #8
 800961a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800961c:	2301      	movs	r3, #1
 800961e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009620:	2300      	movs	r3, #0
 8009622:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	7e1b      	ldrb	r3, [r3, #24]
 8009628:	3b01      	subs	r3, #1
 800962a:	2b0a      	cmp	r3, #10
 800962c:	f200 8156 	bhi.w	80098dc <USBH_HandleControl+0x2c8>
 8009630:	a201      	add	r2, pc, #4	; (adr r2, 8009638 <USBH_HandleControl+0x24>)
 8009632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009636:	bf00      	nop
 8009638:	08009665 	.word	0x08009665
 800963c:	0800967f 	.word	0x0800967f
 8009640:	080096e9 	.word	0x080096e9
 8009644:	0800970f 	.word	0x0800970f
 8009648:	08009747 	.word	0x08009747
 800964c:	08009771 	.word	0x08009771
 8009650:	080097c3 	.word	0x080097c3
 8009654:	080097e5 	.word	0x080097e5
 8009658:	08009821 	.word	0x08009821
 800965c:	08009847 	.word	0x08009847
 8009660:	08009885 	.word	0x08009885
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f103 0110 	add.w	r1, r3, #16
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	795b      	ldrb	r3, [r3, #5]
 800966e:	461a      	mov	r2, r3
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	f000 f943 	bl	80098fc <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2202      	movs	r2, #2
 800967a:	761a      	strb	r2, [r3, #24]
      break;
 800967c:	e139      	b.n	80098f2 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	795b      	ldrb	r3, [r3, #5]
 8009682:	4619      	mov	r1, r3
 8009684:	6878      	ldr	r0, [r7, #4]
 8009686:	f000 fcc5 	bl	800a014 <USBH_LL_GetURBState>
 800968a:	4603      	mov	r3, r0
 800968c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800968e:	7bbb      	ldrb	r3, [r7, #14]
 8009690:	2b01      	cmp	r3, #1
 8009692:	d11e      	bne.n	80096d2 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	7c1b      	ldrb	r3, [r3, #16]
 8009698:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800969c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	8adb      	ldrh	r3, [r3, #22]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d00a      	beq.n	80096bc <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80096a6:	7b7b      	ldrb	r3, [r7, #13]
 80096a8:	2b80      	cmp	r3, #128	; 0x80
 80096aa:	d103      	bne.n	80096b4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2203      	movs	r2, #3
 80096b0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80096b2:	e115      	b.n	80098e0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2205      	movs	r2, #5
 80096b8:	761a      	strb	r2, [r3, #24]
      break;
 80096ba:	e111      	b.n	80098e0 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80096bc:	7b7b      	ldrb	r3, [r7, #13]
 80096be:	2b80      	cmp	r3, #128	; 0x80
 80096c0:	d103      	bne.n	80096ca <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	2209      	movs	r2, #9
 80096c6:	761a      	strb	r2, [r3, #24]
      break;
 80096c8:	e10a      	b.n	80098e0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2207      	movs	r2, #7
 80096ce:	761a      	strb	r2, [r3, #24]
      break;
 80096d0:	e106      	b.n	80098e0 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80096d2:	7bbb      	ldrb	r3, [r7, #14]
 80096d4:	2b04      	cmp	r3, #4
 80096d6:	d003      	beq.n	80096e0 <USBH_HandleControl+0xcc>
 80096d8:	7bbb      	ldrb	r3, [r7, #14]
 80096da:	2b02      	cmp	r3, #2
 80096dc:	f040 8100 	bne.w	80098e0 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	220b      	movs	r2, #11
 80096e4:	761a      	strb	r2, [r3, #24]
      break;
 80096e6:	e0fb      	b.n	80098e0 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80096ee:	b29a      	uxth	r2, r3
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	6899      	ldr	r1, [r3, #8]
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	899a      	ldrh	r2, [r3, #12]
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	791b      	ldrb	r3, [r3, #4]
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	f000 f93a 	bl	800997a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2204      	movs	r2, #4
 800970a:	761a      	strb	r2, [r3, #24]
      break;
 800970c:	e0f1      	b.n	80098f2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	791b      	ldrb	r3, [r3, #4]
 8009712:	4619      	mov	r1, r3
 8009714:	6878      	ldr	r0, [r7, #4]
 8009716:	f000 fc7d 	bl	800a014 <USBH_LL_GetURBState>
 800971a:	4603      	mov	r3, r0
 800971c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800971e:	7bbb      	ldrb	r3, [r7, #14]
 8009720:	2b01      	cmp	r3, #1
 8009722:	d102      	bne.n	800972a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2209      	movs	r2, #9
 8009728:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800972a:	7bbb      	ldrb	r3, [r7, #14]
 800972c:	2b05      	cmp	r3, #5
 800972e:	d102      	bne.n	8009736 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009730:	2303      	movs	r3, #3
 8009732:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009734:	e0d6      	b.n	80098e4 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8009736:	7bbb      	ldrb	r3, [r7, #14]
 8009738:	2b04      	cmp	r3, #4
 800973a:	f040 80d3 	bne.w	80098e4 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	220b      	movs	r2, #11
 8009742:	761a      	strb	r2, [r3, #24]
      break;
 8009744:	e0ce      	b.n	80098e4 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	6899      	ldr	r1, [r3, #8]
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	899a      	ldrh	r2, [r3, #12]
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	795b      	ldrb	r3, [r3, #5]
 8009752:	2001      	movs	r0, #1
 8009754:	9000      	str	r0, [sp, #0]
 8009756:	6878      	ldr	r0, [r7, #4]
 8009758:	f000 f8ea 	bl	8009930 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009762:	b29a      	uxth	r2, r3
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2206      	movs	r2, #6
 800976c:	761a      	strb	r2, [r3, #24]
      break;
 800976e:	e0c0      	b.n	80098f2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	795b      	ldrb	r3, [r3, #5]
 8009774:	4619      	mov	r1, r3
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	f000 fc4c 	bl	800a014 <USBH_LL_GetURBState>
 800977c:	4603      	mov	r3, r0
 800977e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009780:	7bbb      	ldrb	r3, [r7, #14]
 8009782:	2b01      	cmp	r3, #1
 8009784:	d103      	bne.n	800978e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	2207      	movs	r2, #7
 800978a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800978c:	e0ac      	b.n	80098e8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800978e:	7bbb      	ldrb	r3, [r7, #14]
 8009790:	2b05      	cmp	r3, #5
 8009792:	d105      	bne.n	80097a0 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	220c      	movs	r2, #12
 8009798:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800979a:	2303      	movs	r3, #3
 800979c:	73fb      	strb	r3, [r7, #15]
      break;
 800979e:	e0a3      	b.n	80098e8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80097a0:	7bbb      	ldrb	r3, [r7, #14]
 80097a2:	2b02      	cmp	r3, #2
 80097a4:	d103      	bne.n	80097ae <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2205      	movs	r2, #5
 80097aa:	761a      	strb	r2, [r3, #24]
      break;
 80097ac:	e09c      	b.n	80098e8 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80097ae:	7bbb      	ldrb	r3, [r7, #14]
 80097b0:	2b04      	cmp	r3, #4
 80097b2:	f040 8099 	bne.w	80098e8 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	220b      	movs	r2, #11
 80097ba:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80097bc:	2302      	movs	r3, #2
 80097be:	73fb      	strb	r3, [r7, #15]
      break;
 80097c0:	e092      	b.n	80098e8 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	791b      	ldrb	r3, [r3, #4]
 80097c6:	2200      	movs	r2, #0
 80097c8:	2100      	movs	r1, #0
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	f000 f8d5 	bl	800997a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80097d6:	b29a      	uxth	r2, r3
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2208      	movs	r2, #8
 80097e0:	761a      	strb	r2, [r3, #24]

      break;
 80097e2:	e086      	b.n	80098f2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	791b      	ldrb	r3, [r3, #4]
 80097e8:	4619      	mov	r1, r3
 80097ea:	6878      	ldr	r0, [r7, #4]
 80097ec:	f000 fc12 	bl	800a014 <USBH_LL_GetURBState>
 80097f0:	4603      	mov	r3, r0
 80097f2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80097f4:	7bbb      	ldrb	r3, [r7, #14]
 80097f6:	2b01      	cmp	r3, #1
 80097f8:	d105      	bne.n	8009806 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	220d      	movs	r2, #13
 80097fe:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009800:	2300      	movs	r3, #0
 8009802:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009804:	e072      	b.n	80098ec <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8009806:	7bbb      	ldrb	r3, [r7, #14]
 8009808:	2b04      	cmp	r3, #4
 800980a:	d103      	bne.n	8009814 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	220b      	movs	r2, #11
 8009810:	761a      	strb	r2, [r3, #24]
      break;
 8009812:	e06b      	b.n	80098ec <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8009814:	7bbb      	ldrb	r3, [r7, #14]
 8009816:	2b05      	cmp	r3, #5
 8009818:	d168      	bne.n	80098ec <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800981a:	2303      	movs	r3, #3
 800981c:	73fb      	strb	r3, [r7, #15]
      break;
 800981e:	e065      	b.n	80098ec <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	795b      	ldrb	r3, [r3, #5]
 8009824:	2201      	movs	r2, #1
 8009826:	9200      	str	r2, [sp, #0]
 8009828:	2200      	movs	r2, #0
 800982a:	2100      	movs	r1, #0
 800982c:	6878      	ldr	r0, [r7, #4]
 800982e:	f000 f87f 	bl	8009930 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009838:	b29a      	uxth	r2, r3
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	220a      	movs	r2, #10
 8009842:	761a      	strb	r2, [r3, #24]
      break;
 8009844:	e055      	b.n	80098f2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	795b      	ldrb	r3, [r3, #5]
 800984a:	4619      	mov	r1, r3
 800984c:	6878      	ldr	r0, [r7, #4]
 800984e:	f000 fbe1 	bl	800a014 <USBH_LL_GetURBState>
 8009852:	4603      	mov	r3, r0
 8009854:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009856:	7bbb      	ldrb	r3, [r7, #14]
 8009858:	2b01      	cmp	r3, #1
 800985a:	d105      	bne.n	8009868 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800985c:	2300      	movs	r3, #0
 800985e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	220d      	movs	r2, #13
 8009864:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009866:	e043      	b.n	80098f0 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009868:	7bbb      	ldrb	r3, [r7, #14]
 800986a:	2b02      	cmp	r3, #2
 800986c:	d103      	bne.n	8009876 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2209      	movs	r2, #9
 8009872:	761a      	strb	r2, [r3, #24]
      break;
 8009874:	e03c      	b.n	80098f0 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8009876:	7bbb      	ldrb	r3, [r7, #14]
 8009878:	2b04      	cmp	r3, #4
 800987a:	d139      	bne.n	80098f0 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	220b      	movs	r2, #11
 8009880:	761a      	strb	r2, [r3, #24]
      break;
 8009882:	e035      	b.n	80098f0 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	7e5b      	ldrb	r3, [r3, #25]
 8009888:	3301      	adds	r3, #1
 800988a:	b2da      	uxtb	r2, r3
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	765a      	strb	r2, [r3, #25]
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	7e5b      	ldrb	r3, [r3, #25]
 8009894:	2b02      	cmp	r3, #2
 8009896:	d806      	bhi.n	80098a6 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2201      	movs	r2, #1
 800989c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2201      	movs	r2, #1
 80098a2:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80098a4:	e025      	b.n	80098f2 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80098ac:	2106      	movs	r1, #6
 80098ae:	6878      	ldr	r0, [r7, #4]
 80098b0:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2200      	movs	r2, #0
 80098b6:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	795b      	ldrb	r3, [r3, #5]
 80098bc:	4619      	mov	r1, r3
 80098be:	6878      	ldr	r0, [r7, #4]
 80098c0:	f000 f90c 	bl	8009adc <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	791b      	ldrb	r3, [r3, #4]
 80098c8:	4619      	mov	r1, r3
 80098ca:	6878      	ldr	r0, [r7, #4]
 80098cc:	f000 f906 	bl	8009adc <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2200      	movs	r2, #0
 80098d4:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80098d6:	2302      	movs	r3, #2
 80098d8:	73fb      	strb	r3, [r7, #15]
      break;
 80098da:	e00a      	b.n	80098f2 <USBH_HandleControl+0x2de>

    default:
      break;
 80098dc:	bf00      	nop
 80098de:	e008      	b.n	80098f2 <USBH_HandleControl+0x2de>
      break;
 80098e0:	bf00      	nop
 80098e2:	e006      	b.n	80098f2 <USBH_HandleControl+0x2de>
      break;
 80098e4:	bf00      	nop
 80098e6:	e004      	b.n	80098f2 <USBH_HandleControl+0x2de>
      break;
 80098e8:	bf00      	nop
 80098ea:	e002      	b.n	80098f2 <USBH_HandleControl+0x2de>
      break;
 80098ec:	bf00      	nop
 80098ee:	e000      	b.n	80098f2 <USBH_HandleControl+0x2de>
      break;
 80098f0:	bf00      	nop
  }

  return status;
 80098f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80098f4:	4618      	mov	r0, r3
 80098f6:	3710      	adds	r7, #16
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bd80      	pop	{r7, pc}

080098fc <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b088      	sub	sp, #32
 8009900:	af04      	add	r7, sp, #16
 8009902:	60f8      	str	r0, [r7, #12]
 8009904:	60b9      	str	r1, [r7, #8]
 8009906:	4613      	mov	r3, r2
 8009908:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800990a:	79f9      	ldrb	r1, [r7, #7]
 800990c:	2300      	movs	r3, #0
 800990e:	9303      	str	r3, [sp, #12]
 8009910:	2308      	movs	r3, #8
 8009912:	9302      	str	r3, [sp, #8]
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	9301      	str	r3, [sp, #4]
 8009918:	2300      	movs	r3, #0
 800991a:	9300      	str	r3, [sp, #0]
 800991c:	2300      	movs	r3, #0
 800991e:	2200      	movs	r2, #0
 8009920:	68f8      	ldr	r0, [r7, #12]
 8009922:	f000 fb46 	bl	8009fb2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8009926:	2300      	movs	r3, #0
}
 8009928:	4618      	mov	r0, r3
 800992a:	3710      	adds	r7, #16
 800992c:	46bd      	mov	sp, r7
 800992e:	bd80      	pop	{r7, pc}

08009930 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b088      	sub	sp, #32
 8009934:	af04      	add	r7, sp, #16
 8009936:	60f8      	str	r0, [r7, #12]
 8009938:	60b9      	str	r1, [r7, #8]
 800993a:	4611      	mov	r1, r2
 800993c:	461a      	mov	r2, r3
 800993e:	460b      	mov	r3, r1
 8009940:	80fb      	strh	r3, [r7, #6]
 8009942:	4613      	mov	r3, r2
 8009944:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800994c:	2b00      	cmp	r3, #0
 800994e:	d001      	beq.n	8009954 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009950:	2300      	movs	r3, #0
 8009952:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009954:	7979      	ldrb	r1, [r7, #5]
 8009956:	7e3b      	ldrb	r3, [r7, #24]
 8009958:	9303      	str	r3, [sp, #12]
 800995a:	88fb      	ldrh	r3, [r7, #6]
 800995c:	9302      	str	r3, [sp, #8]
 800995e:	68bb      	ldr	r3, [r7, #8]
 8009960:	9301      	str	r3, [sp, #4]
 8009962:	2301      	movs	r3, #1
 8009964:	9300      	str	r3, [sp, #0]
 8009966:	2300      	movs	r3, #0
 8009968:	2200      	movs	r2, #0
 800996a:	68f8      	ldr	r0, [r7, #12]
 800996c:	f000 fb21 	bl	8009fb2 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009970:	2300      	movs	r3, #0
}
 8009972:	4618      	mov	r0, r3
 8009974:	3710      	adds	r7, #16
 8009976:	46bd      	mov	sp, r7
 8009978:	bd80      	pop	{r7, pc}

0800997a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800997a:	b580      	push	{r7, lr}
 800997c:	b088      	sub	sp, #32
 800997e:	af04      	add	r7, sp, #16
 8009980:	60f8      	str	r0, [r7, #12]
 8009982:	60b9      	str	r1, [r7, #8]
 8009984:	4611      	mov	r1, r2
 8009986:	461a      	mov	r2, r3
 8009988:	460b      	mov	r3, r1
 800998a:	80fb      	strh	r3, [r7, #6]
 800998c:	4613      	mov	r3, r2
 800998e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009990:	7979      	ldrb	r1, [r7, #5]
 8009992:	2300      	movs	r3, #0
 8009994:	9303      	str	r3, [sp, #12]
 8009996:	88fb      	ldrh	r3, [r7, #6]
 8009998:	9302      	str	r3, [sp, #8]
 800999a:	68bb      	ldr	r3, [r7, #8]
 800999c:	9301      	str	r3, [sp, #4]
 800999e:	2301      	movs	r3, #1
 80099a0:	9300      	str	r3, [sp, #0]
 80099a2:	2300      	movs	r3, #0
 80099a4:	2201      	movs	r2, #1
 80099a6:	68f8      	ldr	r0, [r7, #12]
 80099a8:	f000 fb03 	bl	8009fb2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80099ac:	2300      	movs	r3, #0

}
 80099ae:	4618      	mov	r0, r3
 80099b0:	3710      	adds	r7, #16
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}

080099b6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80099b6:	b580      	push	{r7, lr}
 80099b8:	b088      	sub	sp, #32
 80099ba:	af04      	add	r7, sp, #16
 80099bc:	60f8      	str	r0, [r7, #12]
 80099be:	60b9      	str	r1, [r7, #8]
 80099c0:	4611      	mov	r1, r2
 80099c2:	461a      	mov	r2, r3
 80099c4:	460b      	mov	r3, r1
 80099c6:	80fb      	strh	r3, [r7, #6]
 80099c8:	4613      	mov	r3, r2
 80099ca:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d001      	beq.n	80099da <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80099d6:	2300      	movs	r3, #0
 80099d8:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80099da:	7979      	ldrb	r1, [r7, #5]
 80099dc:	7e3b      	ldrb	r3, [r7, #24]
 80099de:	9303      	str	r3, [sp, #12]
 80099e0:	88fb      	ldrh	r3, [r7, #6]
 80099e2:	9302      	str	r3, [sp, #8]
 80099e4:	68bb      	ldr	r3, [r7, #8]
 80099e6:	9301      	str	r3, [sp, #4]
 80099e8:	2301      	movs	r3, #1
 80099ea:	9300      	str	r3, [sp, #0]
 80099ec:	2302      	movs	r3, #2
 80099ee:	2200      	movs	r2, #0
 80099f0:	68f8      	ldr	r0, [r7, #12]
 80099f2:	f000 fade 	bl	8009fb2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80099f6:	2300      	movs	r3, #0
}
 80099f8:	4618      	mov	r0, r3
 80099fa:	3710      	adds	r7, #16
 80099fc:	46bd      	mov	sp, r7
 80099fe:	bd80      	pop	{r7, pc}

08009a00 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b088      	sub	sp, #32
 8009a04:	af04      	add	r7, sp, #16
 8009a06:	60f8      	str	r0, [r7, #12]
 8009a08:	60b9      	str	r1, [r7, #8]
 8009a0a:	4611      	mov	r1, r2
 8009a0c:	461a      	mov	r2, r3
 8009a0e:	460b      	mov	r3, r1
 8009a10:	80fb      	strh	r3, [r7, #6]
 8009a12:	4613      	mov	r3, r2
 8009a14:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009a16:	7979      	ldrb	r1, [r7, #5]
 8009a18:	2300      	movs	r3, #0
 8009a1a:	9303      	str	r3, [sp, #12]
 8009a1c:	88fb      	ldrh	r3, [r7, #6]
 8009a1e:	9302      	str	r3, [sp, #8]
 8009a20:	68bb      	ldr	r3, [r7, #8]
 8009a22:	9301      	str	r3, [sp, #4]
 8009a24:	2301      	movs	r3, #1
 8009a26:	9300      	str	r3, [sp, #0]
 8009a28:	2302      	movs	r3, #2
 8009a2a:	2201      	movs	r2, #1
 8009a2c:	68f8      	ldr	r0, [r7, #12]
 8009a2e:	f000 fac0 	bl	8009fb2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009a32:	2300      	movs	r3, #0
}
 8009a34:	4618      	mov	r0, r3
 8009a36:	3710      	adds	r7, #16
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	bd80      	pop	{r7, pc}

08009a3c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b086      	sub	sp, #24
 8009a40:	af04      	add	r7, sp, #16
 8009a42:	6078      	str	r0, [r7, #4]
 8009a44:	4608      	mov	r0, r1
 8009a46:	4611      	mov	r1, r2
 8009a48:	461a      	mov	r2, r3
 8009a4a:	4603      	mov	r3, r0
 8009a4c:	70fb      	strb	r3, [r7, #3]
 8009a4e:	460b      	mov	r3, r1
 8009a50:	70bb      	strb	r3, [r7, #2]
 8009a52:	4613      	mov	r3, r2
 8009a54:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8009a56:	7878      	ldrb	r0, [r7, #1]
 8009a58:	78ba      	ldrb	r2, [r7, #2]
 8009a5a:	78f9      	ldrb	r1, [r7, #3]
 8009a5c:	8b3b      	ldrh	r3, [r7, #24]
 8009a5e:	9302      	str	r3, [sp, #8]
 8009a60:	7d3b      	ldrb	r3, [r7, #20]
 8009a62:	9301      	str	r3, [sp, #4]
 8009a64:	7c3b      	ldrb	r3, [r7, #16]
 8009a66:	9300      	str	r3, [sp, #0]
 8009a68:	4603      	mov	r3, r0
 8009a6a:	6878      	ldr	r0, [r7, #4]
 8009a6c:	f000 fa53 	bl	8009f16 <USBH_LL_OpenPipe>

  return USBH_OK;
 8009a70:	2300      	movs	r3, #0
}
 8009a72:	4618      	mov	r0, r3
 8009a74:	3708      	adds	r7, #8
 8009a76:	46bd      	mov	sp, r7
 8009a78:	bd80      	pop	{r7, pc}

08009a7a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009a7a:	b580      	push	{r7, lr}
 8009a7c:	b082      	sub	sp, #8
 8009a7e:	af00      	add	r7, sp, #0
 8009a80:	6078      	str	r0, [r7, #4]
 8009a82:	460b      	mov	r3, r1
 8009a84:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8009a86:	78fb      	ldrb	r3, [r7, #3]
 8009a88:	4619      	mov	r1, r3
 8009a8a:	6878      	ldr	r0, [r7, #4]
 8009a8c:	f000 fa72 	bl	8009f74 <USBH_LL_ClosePipe>

  return USBH_OK;
 8009a90:	2300      	movs	r3, #0
}
 8009a92:	4618      	mov	r0, r3
 8009a94:	3708      	adds	r7, #8
 8009a96:	46bd      	mov	sp, r7
 8009a98:	bd80      	pop	{r7, pc}

08009a9a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009a9a:	b580      	push	{r7, lr}
 8009a9c:	b084      	sub	sp, #16
 8009a9e:	af00      	add	r7, sp, #0
 8009aa0:	6078      	str	r0, [r7, #4]
 8009aa2:	460b      	mov	r3, r1
 8009aa4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009aa6:	6878      	ldr	r0, [r7, #4]
 8009aa8:	f000 f836 	bl	8009b18 <USBH_GetFreePipe>
 8009aac:	4603      	mov	r3, r0
 8009aae:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009ab0:	89fb      	ldrh	r3, [r7, #14]
 8009ab2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009ab6:	4293      	cmp	r3, r2
 8009ab8:	d00a      	beq.n	8009ad0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8009aba:	78fa      	ldrb	r2, [r7, #3]
 8009abc:	89fb      	ldrh	r3, [r7, #14]
 8009abe:	f003 030f 	and.w	r3, r3, #15
 8009ac2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009ac6:	6879      	ldr	r1, [r7, #4]
 8009ac8:	33e0      	adds	r3, #224	; 0xe0
 8009aca:	009b      	lsls	r3, r3, #2
 8009acc:	440b      	add	r3, r1
 8009ace:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009ad0:	89fb      	ldrh	r3, [r7, #14]
 8009ad2:	b2db      	uxtb	r3, r3
}
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	3710      	adds	r7, #16
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	bd80      	pop	{r7, pc}

08009adc <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009adc:	b480      	push	{r7}
 8009ade:	b083      	sub	sp, #12
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
 8009ae4:	460b      	mov	r3, r1
 8009ae6:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8009ae8:	78fb      	ldrb	r3, [r7, #3]
 8009aea:	2b0f      	cmp	r3, #15
 8009aec:	d80d      	bhi.n	8009b0a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8009aee:	78fb      	ldrb	r3, [r7, #3]
 8009af0:	687a      	ldr	r2, [r7, #4]
 8009af2:	33e0      	adds	r3, #224	; 0xe0
 8009af4:	009b      	lsls	r3, r3, #2
 8009af6:	4413      	add	r3, r2
 8009af8:	685a      	ldr	r2, [r3, #4]
 8009afa:	78fb      	ldrb	r3, [r7, #3]
 8009afc:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009b00:	6879      	ldr	r1, [r7, #4]
 8009b02:	33e0      	adds	r3, #224	; 0xe0
 8009b04:	009b      	lsls	r3, r3, #2
 8009b06:	440b      	add	r3, r1
 8009b08:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009b0a:	2300      	movs	r3, #0
}
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	370c      	adds	r7, #12
 8009b10:	46bd      	mov	sp, r7
 8009b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b16:	4770      	bx	lr

08009b18 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009b18:	b480      	push	{r7}
 8009b1a:	b085      	sub	sp, #20
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009b20:	2300      	movs	r3, #0
 8009b22:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8009b24:	2300      	movs	r3, #0
 8009b26:	73fb      	strb	r3, [r7, #15]
 8009b28:	e00f      	b.n	8009b4a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009b2a:	7bfb      	ldrb	r3, [r7, #15]
 8009b2c:	687a      	ldr	r2, [r7, #4]
 8009b2e:	33e0      	adds	r3, #224	; 0xe0
 8009b30:	009b      	lsls	r3, r3, #2
 8009b32:	4413      	add	r3, r2
 8009b34:	685b      	ldr	r3, [r3, #4]
 8009b36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d102      	bne.n	8009b44 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8009b3e:	7bfb      	ldrb	r3, [r7, #15]
 8009b40:	b29b      	uxth	r3, r3
 8009b42:	e007      	b.n	8009b54 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8009b44:	7bfb      	ldrb	r3, [r7, #15]
 8009b46:	3301      	adds	r3, #1
 8009b48:	73fb      	strb	r3, [r7, #15]
 8009b4a:	7bfb      	ldrb	r3, [r7, #15]
 8009b4c:	2b0f      	cmp	r3, #15
 8009b4e:	d9ec      	bls.n	8009b2a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009b50:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8009b54:	4618      	mov	r0, r3
 8009b56:	3714      	adds	r7, #20
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5e:	4770      	bx	lr

08009b60 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009b64:	2201      	movs	r2, #1
 8009b66:	490e      	ldr	r1, [pc, #56]	; (8009ba0 <MX_USB_HOST_Init+0x40>)
 8009b68:	480e      	ldr	r0, [pc, #56]	; (8009ba4 <MX_USB_HOST_Init+0x44>)
 8009b6a:	f7fe fba7 	bl	80082bc <USBH_Init>
 8009b6e:	4603      	mov	r3, r0
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d001      	beq.n	8009b78 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009b74:	f7f8 fbc8 	bl	8002308 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8009b78:	490b      	ldr	r1, [pc, #44]	; (8009ba8 <MX_USB_HOST_Init+0x48>)
 8009b7a:	480a      	ldr	r0, [pc, #40]	; (8009ba4 <MX_USB_HOST_Init+0x44>)
 8009b7c:	f7fe fc2c 	bl	80083d8 <USBH_RegisterClass>
 8009b80:	4603      	mov	r3, r0
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d001      	beq.n	8009b8a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8009b86:	f7f8 fbbf 	bl	8002308 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8009b8a:	4806      	ldr	r0, [pc, #24]	; (8009ba4 <MX_USB_HOST_Init+0x44>)
 8009b8c:	f7fe fcb0 	bl	80084f0 <USBH_Start>
 8009b90:	4603      	mov	r3, r0
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d001      	beq.n	8009b9a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8009b96:	f7f8 fbb7 	bl	8002308 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8009b9a:	bf00      	nop
 8009b9c:	bd80      	pop	{r7, pc}
 8009b9e:	bf00      	nop
 8009ba0:	08009bc1 	.word	0x08009bc1
 8009ba4:	200003a4 	.word	0x200003a4
 8009ba8:	20000010 	.word	0x20000010

08009bac <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8009bb0:	4802      	ldr	r0, [pc, #8]	; (8009bbc <MX_USB_HOST_Process+0x10>)
 8009bb2:	f7fe fcad 	bl	8008510 <USBH_Process>
}
 8009bb6:	bf00      	nop
 8009bb8:	bd80      	pop	{r7, pc}
 8009bba:	bf00      	nop
 8009bbc:	200003a4 	.word	0x200003a4

08009bc0 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8009bc0:	b480      	push	{r7}
 8009bc2:	b083      	sub	sp, #12
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
 8009bc8:	460b      	mov	r3, r1
 8009bca:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8009bcc:	78fb      	ldrb	r3, [r7, #3]
 8009bce:	3b01      	subs	r3, #1
 8009bd0:	2b04      	cmp	r3, #4
 8009bd2:	d819      	bhi.n	8009c08 <USBH_UserProcess+0x48>
 8009bd4:	a201      	add	r2, pc, #4	; (adr r2, 8009bdc <USBH_UserProcess+0x1c>)
 8009bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bda:	bf00      	nop
 8009bdc:	08009c09 	.word	0x08009c09
 8009be0:	08009bf9 	.word	0x08009bf9
 8009be4:	08009c09 	.word	0x08009c09
 8009be8:	08009c01 	.word	0x08009c01
 8009bec:	08009bf1 	.word	0x08009bf1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009bf0:	4b09      	ldr	r3, [pc, #36]	; (8009c18 <USBH_UserProcess+0x58>)
 8009bf2:	2203      	movs	r2, #3
 8009bf4:	701a      	strb	r2, [r3, #0]
  break;
 8009bf6:	e008      	b.n	8009c0a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8009bf8:	4b07      	ldr	r3, [pc, #28]	; (8009c18 <USBH_UserProcess+0x58>)
 8009bfa:	2202      	movs	r2, #2
 8009bfc:	701a      	strb	r2, [r3, #0]
  break;
 8009bfe:	e004      	b.n	8009c0a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009c00:	4b05      	ldr	r3, [pc, #20]	; (8009c18 <USBH_UserProcess+0x58>)
 8009c02:	2201      	movs	r2, #1
 8009c04:	701a      	strb	r2, [r3, #0]
  break;
 8009c06:	e000      	b.n	8009c0a <USBH_UserProcess+0x4a>

  default:
  break;
 8009c08:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8009c0a:	bf00      	nop
 8009c0c:	370c      	adds	r7, #12
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c14:	4770      	bx	lr
 8009c16:	bf00      	nop
 8009c18:	2000077c 	.word	0x2000077c

08009c1c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b08a      	sub	sp, #40	; 0x28
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009c24:	f107 0314 	add.w	r3, r7, #20
 8009c28:	2200      	movs	r2, #0
 8009c2a:	601a      	str	r2, [r3, #0]
 8009c2c:	605a      	str	r2, [r3, #4]
 8009c2e:	609a      	str	r2, [r3, #8]
 8009c30:	60da      	str	r2, [r3, #12]
 8009c32:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009c3c:	d147      	bne.n	8009cce <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009c3e:	2300      	movs	r3, #0
 8009c40:	613b      	str	r3, [r7, #16]
 8009c42:	4b25      	ldr	r3, [pc, #148]	; (8009cd8 <HAL_HCD_MspInit+0xbc>)
 8009c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c46:	4a24      	ldr	r2, [pc, #144]	; (8009cd8 <HAL_HCD_MspInit+0xbc>)
 8009c48:	f043 0301 	orr.w	r3, r3, #1
 8009c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8009c4e:	4b22      	ldr	r3, [pc, #136]	; (8009cd8 <HAL_HCD_MspInit+0xbc>)
 8009c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c52:	f003 0301 	and.w	r3, r3, #1
 8009c56:	613b      	str	r3, [r7, #16]
 8009c58:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8009c5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009c5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009c60:	2300      	movs	r3, #0
 8009c62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c64:	2300      	movs	r3, #0
 8009c66:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009c68:	f107 0314 	add.w	r3, r7, #20
 8009c6c:	4619      	mov	r1, r3
 8009c6e:	481b      	ldr	r0, [pc, #108]	; (8009cdc <HAL_HCD_MspInit+0xc0>)
 8009c70:	f7f8 ffce 	bl	8002c10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009c74:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8009c78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009c7a:	2302      	movs	r3, #2
 8009c7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c7e:	2300      	movs	r3, #0
 8009c80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009c82:	2300      	movs	r3, #0
 8009c84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009c86:	230a      	movs	r3, #10
 8009c88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009c8a:	f107 0314 	add.w	r3, r7, #20
 8009c8e:	4619      	mov	r1, r3
 8009c90:	4812      	ldr	r0, [pc, #72]	; (8009cdc <HAL_HCD_MspInit+0xc0>)
 8009c92:	f7f8 ffbd 	bl	8002c10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009c96:	4b10      	ldr	r3, [pc, #64]	; (8009cd8 <HAL_HCD_MspInit+0xbc>)
 8009c98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c9a:	4a0f      	ldr	r2, [pc, #60]	; (8009cd8 <HAL_HCD_MspInit+0xbc>)
 8009c9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ca0:	6353      	str	r3, [r2, #52]	; 0x34
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	60fb      	str	r3, [r7, #12]
 8009ca6:	4b0c      	ldr	r3, [pc, #48]	; (8009cd8 <HAL_HCD_MspInit+0xbc>)
 8009ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009caa:	4a0b      	ldr	r2, [pc, #44]	; (8009cd8 <HAL_HCD_MspInit+0xbc>)
 8009cac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009cb0:	6453      	str	r3, [r2, #68]	; 0x44
 8009cb2:	4b09      	ldr	r3, [pc, #36]	; (8009cd8 <HAL_HCD_MspInit+0xbc>)
 8009cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009cba:	60fb      	str	r3, [r7, #12]
 8009cbc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	2100      	movs	r1, #0
 8009cc2:	2043      	movs	r0, #67	; 0x43
 8009cc4:	f7f8 fedb 	bl	8002a7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009cc8:	2043      	movs	r0, #67	; 0x43
 8009cca:	f7f8 fef4 	bl	8002ab6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009cce:	bf00      	nop
 8009cd0:	3728      	adds	r7, #40	; 0x28
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	bd80      	pop	{r7, pc}
 8009cd6:	bf00      	nop
 8009cd8:	40023800 	.word	0x40023800
 8009cdc:	40020000 	.word	0x40020000

08009ce0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b082      	sub	sp, #8
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009cee:	4618      	mov	r0, r3
 8009cf0:	f7fe ffed 	bl	8008cce <USBH_LL_IncTimer>
}
 8009cf4:	bf00      	nop
 8009cf6:	3708      	adds	r7, #8
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	bd80      	pop	{r7, pc}

08009cfc <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b082      	sub	sp, #8
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	f7ff f825 	bl	8008d5a <USBH_LL_Connect>
}
 8009d10:	bf00      	nop
 8009d12:	3708      	adds	r7, #8
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bd80      	pop	{r7, pc}

08009d18 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b082      	sub	sp, #8
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009d26:	4618      	mov	r0, r3
 8009d28:	f7ff f82e 	bl	8008d88 <USBH_LL_Disconnect>
}
 8009d2c:	bf00      	nop
 8009d2e:	3708      	adds	r7, #8
 8009d30:	46bd      	mov	sp, r7
 8009d32:	bd80      	pop	{r7, pc}

08009d34 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009d34:	b480      	push	{r7}
 8009d36:	b083      	sub	sp, #12
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
 8009d3c:	460b      	mov	r3, r1
 8009d3e:	70fb      	strb	r3, [r7, #3]
 8009d40:	4613      	mov	r3, r2
 8009d42:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009d44:	bf00      	nop
 8009d46:	370c      	adds	r7, #12
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4e:	4770      	bx	lr

08009d50 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b082      	sub	sp, #8
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009d5e:	4618      	mov	r0, r3
 8009d60:	f7fe ffdf 	bl	8008d22 <USBH_LL_PortEnabled>
}
 8009d64:	bf00      	nop
 8009d66:	3708      	adds	r7, #8
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	bd80      	pop	{r7, pc}

08009d6c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b082      	sub	sp, #8
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	f7fe ffdf 	bl	8008d3e <USBH_LL_PortDisabled>
}
 8009d80:	bf00      	nop
 8009d82:	3708      	adds	r7, #8
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bd80      	pop	{r7, pc}

08009d88 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b082      	sub	sp, #8
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009d96:	2b01      	cmp	r3, #1
 8009d98:	d12a      	bne.n	8009df0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8009d9a:	4a18      	ldr	r2, [pc, #96]	; (8009dfc <USBH_LL_Init+0x74>)
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	4a15      	ldr	r2, [pc, #84]	; (8009dfc <USBH_LL_Init+0x74>)
 8009da6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009daa:	4b14      	ldr	r3, [pc, #80]	; (8009dfc <USBH_LL_Init+0x74>)
 8009dac:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009db0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8009db2:	4b12      	ldr	r3, [pc, #72]	; (8009dfc <USBH_LL_Init+0x74>)
 8009db4:	2208      	movs	r2, #8
 8009db6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8009db8:	4b10      	ldr	r3, [pc, #64]	; (8009dfc <USBH_LL_Init+0x74>)
 8009dba:	2201      	movs	r2, #1
 8009dbc:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009dbe:	4b0f      	ldr	r3, [pc, #60]	; (8009dfc <USBH_LL_Init+0x74>)
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8009dc4:	4b0d      	ldr	r3, [pc, #52]	; (8009dfc <USBH_LL_Init+0x74>)
 8009dc6:	2202      	movs	r2, #2
 8009dc8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009dca:	4b0c      	ldr	r3, [pc, #48]	; (8009dfc <USBH_LL_Init+0x74>)
 8009dcc:	2200      	movs	r2, #0
 8009dce:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8009dd0:	480a      	ldr	r0, [pc, #40]	; (8009dfc <USBH_LL_Init+0x74>)
 8009dd2:	f7f9 f8d2 	bl	8002f7a <HAL_HCD_Init>
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d001      	beq.n	8009de0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8009ddc:	f7f8 fa94 	bl	8002308 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8009de0:	4806      	ldr	r0, [pc, #24]	; (8009dfc <USBH_LL_Init+0x74>)
 8009de2:	f7f9 fcb6 	bl	8003752 <HAL_HCD_GetCurrentFrame>
 8009de6:	4603      	mov	r3, r0
 8009de8:	4619      	mov	r1, r3
 8009dea:	6878      	ldr	r0, [r7, #4]
 8009dec:	f7fe ff60 	bl	8008cb0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009df0:	2300      	movs	r3, #0
}
 8009df2:	4618      	mov	r0, r3
 8009df4:	3708      	adds	r7, #8
 8009df6:	46bd      	mov	sp, r7
 8009df8:	bd80      	pop	{r7, pc}
 8009dfa:	bf00      	nop
 8009dfc:	20000780 	.word	0x20000780

08009e00 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b084      	sub	sp, #16
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e08:	2300      	movs	r3, #0
 8009e0a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009e16:	4618      	mov	r0, r3
 8009e18:	f7f9 fc25 	bl	8003666 <HAL_HCD_Start>
 8009e1c:	4603      	mov	r3, r0
 8009e1e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009e20:	7bfb      	ldrb	r3, [r7, #15]
 8009e22:	4618      	mov	r0, r3
 8009e24:	f000 f95c 	bl	800a0e0 <USBH_Get_USB_Status>
 8009e28:	4603      	mov	r3, r0
 8009e2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e2c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e2e:	4618      	mov	r0, r3
 8009e30:	3710      	adds	r7, #16
 8009e32:	46bd      	mov	sp, r7
 8009e34:	bd80      	pop	{r7, pc}

08009e36 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8009e36:	b580      	push	{r7, lr}
 8009e38:	b084      	sub	sp, #16
 8009e3a:	af00      	add	r7, sp, #0
 8009e3c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e3e:	2300      	movs	r3, #0
 8009e40:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009e42:	2300      	movs	r3, #0
 8009e44:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	f7f9 fc2d 	bl	80036ac <HAL_HCD_Stop>
 8009e52:	4603      	mov	r3, r0
 8009e54:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009e56:	7bfb      	ldrb	r3, [r7, #15]
 8009e58:	4618      	mov	r0, r3
 8009e5a:	f000 f941 	bl	800a0e0 <USBH_Get_USB_Status>
 8009e5e:	4603      	mov	r3, r0
 8009e60:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e62:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e64:	4618      	mov	r0, r3
 8009e66:	3710      	adds	r7, #16
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	bd80      	pop	{r7, pc}

08009e6c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b084      	sub	sp, #16
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009e74:	2301      	movs	r3, #1
 8009e76:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009e7e:	4618      	mov	r0, r3
 8009e80:	f7f9 fc75 	bl	800376e <HAL_HCD_GetCurrentSpeed>
 8009e84:	4603      	mov	r3, r0
 8009e86:	2b02      	cmp	r3, #2
 8009e88:	d00c      	beq.n	8009ea4 <USBH_LL_GetSpeed+0x38>
 8009e8a:	2b02      	cmp	r3, #2
 8009e8c:	d80d      	bhi.n	8009eaa <USBH_LL_GetSpeed+0x3e>
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d002      	beq.n	8009e98 <USBH_LL_GetSpeed+0x2c>
 8009e92:	2b01      	cmp	r3, #1
 8009e94:	d003      	beq.n	8009e9e <USBH_LL_GetSpeed+0x32>
 8009e96:	e008      	b.n	8009eaa <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009e98:	2300      	movs	r3, #0
 8009e9a:	73fb      	strb	r3, [r7, #15]
    break;
 8009e9c:	e008      	b.n	8009eb0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8009e9e:	2301      	movs	r3, #1
 8009ea0:	73fb      	strb	r3, [r7, #15]
    break;
 8009ea2:	e005      	b.n	8009eb0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009ea4:	2302      	movs	r3, #2
 8009ea6:	73fb      	strb	r3, [r7, #15]
    break;
 8009ea8:	e002      	b.n	8009eb0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8009eaa:	2301      	movs	r3, #1
 8009eac:	73fb      	strb	r3, [r7, #15]
    break;
 8009eae:	bf00      	nop
  }
  return  speed;
 8009eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	3710      	adds	r7, #16
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bd80      	pop	{r7, pc}

08009eba <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8009eba:	b580      	push	{r7, lr}
 8009ebc:	b084      	sub	sp, #16
 8009ebe:	af00      	add	r7, sp, #0
 8009ec0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	f7f9 fc08 	bl	80036e6 <HAL_HCD_ResetPort>
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009eda:	7bfb      	ldrb	r3, [r7, #15]
 8009edc:	4618      	mov	r0, r3
 8009ede:	f000 f8ff 	bl	800a0e0 <USBH_Get_USB_Status>
 8009ee2:	4603      	mov	r3, r0
 8009ee4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ee6:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ee8:	4618      	mov	r0, r3
 8009eea:	3710      	adds	r7, #16
 8009eec:	46bd      	mov	sp, r7
 8009eee:	bd80      	pop	{r7, pc}

08009ef0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b082      	sub	sp, #8
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
 8009ef8:	460b      	mov	r3, r1
 8009efa:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009f02:	78fa      	ldrb	r2, [r7, #3]
 8009f04:	4611      	mov	r1, r2
 8009f06:	4618      	mov	r0, r3
 8009f08:	f7f9 fc0f 	bl	800372a <HAL_HCD_HC_GetXferCount>
 8009f0c:	4603      	mov	r3, r0
}
 8009f0e:	4618      	mov	r0, r3
 8009f10:	3708      	adds	r7, #8
 8009f12:	46bd      	mov	sp, r7
 8009f14:	bd80      	pop	{r7, pc}

08009f16 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009f16:	b590      	push	{r4, r7, lr}
 8009f18:	b089      	sub	sp, #36	; 0x24
 8009f1a:	af04      	add	r7, sp, #16
 8009f1c:	6078      	str	r0, [r7, #4]
 8009f1e:	4608      	mov	r0, r1
 8009f20:	4611      	mov	r1, r2
 8009f22:	461a      	mov	r2, r3
 8009f24:	4603      	mov	r3, r0
 8009f26:	70fb      	strb	r3, [r7, #3]
 8009f28:	460b      	mov	r3, r1
 8009f2a:	70bb      	strb	r3, [r7, #2]
 8009f2c:	4613      	mov	r3, r2
 8009f2e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f30:	2300      	movs	r3, #0
 8009f32:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009f34:	2300      	movs	r3, #0
 8009f36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009f3e:	787c      	ldrb	r4, [r7, #1]
 8009f40:	78ba      	ldrb	r2, [r7, #2]
 8009f42:	78f9      	ldrb	r1, [r7, #3]
 8009f44:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009f46:	9302      	str	r3, [sp, #8]
 8009f48:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009f4c:	9301      	str	r3, [sp, #4]
 8009f4e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009f52:	9300      	str	r3, [sp, #0]
 8009f54:	4623      	mov	r3, r4
 8009f56:	f7f9 f872 	bl	800303e <HAL_HCD_HC_Init>
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009f5e:	7bfb      	ldrb	r3, [r7, #15]
 8009f60:	4618      	mov	r0, r3
 8009f62:	f000 f8bd 	bl	800a0e0 <USBH_Get_USB_Status>
 8009f66:	4603      	mov	r3, r0
 8009f68:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f6a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	3714      	adds	r7, #20
 8009f70:	46bd      	mov	sp, r7
 8009f72:	bd90      	pop	{r4, r7, pc}

08009f74 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b084      	sub	sp, #16
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
 8009f7c:	460b      	mov	r3, r1
 8009f7e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f80:	2300      	movs	r3, #0
 8009f82:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009f84:	2300      	movs	r3, #0
 8009f86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009f8e:	78fa      	ldrb	r2, [r7, #3]
 8009f90:	4611      	mov	r1, r2
 8009f92:	4618      	mov	r0, r3
 8009f94:	f7f9 f8e2 	bl	800315c <HAL_HCD_HC_Halt>
 8009f98:	4603      	mov	r3, r0
 8009f9a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009f9c:	7bfb      	ldrb	r3, [r7, #15]
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	f000 f89e 	bl	800a0e0 <USBH_Get_USB_Status>
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009fa8:	7bbb      	ldrb	r3, [r7, #14]
}
 8009faa:	4618      	mov	r0, r3
 8009fac:	3710      	adds	r7, #16
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	bd80      	pop	{r7, pc}

08009fb2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009fb2:	b590      	push	{r4, r7, lr}
 8009fb4:	b089      	sub	sp, #36	; 0x24
 8009fb6:	af04      	add	r7, sp, #16
 8009fb8:	6078      	str	r0, [r7, #4]
 8009fba:	4608      	mov	r0, r1
 8009fbc:	4611      	mov	r1, r2
 8009fbe:	461a      	mov	r2, r3
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	70fb      	strb	r3, [r7, #3]
 8009fc4:	460b      	mov	r3, r1
 8009fc6:	70bb      	strb	r3, [r7, #2]
 8009fc8:	4613      	mov	r3, r2
 8009fca:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fcc:	2300      	movs	r3, #0
 8009fce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009fda:	787c      	ldrb	r4, [r7, #1]
 8009fdc:	78ba      	ldrb	r2, [r7, #2]
 8009fde:	78f9      	ldrb	r1, [r7, #3]
 8009fe0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009fe4:	9303      	str	r3, [sp, #12]
 8009fe6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009fe8:	9302      	str	r3, [sp, #8]
 8009fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fec:	9301      	str	r3, [sp, #4]
 8009fee:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009ff2:	9300      	str	r3, [sp, #0]
 8009ff4:	4623      	mov	r3, r4
 8009ff6:	f7f9 f8d5 	bl	80031a4 <HAL_HCD_HC_SubmitRequest>
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8009ffe:	7bfb      	ldrb	r3, [r7, #15]
 800a000:	4618      	mov	r0, r3
 800a002:	f000 f86d 	bl	800a0e0 <USBH_Get_USB_Status>
 800a006:	4603      	mov	r3, r0
 800a008:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a00a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a00c:	4618      	mov	r0, r3
 800a00e:	3714      	adds	r7, #20
 800a010:	46bd      	mov	sp, r7
 800a012:	bd90      	pop	{r4, r7, pc}

0800a014 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b082      	sub	sp, #8
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
 800a01c:	460b      	mov	r3, r1
 800a01e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a026:	78fa      	ldrb	r2, [r7, #3]
 800a028:	4611      	mov	r1, r2
 800a02a:	4618      	mov	r0, r3
 800a02c:	f7f9 fb69 	bl	8003702 <HAL_HCD_HC_GetURBState>
 800a030:	4603      	mov	r3, r0
}
 800a032:	4618      	mov	r0, r3
 800a034:	3708      	adds	r7, #8
 800a036:	46bd      	mov	sp, r7
 800a038:	bd80      	pop	{r7, pc}

0800a03a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800a03a:	b580      	push	{r7, lr}
 800a03c:	b082      	sub	sp, #8
 800a03e:	af00      	add	r7, sp, #0
 800a040:	6078      	str	r0, [r7, #4]
 800a042:	460b      	mov	r3, r1
 800a044:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800a04c:	2b01      	cmp	r3, #1
 800a04e:	d103      	bne.n	800a058 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800a050:	78fb      	ldrb	r3, [r7, #3]
 800a052:	4618      	mov	r0, r3
 800a054:	f000 f870 	bl	800a138 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800a058:	20c8      	movs	r0, #200	; 0xc8
 800a05a:	f7f8 fc11 	bl	8002880 <HAL_Delay>
  return USBH_OK;
 800a05e:	2300      	movs	r3, #0
}
 800a060:	4618      	mov	r0, r3
 800a062:	3708      	adds	r7, #8
 800a064:	46bd      	mov	sp, r7
 800a066:	bd80      	pop	{r7, pc}

0800a068 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800a068:	b480      	push	{r7}
 800a06a:	b085      	sub	sp, #20
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
 800a070:	460b      	mov	r3, r1
 800a072:	70fb      	strb	r3, [r7, #3]
 800a074:	4613      	mov	r3, r2
 800a076:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a07e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800a080:	78fb      	ldrb	r3, [r7, #3]
 800a082:	68fa      	ldr	r2, [r7, #12]
 800a084:	212c      	movs	r1, #44	; 0x2c
 800a086:	fb01 f303 	mul.w	r3, r1, r3
 800a08a:	4413      	add	r3, r2
 800a08c:	333b      	adds	r3, #59	; 0x3b
 800a08e:	781b      	ldrb	r3, [r3, #0]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d009      	beq.n	800a0a8 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800a094:	78fb      	ldrb	r3, [r7, #3]
 800a096:	68fa      	ldr	r2, [r7, #12]
 800a098:	212c      	movs	r1, #44	; 0x2c
 800a09a:	fb01 f303 	mul.w	r3, r1, r3
 800a09e:	4413      	add	r3, r2
 800a0a0:	3354      	adds	r3, #84	; 0x54
 800a0a2:	78ba      	ldrb	r2, [r7, #2]
 800a0a4:	701a      	strb	r2, [r3, #0]
 800a0a6:	e008      	b.n	800a0ba <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800a0a8:	78fb      	ldrb	r3, [r7, #3]
 800a0aa:	68fa      	ldr	r2, [r7, #12]
 800a0ac:	212c      	movs	r1, #44	; 0x2c
 800a0ae:	fb01 f303 	mul.w	r3, r1, r3
 800a0b2:	4413      	add	r3, r2
 800a0b4:	3355      	adds	r3, #85	; 0x55
 800a0b6:	78ba      	ldrb	r2, [r7, #2]
 800a0b8:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800a0ba:	2300      	movs	r3, #0
}
 800a0bc:	4618      	mov	r0, r3
 800a0be:	3714      	adds	r7, #20
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c6:	4770      	bx	lr

0800a0c8 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b082      	sub	sp, #8
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800a0d0:	6878      	ldr	r0, [r7, #4]
 800a0d2:	f7f8 fbd5 	bl	8002880 <HAL_Delay>
}
 800a0d6:	bf00      	nop
 800a0d8:	3708      	adds	r7, #8
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	bd80      	pop	{r7, pc}
	...

0800a0e0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a0e0:	b480      	push	{r7}
 800a0e2:	b085      	sub	sp, #20
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a0ee:	79fb      	ldrb	r3, [r7, #7]
 800a0f0:	2b03      	cmp	r3, #3
 800a0f2:	d817      	bhi.n	800a124 <USBH_Get_USB_Status+0x44>
 800a0f4:	a201      	add	r2, pc, #4	; (adr r2, 800a0fc <USBH_Get_USB_Status+0x1c>)
 800a0f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0fa:	bf00      	nop
 800a0fc:	0800a10d 	.word	0x0800a10d
 800a100:	0800a113 	.word	0x0800a113
 800a104:	0800a119 	.word	0x0800a119
 800a108:	0800a11f 	.word	0x0800a11f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a10c:	2300      	movs	r3, #0
 800a10e:	73fb      	strb	r3, [r7, #15]
    break;
 800a110:	e00b      	b.n	800a12a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a112:	2302      	movs	r3, #2
 800a114:	73fb      	strb	r3, [r7, #15]
    break;
 800a116:	e008      	b.n	800a12a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a118:	2301      	movs	r3, #1
 800a11a:	73fb      	strb	r3, [r7, #15]
    break;
 800a11c:	e005      	b.n	800a12a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a11e:	2302      	movs	r3, #2
 800a120:	73fb      	strb	r3, [r7, #15]
    break;
 800a122:	e002      	b.n	800a12a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a124:	2302      	movs	r3, #2
 800a126:	73fb      	strb	r3, [r7, #15]
    break;
 800a128:	bf00      	nop
  }
  return usb_status;
 800a12a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a12c:	4618      	mov	r0, r3
 800a12e:	3714      	adds	r7, #20
 800a130:	46bd      	mov	sp, r7
 800a132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a136:	4770      	bx	lr

0800a138 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b084      	sub	sp, #16
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	4603      	mov	r3, r0
 800a140:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800a142:	79fb      	ldrb	r3, [r7, #7]
 800a144:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800a146:	79fb      	ldrb	r3, [r7, #7]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d102      	bne.n	800a152 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800a14c:	2300      	movs	r3, #0
 800a14e:	73fb      	strb	r3, [r7, #15]
 800a150:	e001      	b.n	800a156 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800a152:	2301      	movs	r3, #1
 800a154:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800a156:	7bfb      	ldrb	r3, [r7, #15]
 800a158:	461a      	mov	r2, r3
 800a15a:	2101      	movs	r1, #1
 800a15c:	4803      	ldr	r0, [pc, #12]	; (800a16c <MX_DriverVbusFS+0x34>)
 800a15e:	f7f8 fef3 	bl	8002f48 <HAL_GPIO_WritePin>
}
 800a162:	bf00      	nop
 800a164:	3710      	adds	r7, #16
 800a166:	46bd      	mov	sp, r7
 800a168:	bd80      	pop	{r7, pc}
 800a16a:	bf00      	nop
 800a16c:	40020800 	.word	0x40020800

0800a170 <atoi>:
 800a170:	220a      	movs	r2, #10
 800a172:	2100      	movs	r1, #0
 800a174:	f000 b9b4 	b.w	800a4e0 <strtol>

0800a178 <__errno>:
 800a178:	4b01      	ldr	r3, [pc, #4]	; (800a180 <__errno+0x8>)
 800a17a:	6818      	ldr	r0, [r3, #0]
 800a17c:	4770      	bx	lr
 800a17e:	bf00      	nop
 800a180:	20000030 	.word	0x20000030

0800a184 <__libc_init_array>:
 800a184:	b570      	push	{r4, r5, r6, lr}
 800a186:	4d0d      	ldr	r5, [pc, #52]	; (800a1bc <__libc_init_array+0x38>)
 800a188:	4c0d      	ldr	r4, [pc, #52]	; (800a1c0 <__libc_init_array+0x3c>)
 800a18a:	1b64      	subs	r4, r4, r5
 800a18c:	10a4      	asrs	r4, r4, #2
 800a18e:	2600      	movs	r6, #0
 800a190:	42a6      	cmp	r6, r4
 800a192:	d109      	bne.n	800a1a8 <__libc_init_array+0x24>
 800a194:	4d0b      	ldr	r5, [pc, #44]	; (800a1c4 <__libc_init_array+0x40>)
 800a196:	4c0c      	ldr	r4, [pc, #48]	; (800a1c8 <__libc_init_array+0x44>)
 800a198:	f001 f8d4 	bl	800b344 <_init>
 800a19c:	1b64      	subs	r4, r4, r5
 800a19e:	10a4      	asrs	r4, r4, #2
 800a1a0:	2600      	movs	r6, #0
 800a1a2:	42a6      	cmp	r6, r4
 800a1a4:	d105      	bne.n	800a1b2 <__libc_init_array+0x2e>
 800a1a6:	bd70      	pop	{r4, r5, r6, pc}
 800a1a8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a1ac:	4798      	blx	r3
 800a1ae:	3601      	adds	r6, #1
 800a1b0:	e7ee      	b.n	800a190 <__libc_init_array+0xc>
 800a1b2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a1b6:	4798      	blx	r3
 800a1b8:	3601      	adds	r6, #1
 800a1ba:	e7f2      	b.n	800a1a2 <__libc_init_array+0x1e>
 800a1bc:	0800b4c8 	.word	0x0800b4c8
 800a1c0:	0800b4c8 	.word	0x0800b4c8
 800a1c4:	0800b4c8 	.word	0x0800b4c8
 800a1c8:	0800b4cc 	.word	0x0800b4cc

0800a1cc <malloc>:
 800a1cc:	4b02      	ldr	r3, [pc, #8]	; (800a1d8 <malloc+0xc>)
 800a1ce:	4601      	mov	r1, r0
 800a1d0:	6818      	ldr	r0, [r3, #0]
 800a1d2:	f000 b87f 	b.w	800a2d4 <_malloc_r>
 800a1d6:	bf00      	nop
 800a1d8:	20000030 	.word	0x20000030

0800a1dc <free>:
 800a1dc:	4b02      	ldr	r3, [pc, #8]	; (800a1e8 <free+0xc>)
 800a1de:	4601      	mov	r1, r0
 800a1e0:	6818      	ldr	r0, [r3, #0]
 800a1e2:	f000 b80b 	b.w	800a1fc <_free_r>
 800a1e6:	bf00      	nop
 800a1e8:	20000030 	.word	0x20000030

0800a1ec <memset>:
 800a1ec:	4402      	add	r2, r0
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	4293      	cmp	r3, r2
 800a1f2:	d100      	bne.n	800a1f6 <memset+0xa>
 800a1f4:	4770      	bx	lr
 800a1f6:	f803 1b01 	strb.w	r1, [r3], #1
 800a1fa:	e7f9      	b.n	800a1f0 <memset+0x4>

0800a1fc <_free_r>:
 800a1fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a1fe:	2900      	cmp	r1, #0
 800a200:	d044      	beq.n	800a28c <_free_r+0x90>
 800a202:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a206:	9001      	str	r0, [sp, #4]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	f1a1 0404 	sub.w	r4, r1, #4
 800a20e:	bfb8      	it	lt
 800a210:	18e4      	addlt	r4, r4, r3
 800a212:	f000 f96f 	bl	800a4f4 <__malloc_lock>
 800a216:	4a1e      	ldr	r2, [pc, #120]	; (800a290 <_free_r+0x94>)
 800a218:	9801      	ldr	r0, [sp, #4]
 800a21a:	6813      	ldr	r3, [r2, #0]
 800a21c:	b933      	cbnz	r3, 800a22c <_free_r+0x30>
 800a21e:	6063      	str	r3, [r4, #4]
 800a220:	6014      	str	r4, [r2, #0]
 800a222:	b003      	add	sp, #12
 800a224:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a228:	f000 b96a 	b.w	800a500 <__malloc_unlock>
 800a22c:	42a3      	cmp	r3, r4
 800a22e:	d908      	bls.n	800a242 <_free_r+0x46>
 800a230:	6825      	ldr	r5, [r4, #0]
 800a232:	1961      	adds	r1, r4, r5
 800a234:	428b      	cmp	r3, r1
 800a236:	bf01      	itttt	eq
 800a238:	6819      	ldreq	r1, [r3, #0]
 800a23a:	685b      	ldreq	r3, [r3, #4]
 800a23c:	1949      	addeq	r1, r1, r5
 800a23e:	6021      	streq	r1, [r4, #0]
 800a240:	e7ed      	b.n	800a21e <_free_r+0x22>
 800a242:	461a      	mov	r2, r3
 800a244:	685b      	ldr	r3, [r3, #4]
 800a246:	b10b      	cbz	r3, 800a24c <_free_r+0x50>
 800a248:	42a3      	cmp	r3, r4
 800a24a:	d9fa      	bls.n	800a242 <_free_r+0x46>
 800a24c:	6811      	ldr	r1, [r2, #0]
 800a24e:	1855      	adds	r5, r2, r1
 800a250:	42a5      	cmp	r5, r4
 800a252:	d10b      	bne.n	800a26c <_free_r+0x70>
 800a254:	6824      	ldr	r4, [r4, #0]
 800a256:	4421      	add	r1, r4
 800a258:	1854      	adds	r4, r2, r1
 800a25a:	42a3      	cmp	r3, r4
 800a25c:	6011      	str	r1, [r2, #0]
 800a25e:	d1e0      	bne.n	800a222 <_free_r+0x26>
 800a260:	681c      	ldr	r4, [r3, #0]
 800a262:	685b      	ldr	r3, [r3, #4]
 800a264:	6053      	str	r3, [r2, #4]
 800a266:	4421      	add	r1, r4
 800a268:	6011      	str	r1, [r2, #0]
 800a26a:	e7da      	b.n	800a222 <_free_r+0x26>
 800a26c:	d902      	bls.n	800a274 <_free_r+0x78>
 800a26e:	230c      	movs	r3, #12
 800a270:	6003      	str	r3, [r0, #0]
 800a272:	e7d6      	b.n	800a222 <_free_r+0x26>
 800a274:	6825      	ldr	r5, [r4, #0]
 800a276:	1961      	adds	r1, r4, r5
 800a278:	428b      	cmp	r3, r1
 800a27a:	bf04      	itt	eq
 800a27c:	6819      	ldreq	r1, [r3, #0]
 800a27e:	685b      	ldreq	r3, [r3, #4]
 800a280:	6063      	str	r3, [r4, #4]
 800a282:	bf04      	itt	eq
 800a284:	1949      	addeq	r1, r1, r5
 800a286:	6021      	streq	r1, [r4, #0]
 800a288:	6054      	str	r4, [r2, #4]
 800a28a:	e7ca      	b.n	800a222 <_free_r+0x26>
 800a28c:	b003      	add	sp, #12
 800a28e:	bd30      	pop	{r4, r5, pc}
 800a290:	20000a84 	.word	0x20000a84

0800a294 <sbrk_aligned>:
 800a294:	b570      	push	{r4, r5, r6, lr}
 800a296:	4e0e      	ldr	r6, [pc, #56]	; (800a2d0 <sbrk_aligned+0x3c>)
 800a298:	460c      	mov	r4, r1
 800a29a:	6831      	ldr	r1, [r6, #0]
 800a29c:	4605      	mov	r5, r0
 800a29e:	b911      	cbnz	r1, 800a2a6 <sbrk_aligned+0x12>
 800a2a0:	f000 f88c 	bl	800a3bc <_sbrk_r>
 800a2a4:	6030      	str	r0, [r6, #0]
 800a2a6:	4621      	mov	r1, r4
 800a2a8:	4628      	mov	r0, r5
 800a2aa:	f000 f887 	bl	800a3bc <_sbrk_r>
 800a2ae:	1c43      	adds	r3, r0, #1
 800a2b0:	d00a      	beq.n	800a2c8 <sbrk_aligned+0x34>
 800a2b2:	1cc4      	adds	r4, r0, #3
 800a2b4:	f024 0403 	bic.w	r4, r4, #3
 800a2b8:	42a0      	cmp	r0, r4
 800a2ba:	d007      	beq.n	800a2cc <sbrk_aligned+0x38>
 800a2bc:	1a21      	subs	r1, r4, r0
 800a2be:	4628      	mov	r0, r5
 800a2c0:	f000 f87c 	bl	800a3bc <_sbrk_r>
 800a2c4:	3001      	adds	r0, #1
 800a2c6:	d101      	bne.n	800a2cc <sbrk_aligned+0x38>
 800a2c8:	f04f 34ff 	mov.w	r4, #4294967295
 800a2cc:	4620      	mov	r0, r4
 800a2ce:	bd70      	pop	{r4, r5, r6, pc}
 800a2d0:	20000a88 	.word	0x20000a88

0800a2d4 <_malloc_r>:
 800a2d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2d8:	1ccd      	adds	r5, r1, #3
 800a2da:	f025 0503 	bic.w	r5, r5, #3
 800a2de:	3508      	adds	r5, #8
 800a2e0:	2d0c      	cmp	r5, #12
 800a2e2:	bf38      	it	cc
 800a2e4:	250c      	movcc	r5, #12
 800a2e6:	2d00      	cmp	r5, #0
 800a2e8:	4607      	mov	r7, r0
 800a2ea:	db01      	blt.n	800a2f0 <_malloc_r+0x1c>
 800a2ec:	42a9      	cmp	r1, r5
 800a2ee:	d905      	bls.n	800a2fc <_malloc_r+0x28>
 800a2f0:	230c      	movs	r3, #12
 800a2f2:	603b      	str	r3, [r7, #0]
 800a2f4:	2600      	movs	r6, #0
 800a2f6:	4630      	mov	r0, r6
 800a2f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2fc:	4e2e      	ldr	r6, [pc, #184]	; (800a3b8 <_malloc_r+0xe4>)
 800a2fe:	f000 f8f9 	bl	800a4f4 <__malloc_lock>
 800a302:	6833      	ldr	r3, [r6, #0]
 800a304:	461c      	mov	r4, r3
 800a306:	bb34      	cbnz	r4, 800a356 <_malloc_r+0x82>
 800a308:	4629      	mov	r1, r5
 800a30a:	4638      	mov	r0, r7
 800a30c:	f7ff ffc2 	bl	800a294 <sbrk_aligned>
 800a310:	1c43      	adds	r3, r0, #1
 800a312:	4604      	mov	r4, r0
 800a314:	d14d      	bne.n	800a3b2 <_malloc_r+0xde>
 800a316:	6834      	ldr	r4, [r6, #0]
 800a318:	4626      	mov	r6, r4
 800a31a:	2e00      	cmp	r6, #0
 800a31c:	d140      	bne.n	800a3a0 <_malloc_r+0xcc>
 800a31e:	6823      	ldr	r3, [r4, #0]
 800a320:	4631      	mov	r1, r6
 800a322:	4638      	mov	r0, r7
 800a324:	eb04 0803 	add.w	r8, r4, r3
 800a328:	f000 f848 	bl	800a3bc <_sbrk_r>
 800a32c:	4580      	cmp	r8, r0
 800a32e:	d13a      	bne.n	800a3a6 <_malloc_r+0xd2>
 800a330:	6821      	ldr	r1, [r4, #0]
 800a332:	3503      	adds	r5, #3
 800a334:	1a6d      	subs	r5, r5, r1
 800a336:	f025 0503 	bic.w	r5, r5, #3
 800a33a:	3508      	adds	r5, #8
 800a33c:	2d0c      	cmp	r5, #12
 800a33e:	bf38      	it	cc
 800a340:	250c      	movcc	r5, #12
 800a342:	4629      	mov	r1, r5
 800a344:	4638      	mov	r0, r7
 800a346:	f7ff ffa5 	bl	800a294 <sbrk_aligned>
 800a34a:	3001      	adds	r0, #1
 800a34c:	d02b      	beq.n	800a3a6 <_malloc_r+0xd2>
 800a34e:	6823      	ldr	r3, [r4, #0]
 800a350:	442b      	add	r3, r5
 800a352:	6023      	str	r3, [r4, #0]
 800a354:	e00e      	b.n	800a374 <_malloc_r+0xa0>
 800a356:	6822      	ldr	r2, [r4, #0]
 800a358:	1b52      	subs	r2, r2, r5
 800a35a:	d41e      	bmi.n	800a39a <_malloc_r+0xc6>
 800a35c:	2a0b      	cmp	r2, #11
 800a35e:	d916      	bls.n	800a38e <_malloc_r+0xba>
 800a360:	1961      	adds	r1, r4, r5
 800a362:	42a3      	cmp	r3, r4
 800a364:	6025      	str	r5, [r4, #0]
 800a366:	bf18      	it	ne
 800a368:	6059      	strne	r1, [r3, #4]
 800a36a:	6863      	ldr	r3, [r4, #4]
 800a36c:	bf08      	it	eq
 800a36e:	6031      	streq	r1, [r6, #0]
 800a370:	5162      	str	r2, [r4, r5]
 800a372:	604b      	str	r3, [r1, #4]
 800a374:	4638      	mov	r0, r7
 800a376:	f104 060b 	add.w	r6, r4, #11
 800a37a:	f000 f8c1 	bl	800a500 <__malloc_unlock>
 800a37e:	f026 0607 	bic.w	r6, r6, #7
 800a382:	1d23      	adds	r3, r4, #4
 800a384:	1af2      	subs	r2, r6, r3
 800a386:	d0b6      	beq.n	800a2f6 <_malloc_r+0x22>
 800a388:	1b9b      	subs	r3, r3, r6
 800a38a:	50a3      	str	r3, [r4, r2]
 800a38c:	e7b3      	b.n	800a2f6 <_malloc_r+0x22>
 800a38e:	6862      	ldr	r2, [r4, #4]
 800a390:	42a3      	cmp	r3, r4
 800a392:	bf0c      	ite	eq
 800a394:	6032      	streq	r2, [r6, #0]
 800a396:	605a      	strne	r2, [r3, #4]
 800a398:	e7ec      	b.n	800a374 <_malloc_r+0xa0>
 800a39a:	4623      	mov	r3, r4
 800a39c:	6864      	ldr	r4, [r4, #4]
 800a39e:	e7b2      	b.n	800a306 <_malloc_r+0x32>
 800a3a0:	4634      	mov	r4, r6
 800a3a2:	6876      	ldr	r6, [r6, #4]
 800a3a4:	e7b9      	b.n	800a31a <_malloc_r+0x46>
 800a3a6:	230c      	movs	r3, #12
 800a3a8:	603b      	str	r3, [r7, #0]
 800a3aa:	4638      	mov	r0, r7
 800a3ac:	f000 f8a8 	bl	800a500 <__malloc_unlock>
 800a3b0:	e7a1      	b.n	800a2f6 <_malloc_r+0x22>
 800a3b2:	6025      	str	r5, [r4, #0]
 800a3b4:	e7de      	b.n	800a374 <_malloc_r+0xa0>
 800a3b6:	bf00      	nop
 800a3b8:	20000a84 	.word	0x20000a84

0800a3bc <_sbrk_r>:
 800a3bc:	b538      	push	{r3, r4, r5, lr}
 800a3be:	4d06      	ldr	r5, [pc, #24]	; (800a3d8 <_sbrk_r+0x1c>)
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	4604      	mov	r4, r0
 800a3c4:	4608      	mov	r0, r1
 800a3c6:	602b      	str	r3, [r5, #0]
 800a3c8:	f7f8 f976 	bl	80026b8 <_sbrk>
 800a3cc:	1c43      	adds	r3, r0, #1
 800a3ce:	d102      	bne.n	800a3d6 <_sbrk_r+0x1a>
 800a3d0:	682b      	ldr	r3, [r5, #0]
 800a3d2:	b103      	cbz	r3, 800a3d6 <_sbrk_r+0x1a>
 800a3d4:	6023      	str	r3, [r4, #0]
 800a3d6:	bd38      	pop	{r3, r4, r5, pc}
 800a3d8:	20000a8c 	.word	0x20000a8c

0800a3dc <_strtol_l.constprop.0>:
 800a3dc:	2b01      	cmp	r3, #1
 800a3de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3e2:	d001      	beq.n	800a3e8 <_strtol_l.constprop.0+0xc>
 800a3e4:	2b24      	cmp	r3, #36	; 0x24
 800a3e6:	d906      	bls.n	800a3f6 <_strtol_l.constprop.0+0x1a>
 800a3e8:	f7ff fec6 	bl	800a178 <__errno>
 800a3ec:	2316      	movs	r3, #22
 800a3ee:	6003      	str	r3, [r0, #0]
 800a3f0:	2000      	movs	r0, #0
 800a3f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3f6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a4dc <_strtol_l.constprop.0+0x100>
 800a3fa:	460d      	mov	r5, r1
 800a3fc:	462e      	mov	r6, r5
 800a3fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a402:	f814 700c 	ldrb.w	r7, [r4, ip]
 800a406:	f017 0708 	ands.w	r7, r7, #8
 800a40a:	d1f7      	bne.n	800a3fc <_strtol_l.constprop.0+0x20>
 800a40c:	2c2d      	cmp	r4, #45	; 0x2d
 800a40e:	d132      	bne.n	800a476 <_strtol_l.constprop.0+0x9a>
 800a410:	782c      	ldrb	r4, [r5, #0]
 800a412:	2701      	movs	r7, #1
 800a414:	1cb5      	adds	r5, r6, #2
 800a416:	2b00      	cmp	r3, #0
 800a418:	d05b      	beq.n	800a4d2 <_strtol_l.constprop.0+0xf6>
 800a41a:	2b10      	cmp	r3, #16
 800a41c:	d109      	bne.n	800a432 <_strtol_l.constprop.0+0x56>
 800a41e:	2c30      	cmp	r4, #48	; 0x30
 800a420:	d107      	bne.n	800a432 <_strtol_l.constprop.0+0x56>
 800a422:	782c      	ldrb	r4, [r5, #0]
 800a424:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a428:	2c58      	cmp	r4, #88	; 0x58
 800a42a:	d14d      	bne.n	800a4c8 <_strtol_l.constprop.0+0xec>
 800a42c:	786c      	ldrb	r4, [r5, #1]
 800a42e:	2310      	movs	r3, #16
 800a430:	3502      	adds	r5, #2
 800a432:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a436:	f108 38ff 	add.w	r8, r8, #4294967295
 800a43a:	f04f 0c00 	mov.w	ip, #0
 800a43e:	fbb8 f9f3 	udiv	r9, r8, r3
 800a442:	4666      	mov	r6, ip
 800a444:	fb03 8a19 	mls	sl, r3, r9, r8
 800a448:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800a44c:	f1be 0f09 	cmp.w	lr, #9
 800a450:	d816      	bhi.n	800a480 <_strtol_l.constprop.0+0xa4>
 800a452:	4674      	mov	r4, lr
 800a454:	42a3      	cmp	r3, r4
 800a456:	dd24      	ble.n	800a4a2 <_strtol_l.constprop.0+0xc6>
 800a458:	f1bc 0f00 	cmp.w	ip, #0
 800a45c:	db1e      	blt.n	800a49c <_strtol_l.constprop.0+0xc0>
 800a45e:	45b1      	cmp	r9, r6
 800a460:	d31c      	bcc.n	800a49c <_strtol_l.constprop.0+0xc0>
 800a462:	d101      	bne.n	800a468 <_strtol_l.constprop.0+0x8c>
 800a464:	45a2      	cmp	sl, r4
 800a466:	db19      	blt.n	800a49c <_strtol_l.constprop.0+0xc0>
 800a468:	fb06 4603 	mla	r6, r6, r3, r4
 800a46c:	f04f 0c01 	mov.w	ip, #1
 800a470:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a474:	e7e8      	b.n	800a448 <_strtol_l.constprop.0+0x6c>
 800a476:	2c2b      	cmp	r4, #43	; 0x2b
 800a478:	bf04      	itt	eq
 800a47a:	782c      	ldrbeq	r4, [r5, #0]
 800a47c:	1cb5      	addeq	r5, r6, #2
 800a47e:	e7ca      	b.n	800a416 <_strtol_l.constprop.0+0x3a>
 800a480:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800a484:	f1be 0f19 	cmp.w	lr, #25
 800a488:	d801      	bhi.n	800a48e <_strtol_l.constprop.0+0xb2>
 800a48a:	3c37      	subs	r4, #55	; 0x37
 800a48c:	e7e2      	b.n	800a454 <_strtol_l.constprop.0+0x78>
 800a48e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800a492:	f1be 0f19 	cmp.w	lr, #25
 800a496:	d804      	bhi.n	800a4a2 <_strtol_l.constprop.0+0xc6>
 800a498:	3c57      	subs	r4, #87	; 0x57
 800a49a:	e7db      	b.n	800a454 <_strtol_l.constprop.0+0x78>
 800a49c:	f04f 3cff 	mov.w	ip, #4294967295
 800a4a0:	e7e6      	b.n	800a470 <_strtol_l.constprop.0+0x94>
 800a4a2:	f1bc 0f00 	cmp.w	ip, #0
 800a4a6:	da05      	bge.n	800a4b4 <_strtol_l.constprop.0+0xd8>
 800a4a8:	2322      	movs	r3, #34	; 0x22
 800a4aa:	6003      	str	r3, [r0, #0]
 800a4ac:	4646      	mov	r6, r8
 800a4ae:	b942      	cbnz	r2, 800a4c2 <_strtol_l.constprop.0+0xe6>
 800a4b0:	4630      	mov	r0, r6
 800a4b2:	e79e      	b.n	800a3f2 <_strtol_l.constprop.0+0x16>
 800a4b4:	b107      	cbz	r7, 800a4b8 <_strtol_l.constprop.0+0xdc>
 800a4b6:	4276      	negs	r6, r6
 800a4b8:	2a00      	cmp	r2, #0
 800a4ba:	d0f9      	beq.n	800a4b0 <_strtol_l.constprop.0+0xd4>
 800a4bc:	f1bc 0f00 	cmp.w	ip, #0
 800a4c0:	d000      	beq.n	800a4c4 <_strtol_l.constprop.0+0xe8>
 800a4c2:	1e69      	subs	r1, r5, #1
 800a4c4:	6011      	str	r1, [r2, #0]
 800a4c6:	e7f3      	b.n	800a4b0 <_strtol_l.constprop.0+0xd4>
 800a4c8:	2430      	movs	r4, #48	; 0x30
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d1b1      	bne.n	800a432 <_strtol_l.constprop.0+0x56>
 800a4ce:	2308      	movs	r3, #8
 800a4d0:	e7af      	b.n	800a432 <_strtol_l.constprop.0+0x56>
 800a4d2:	2c30      	cmp	r4, #48	; 0x30
 800a4d4:	d0a5      	beq.n	800a422 <_strtol_l.constprop.0+0x46>
 800a4d6:	230a      	movs	r3, #10
 800a4d8:	e7ab      	b.n	800a432 <_strtol_l.constprop.0+0x56>
 800a4da:	bf00      	nop
 800a4dc:	0800b389 	.word	0x0800b389

0800a4e0 <strtol>:
 800a4e0:	4613      	mov	r3, r2
 800a4e2:	460a      	mov	r2, r1
 800a4e4:	4601      	mov	r1, r0
 800a4e6:	4802      	ldr	r0, [pc, #8]	; (800a4f0 <strtol+0x10>)
 800a4e8:	6800      	ldr	r0, [r0, #0]
 800a4ea:	f7ff bf77 	b.w	800a3dc <_strtol_l.constprop.0>
 800a4ee:	bf00      	nop
 800a4f0:	20000030 	.word	0x20000030

0800a4f4 <__malloc_lock>:
 800a4f4:	4801      	ldr	r0, [pc, #4]	; (800a4fc <__malloc_lock+0x8>)
 800a4f6:	f000 b809 	b.w	800a50c <__retarget_lock_acquire_recursive>
 800a4fa:	bf00      	nop
 800a4fc:	20000a90 	.word	0x20000a90

0800a500 <__malloc_unlock>:
 800a500:	4801      	ldr	r0, [pc, #4]	; (800a508 <__malloc_unlock+0x8>)
 800a502:	f000 b804 	b.w	800a50e <__retarget_lock_release_recursive>
 800a506:	bf00      	nop
 800a508:	20000a90 	.word	0x20000a90

0800a50c <__retarget_lock_acquire_recursive>:
 800a50c:	4770      	bx	lr

0800a50e <__retarget_lock_release_recursive>:
 800a50e:	4770      	bx	lr

0800a510 <pow>:
 800a510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a512:	ed2d 8b02 	vpush	{d8}
 800a516:	eeb0 8a40 	vmov.f32	s16, s0
 800a51a:	eef0 8a60 	vmov.f32	s17, s1
 800a51e:	ec55 4b11 	vmov	r4, r5, d1
 800a522:	f000 f865 	bl	800a5f0 <__ieee754_pow>
 800a526:	4622      	mov	r2, r4
 800a528:	462b      	mov	r3, r5
 800a52a:	4620      	mov	r0, r4
 800a52c:	4629      	mov	r1, r5
 800a52e:	ec57 6b10 	vmov	r6, r7, d0
 800a532:	f7f6 faa7 	bl	8000a84 <__aeabi_dcmpun>
 800a536:	2800      	cmp	r0, #0
 800a538:	d13b      	bne.n	800a5b2 <pow+0xa2>
 800a53a:	ec51 0b18 	vmov	r0, r1, d8
 800a53e:	2200      	movs	r2, #0
 800a540:	2300      	movs	r3, #0
 800a542:	f7f6 fa6d 	bl	8000a20 <__aeabi_dcmpeq>
 800a546:	b1b8      	cbz	r0, 800a578 <pow+0x68>
 800a548:	2200      	movs	r2, #0
 800a54a:	2300      	movs	r3, #0
 800a54c:	4620      	mov	r0, r4
 800a54e:	4629      	mov	r1, r5
 800a550:	f7f6 fa66 	bl	8000a20 <__aeabi_dcmpeq>
 800a554:	2800      	cmp	r0, #0
 800a556:	d146      	bne.n	800a5e6 <pow+0xd6>
 800a558:	ec45 4b10 	vmov	d0, r4, r5
 800a55c:	f000 fe61 	bl	800b222 <finite>
 800a560:	b338      	cbz	r0, 800a5b2 <pow+0xa2>
 800a562:	2200      	movs	r2, #0
 800a564:	2300      	movs	r3, #0
 800a566:	4620      	mov	r0, r4
 800a568:	4629      	mov	r1, r5
 800a56a:	f7f6 fa63 	bl	8000a34 <__aeabi_dcmplt>
 800a56e:	b300      	cbz	r0, 800a5b2 <pow+0xa2>
 800a570:	f7ff fe02 	bl	800a178 <__errno>
 800a574:	2322      	movs	r3, #34	; 0x22
 800a576:	e01b      	b.n	800a5b0 <pow+0xa0>
 800a578:	ec47 6b10 	vmov	d0, r6, r7
 800a57c:	f000 fe51 	bl	800b222 <finite>
 800a580:	b9e0      	cbnz	r0, 800a5bc <pow+0xac>
 800a582:	eeb0 0a48 	vmov.f32	s0, s16
 800a586:	eef0 0a68 	vmov.f32	s1, s17
 800a58a:	f000 fe4a 	bl	800b222 <finite>
 800a58e:	b1a8      	cbz	r0, 800a5bc <pow+0xac>
 800a590:	ec45 4b10 	vmov	d0, r4, r5
 800a594:	f000 fe45 	bl	800b222 <finite>
 800a598:	b180      	cbz	r0, 800a5bc <pow+0xac>
 800a59a:	4632      	mov	r2, r6
 800a59c:	463b      	mov	r3, r7
 800a59e:	4630      	mov	r0, r6
 800a5a0:	4639      	mov	r1, r7
 800a5a2:	f7f6 fa6f 	bl	8000a84 <__aeabi_dcmpun>
 800a5a6:	2800      	cmp	r0, #0
 800a5a8:	d0e2      	beq.n	800a570 <pow+0x60>
 800a5aa:	f7ff fde5 	bl	800a178 <__errno>
 800a5ae:	2321      	movs	r3, #33	; 0x21
 800a5b0:	6003      	str	r3, [r0, #0]
 800a5b2:	ecbd 8b02 	vpop	{d8}
 800a5b6:	ec47 6b10 	vmov	d0, r6, r7
 800a5ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5bc:	2200      	movs	r2, #0
 800a5be:	2300      	movs	r3, #0
 800a5c0:	4630      	mov	r0, r6
 800a5c2:	4639      	mov	r1, r7
 800a5c4:	f7f6 fa2c 	bl	8000a20 <__aeabi_dcmpeq>
 800a5c8:	2800      	cmp	r0, #0
 800a5ca:	d0f2      	beq.n	800a5b2 <pow+0xa2>
 800a5cc:	eeb0 0a48 	vmov.f32	s0, s16
 800a5d0:	eef0 0a68 	vmov.f32	s1, s17
 800a5d4:	f000 fe25 	bl	800b222 <finite>
 800a5d8:	2800      	cmp	r0, #0
 800a5da:	d0ea      	beq.n	800a5b2 <pow+0xa2>
 800a5dc:	ec45 4b10 	vmov	d0, r4, r5
 800a5e0:	f000 fe1f 	bl	800b222 <finite>
 800a5e4:	e7c3      	b.n	800a56e <pow+0x5e>
 800a5e6:	4f01      	ldr	r7, [pc, #4]	; (800a5ec <pow+0xdc>)
 800a5e8:	2600      	movs	r6, #0
 800a5ea:	e7e2      	b.n	800a5b2 <pow+0xa2>
 800a5ec:	3ff00000 	.word	0x3ff00000

0800a5f0 <__ieee754_pow>:
 800a5f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5f4:	ed2d 8b06 	vpush	{d8-d10}
 800a5f8:	b089      	sub	sp, #36	; 0x24
 800a5fa:	ed8d 1b00 	vstr	d1, [sp]
 800a5fe:	e9dd 2900 	ldrd	r2, r9, [sp]
 800a602:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800a606:	ea58 0102 	orrs.w	r1, r8, r2
 800a60a:	ec57 6b10 	vmov	r6, r7, d0
 800a60e:	d115      	bne.n	800a63c <__ieee754_pow+0x4c>
 800a610:	19b3      	adds	r3, r6, r6
 800a612:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800a616:	4152      	adcs	r2, r2
 800a618:	4299      	cmp	r1, r3
 800a61a:	4b89      	ldr	r3, [pc, #548]	; (800a840 <__ieee754_pow+0x250>)
 800a61c:	4193      	sbcs	r3, r2
 800a61e:	f080 84d2 	bcs.w	800afc6 <__ieee754_pow+0x9d6>
 800a622:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a626:	4630      	mov	r0, r6
 800a628:	4639      	mov	r1, r7
 800a62a:	f7f5 fddb 	bl	80001e4 <__adddf3>
 800a62e:	ec41 0b10 	vmov	d0, r0, r1
 800a632:	b009      	add	sp, #36	; 0x24
 800a634:	ecbd 8b06 	vpop	{d8-d10}
 800a638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a63c:	4b81      	ldr	r3, [pc, #516]	; (800a844 <__ieee754_pow+0x254>)
 800a63e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800a642:	429c      	cmp	r4, r3
 800a644:	ee10 aa10 	vmov	sl, s0
 800a648:	463d      	mov	r5, r7
 800a64a:	dc06      	bgt.n	800a65a <__ieee754_pow+0x6a>
 800a64c:	d101      	bne.n	800a652 <__ieee754_pow+0x62>
 800a64e:	2e00      	cmp	r6, #0
 800a650:	d1e7      	bne.n	800a622 <__ieee754_pow+0x32>
 800a652:	4598      	cmp	r8, r3
 800a654:	dc01      	bgt.n	800a65a <__ieee754_pow+0x6a>
 800a656:	d10f      	bne.n	800a678 <__ieee754_pow+0x88>
 800a658:	b172      	cbz	r2, 800a678 <__ieee754_pow+0x88>
 800a65a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800a65e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800a662:	ea55 050a 	orrs.w	r5, r5, sl
 800a666:	d1dc      	bne.n	800a622 <__ieee754_pow+0x32>
 800a668:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a66c:	18db      	adds	r3, r3, r3
 800a66e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800a672:	4152      	adcs	r2, r2
 800a674:	429d      	cmp	r5, r3
 800a676:	e7d0      	b.n	800a61a <__ieee754_pow+0x2a>
 800a678:	2d00      	cmp	r5, #0
 800a67a:	da3b      	bge.n	800a6f4 <__ieee754_pow+0x104>
 800a67c:	4b72      	ldr	r3, [pc, #456]	; (800a848 <__ieee754_pow+0x258>)
 800a67e:	4598      	cmp	r8, r3
 800a680:	dc51      	bgt.n	800a726 <__ieee754_pow+0x136>
 800a682:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800a686:	4598      	cmp	r8, r3
 800a688:	f340 84ac 	ble.w	800afe4 <__ieee754_pow+0x9f4>
 800a68c:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a690:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a694:	2b14      	cmp	r3, #20
 800a696:	dd0f      	ble.n	800a6b8 <__ieee754_pow+0xc8>
 800a698:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800a69c:	fa22 f103 	lsr.w	r1, r2, r3
 800a6a0:	fa01 f303 	lsl.w	r3, r1, r3
 800a6a4:	4293      	cmp	r3, r2
 800a6a6:	f040 849d 	bne.w	800afe4 <__ieee754_pow+0x9f4>
 800a6aa:	f001 0101 	and.w	r1, r1, #1
 800a6ae:	f1c1 0302 	rsb	r3, r1, #2
 800a6b2:	9304      	str	r3, [sp, #16]
 800a6b4:	b182      	cbz	r2, 800a6d8 <__ieee754_pow+0xe8>
 800a6b6:	e05f      	b.n	800a778 <__ieee754_pow+0x188>
 800a6b8:	2a00      	cmp	r2, #0
 800a6ba:	d15b      	bne.n	800a774 <__ieee754_pow+0x184>
 800a6bc:	f1c3 0314 	rsb	r3, r3, #20
 800a6c0:	fa48 f103 	asr.w	r1, r8, r3
 800a6c4:	fa01 f303 	lsl.w	r3, r1, r3
 800a6c8:	4543      	cmp	r3, r8
 800a6ca:	f040 8488 	bne.w	800afde <__ieee754_pow+0x9ee>
 800a6ce:	f001 0101 	and.w	r1, r1, #1
 800a6d2:	f1c1 0302 	rsb	r3, r1, #2
 800a6d6:	9304      	str	r3, [sp, #16]
 800a6d8:	4b5c      	ldr	r3, [pc, #368]	; (800a84c <__ieee754_pow+0x25c>)
 800a6da:	4598      	cmp	r8, r3
 800a6dc:	d132      	bne.n	800a744 <__ieee754_pow+0x154>
 800a6de:	f1b9 0f00 	cmp.w	r9, #0
 800a6e2:	f280 8478 	bge.w	800afd6 <__ieee754_pow+0x9e6>
 800a6e6:	4959      	ldr	r1, [pc, #356]	; (800a84c <__ieee754_pow+0x25c>)
 800a6e8:	4632      	mov	r2, r6
 800a6ea:	463b      	mov	r3, r7
 800a6ec:	2000      	movs	r0, #0
 800a6ee:	f7f6 f859 	bl	80007a4 <__aeabi_ddiv>
 800a6f2:	e79c      	b.n	800a62e <__ieee754_pow+0x3e>
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	9304      	str	r3, [sp, #16]
 800a6f8:	2a00      	cmp	r2, #0
 800a6fa:	d13d      	bne.n	800a778 <__ieee754_pow+0x188>
 800a6fc:	4b51      	ldr	r3, [pc, #324]	; (800a844 <__ieee754_pow+0x254>)
 800a6fe:	4598      	cmp	r8, r3
 800a700:	d1ea      	bne.n	800a6d8 <__ieee754_pow+0xe8>
 800a702:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800a706:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800a70a:	ea53 030a 	orrs.w	r3, r3, sl
 800a70e:	f000 845a 	beq.w	800afc6 <__ieee754_pow+0x9d6>
 800a712:	4b4f      	ldr	r3, [pc, #316]	; (800a850 <__ieee754_pow+0x260>)
 800a714:	429c      	cmp	r4, r3
 800a716:	dd08      	ble.n	800a72a <__ieee754_pow+0x13a>
 800a718:	f1b9 0f00 	cmp.w	r9, #0
 800a71c:	f2c0 8457 	blt.w	800afce <__ieee754_pow+0x9de>
 800a720:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a724:	e783      	b.n	800a62e <__ieee754_pow+0x3e>
 800a726:	2302      	movs	r3, #2
 800a728:	e7e5      	b.n	800a6f6 <__ieee754_pow+0x106>
 800a72a:	f1b9 0f00 	cmp.w	r9, #0
 800a72e:	f04f 0000 	mov.w	r0, #0
 800a732:	f04f 0100 	mov.w	r1, #0
 800a736:	f6bf af7a 	bge.w	800a62e <__ieee754_pow+0x3e>
 800a73a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800a73e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a742:	e774      	b.n	800a62e <__ieee754_pow+0x3e>
 800a744:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800a748:	d106      	bne.n	800a758 <__ieee754_pow+0x168>
 800a74a:	4632      	mov	r2, r6
 800a74c:	463b      	mov	r3, r7
 800a74e:	4630      	mov	r0, r6
 800a750:	4639      	mov	r1, r7
 800a752:	f7f5 fefd 	bl	8000550 <__aeabi_dmul>
 800a756:	e76a      	b.n	800a62e <__ieee754_pow+0x3e>
 800a758:	4b3e      	ldr	r3, [pc, #248]	; (800a854 <__ieee754_pow+0x264>)
 800a75a:	4599      	cmp	r9, r3
 800a75c:	d10c      	bne.n	800a778 <__ieee754_pow+0x188>
 800a75e:	2d00      	cmp	r5, #0
 800a760:	db0a      	blt.n	800a778 <__ieee754_pow+0x188>
 800a762:	ec47 6b10 	vmov	d0, r6, r7
 800a766:	b009      	add	sp, #36	; 0x24
 800a768:	ecbd 8b06 	vpop	{d8-d10}
 800a76c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a770:	f000 bc6c 	b.w	800b04c <__ieee754_sqrt>
 800a774:	2300      	movs	r3, #0
 800a776:	9304      	str	r3, [sp, #16]
 800a778:	ec47 6b10 	vmov	d0, r6, r7
 800a77c:	f000 fd48 	bl	800b210 <fabs>
 800a780:	ec51 0b10 	vmov	r0, r1, d0
 800a784:	f1ba 0f00 	cmp.w	sl, #0
 800a788:	d129      	bne.n	800a7de <__ieee754_pow+0x1ee>
 800a78a:	b124      	cbz	r4, 800a796 <__ieee754_pow+0x1a6>
 800a78c:	4b2f      	ldr	r3, [pc, #188]	; (800a84c <__ieee754_pow+0x25c>)
 800a78e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800a792:	429a      	cmp	r2, r3
 800a794:	d123      	bne.n	800a7de <__ieee754_pow+0x1ee>
 800a796:	f1b9 0f00 	cmp.w	r9, #0
 800a79a:	da05      	bge.n	800a7a8 <__ieee754_pow+0x1b8>
 800a79c:	4602      	mov	r2, r0
 800a79e:	460b      	mov	r3, r1
 800a7a0:	2000      	movs	r0, #0
 800a7a2:	492a      	ldr	r1, [pc, #168]	; (800a84c <__ieee754_pow+0x25c>)
 800a7a4:	f7f5 fffe 	bl	80007a4 <__aeabi_ddiv>
 800a7a8:	2d00      	cmp	r5, #0
 800a7aa:	f6bf af40 	bge.w	800a62e <__ieee754_pow+0x3e>
 800a7ae:	9b04      	ldr	r3, [sp, #16]
 800a7b0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800a7b4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a7b8:	4323      	orrs	r3, r4
 800a7ba:	d108      	bne.n	800a7ce <__ieee754_pow+0x1de>
 800a7bc:	4602      	mov	r2, r0
 800a7be:	460b      	mov	r3, r1
 800a7c0:	4610      	mov	r0, r2
 800a7c2:	4619      	mov	r1, r3
 800a7c4:	f7f5 fd0c 	bl	80001e0 <__aeabi_dsub>
 800a7c8:	4602      	mov	r2, r0
 800a7ca:	460b      	mov	r3, r1
 800a7cc:	e78f      	b.n	800a6ee <__ieee754_pow+0xfe>
 800a7ce:	9b04      	ldr	r3, [sp, #16]
 800a7d0:	2b01      	cmp	r3, #1
 800a7d2:	f47f af2c 	bne.w	800a62e <__ieee754_pow+0x3e>
 800a7d6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a7da:	4619      	mov	r1, r3
 800a7dc:	e727      	b.n	800a62e <__ieee754_pow+0x3e>
 800a7de:	0feb      	lsrs	r3, r5, #31
 800a7e0:	3b01      	subs	r3, #1
 800a7e2:	9306      	str	r3, [sp, #24]
 800a7e4:	9a06      	ldr	r2, [sp, #24]
 800a7e6:	9b04      	ldr	r3, [sp, #16]
 800a7e8:	4313      	orrs	r3, r2
 800a7ea:	d102      	bne.n	800a7f2 <__ieee754_pow+0x202>
 800a7ec:	4632      	mov	r2, r6
 800a7ee:	463b      	mov	r3, r7
 800a7f0:	e7e6      	b.n	800a7c0 <__ieee754_pow+0x1d0>
 800a7f2:	4b19      	ldr	r3, [pc, #100]	; (800a858 <__ieee754_pow+0x268>)
 800a7f4:	4598      	cmp	r8, r3
 800a7f6:	f340 80fb 	ble.w	800a9f0 <__ieee754_pow+0x400>
 800a7fa:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800a7fe:	4598      	cmp	r8, r3
 800a800:	4b13      	ldr	r3, [pc, #76]	; (800a850 <__ieee754_pow+0x260>)
 800a802:	dd0c      	ble.n	800a81e <__ieee754_pow+0x22e>
 800a804:	429c      	cmp	r4, r3
 800a806:	dc0f      	bgt.n	800a828 <__ieee754_pow+0x238>
 800a808:	f1b9 0f00 	cmp.w	r9, #0
 800a80c:	da0f      	bge.n	800a82e <__ieee754_pow+0x23e>
 800a80e:	2000      	movs	r0, #0
 800a810:	b009      	add	sp, #36	; 0x24
 800a812:	ecbd 8b06 	vpop	{d8-d10}
 800a816:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a81a:	f000 bcf0 	b.w	800b1fe <__math_oflow>
 800a81e:	429c      	cmp	r4, r3
 800a820:	dbf2      	blt.n	800a808 <__ieee754_pow+0x218>
 800a822:	4b0a      	ldr	r3, [pc, #40]	; (800a84c <__ieee754_pow+0x25c>)
 800a824:	429c      	cmp	r4, r3
 800a826:	dd19      	ble.n	800a85c <__ieee754_pow+0x26c>
 800a828:	f1b9 0f00 	cmp.w	r9, #0
 800a82c:	dcef      	bgt.n	800a80e <__ieee754_pow+0x21e>
 800a82e:	2000      	movs	r0, #0
 800a830:	b009      	add	sp, #36	; 0x24
 800a832:	ecbd 8b06 	vpop	{d8-d10}
 800a836:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a83a:	f000 bcd7 	b.w	800b1ec <__math_uflow>
 800a83e:	bf00      	nop
 800a840:	fff00000 	.word	0xfff00000
 800a844:	7ff00000 	.word	0x7ff00000
 800a848:	433fffff 	.word	0x433fffff
 800a84c:	3ff00000 	.word	0x3ff00000
 800a850:	3fefffff 	.word	0x3fefffff
 800a854:	3fe00000 	.word	0x3fe00000
 800a858:	41e00000 	.word	0x41e00000
 800a85c:	4b60      	ldr	r3, [pc, #384]	; (800a9e0 <__ieee754_pow+0x3f0>)
 800a85e:	2200      	movs	r2, #0
 800a860:	f7f5 fcbe 	bl	80001e0 <__aeabi_dsub>
 800a864:	a354      	add	r3, pc, #336	; (adr r3, 800a9b8 <__ieee754_pow+0x3c8>)
 800a866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a86a:	4604      	mov	r4, r0
 800a86c:	460d      	mov	r5, r1
 800a86e:	f7f5 fe6f 	bl	8000550 <__aeabi_dmul>
 800a872:	a353      	add	r3, pc, #332	; (adr r3, 800a9c0 <__ieee754_pow+0x3d0>)
 800a874:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a878:	4606      	mov	r6, r0
 800a87a:	460f      	mov	r7, r1
 800a87c:	4620      	mov	r0, r4
 800a87e:	4629      	mov	r1, r5
 800a880:	f7f5 fe66 	bl	8000550 <__aeabi_dmul>
 800a884:	4b57      	ldr	r3, [pc, #348]	; (800a9e4 <__ieee754_pow+0x3f4>)
 800a886:	4682      	mov	sl, r0
 800a888:	468b      	mov	fp, r1
 800a88a:	2200      	movs	r2, #0
 800a88c:	4620      	mov	r0, r4
 800a88e:	4629      	mov	r1, r5
 800a890:	f7f5 fe5e 	bl	8000550 <__aeabi_dmul>
 800a894:	4602      	mov	r2, r0
 800a896:	460b      	mov	r3, r1
 800a898:	a14b      	add	r1, pc, #300	; (adr r1, 800a9c8 <__ieee754_pow+0x3d8>)
 800a89a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a89e:	f7f5 fc9f 	bl	80001e0 <__aeabi_dsub>
 800a8a2:	4622      	mov	r2, r4
 800a8a4:	462b      	mov	r3, r5
 800a8a6:	f7f5 fe53 	bl	8000550 <__aeabi_dmul>
 800a8aa:	4602      	mov	r2, r0
 800a8ac:	460b      	mov	r3, r1
 800a8ae:	2000      	movs	r0, #0
 800a8b0:	494d      	ldr	r1, [pc, #308]	; (800a9e8 <__ieee754_pow+0x3f8>)
 800a8b2:	f7f5 fc95 	bl	80001e0 <__aeabi_dsub>
 800a8b6:	4622      	mov	r2, r4
 800a8b8:	4680      	mov	r8, r0
 800a8ba:	4689      	mov	r9, r1
 800a8bc:	462b      	mov	r3, r5
 800a8be:	4620      	mov	r0, r4
 800a8c0:	4629      	mov	r1, r5
 800a8c2:	f7f5 fe45 	bl	8000550 <__aeabi_dmul>
 800a8c6:	4602      	mov	r2, r0
 800a8c8:	460b      	mov	r3, r1
 800a8ca:	4640      	mov	r0, r8
 800a8cc:	4649      	mov	r1, r9
 800a8ce:	f7f5 fe3f 	bl	8000550 <__aeabi_dmul>
 800a8d2:	a33f      	add	r3, pc, #252	; (adr r3, 800a9d0 <__ieee754_pow+0x3e0>)
 800a8d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8d8:	f7f5 fe3a 	bl	8000550 <__aeabi_dmul>
 800a8dc:	4602      	mov	r2, r0
 800a8de:	460b      	mov	r3, r1
 800a8e0:	4650      	mov	r0, sl
 800a8e2:	4659      	mov	r1, fp
 800a8e4:	f7f5 fc7c 	bl	80001e0 <__aeabi_dsub>
 800a8e8:	4602      	mov	r2, r0
 800a8ea:	460b      	mov	r3, r1
 800a8ec:	4680      	mov	r8, r0
 800a8ee:	4689      	mov	r9, r1
 800a8f0:	4630      	mov	r0, r6
 800a8f2:	4639      	mov	r1, r7
 800a8f4:	f7f5 fc76 	bl	80001e4 <__adddf3>
 800a8f8:	2000      	movs	r0, #0
 800a8fa:	4632      	mov	r2, r6
 800a8fc:	463b      	mov	r3, r7
 800a8fe:	4604      	mov	r4, r0
 800a900:	460d      	mov	r5, r1
 800a902:	f7f5 fc6d 	bl	80001e0 <__aeabi_dsub>
 800a906:	4602      	mov	r2, r0
 800a908:	460b      	mov	r3, r1
 800a90a:	4640      	mov	r0, r8
 800a90c:	4649      	mov	r1, r9
 800a90e:	f7f5 fc67 	bl	80001e0 <__aeabi_dsub>
 800a912:	9b04      	ldr	r3, [sp, #16]
 800a914:	9a06      	ldr	r2, [sp, #24]
 800a916:	3b01      	subs	r3, #1
 800a918:	4313      	orrs	r3, r2
 800a91a:	4682      	mov	sl, r0
 800a91c:	468b      	mov	fp, r1
 800a91e:	f040 81e7 	bne.w	800acf0 <__ieee754_pow+0x700>
 800a922:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800a9d8 <__ieee754_pow+0x3e8>
 800a926:	eeb0 8a47 	vmov.f32	s16, s14
 800a92a:	eef0 8a67 	vmov.f32	s17, s15
 800a92e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a932:	2600      	movs	r6, #0
 800a934:	4632      	mov	r2, r6
 800a936:	463b      	mov	r3, r7
 800a938:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a93c:	f7f5 fc50 	bl	80001e0 <__aeabi_dsub>
 800a940:	4622      	mov	r2, r4
 800a942:	462b      	mov	r3, r5
 800a944:	f7f5 fe04 	bl	8000550 <__aeabi_dmul>
 800a948:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a94c:	4680      	mov	r8, r0
 800a94e:	4689      	mov	r9, r1
 800a950:	4650      	mov	r0, sl
 800a952:	4659      	mov	r1, fp
 800a954:	f7f5 fdfc 	bl	8000550 <__aeabi_dmul>
 800a958:	4602      	mov	r2, r0
 800a95a:	460b      	mov	r3, r1
 800a95c:	4640      	mov	r0, r8
 800a95e:	4649      	mov	r1, r9
 800a960:	f7f5 fc40 	bl	80001e4 <__adddf3>
 800a964:	4632      	mov	r2, r6
 800a966:	463b      	mov	r3, r7
 800a968:	4680      	mov	r8, r0
 800a96a:	4689      	mov	r9, r1
 800a96c:	4620      	mov	r0, r4
 800a96e:	4629      	mov	r1, r5
 800a970:	f7f5 fdee 	bl	8000550 <__aeabi_dmul>
 800a974:	460b      	mov	r3, r1
 800a976:	4604      	mov	r4, r0
 800a978:	460d      	mov	r5, r1
 800a97a:	4602      	mov	r2, r0
 800a97c:	4649      	mov	r1, r9
 800a97e:	4640      	mov	r0, r8
 800a980:	f7f5 fc30 	bl	80001e4 <__adddf3>
 800a984:	4b19      	ldr	r3, [pc, #100]	; (800a9ec <__ieee754_pow+0x3fc>)
 800a986:	4299      	cmp	r1, r3
 800a988:	ec45 4b19 	vmov	d9, r4, r5
 800a98c:	4606      	mov	r6, r0
 800a98e:	460f      	mov	r7, r1
 800a990:	468b      	mov	fp, r1
 800a992:	f340 82f1 	ble.w	800af78 <__ieee754_pow+0x988>
 800a996:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800a99a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800a99e:	4303      	orrs	r3, r0
 800a9a0:	f000 81e4 	beq.w	800ad6c <__ieee754_pow+0x77c>
 800a9a4:	ec51 0b18 	vmov	r0, r1, d8
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	f7f6 f842 	bl	8000a34 <__aeabi_dcmplt>
 800a9b0:	3800      	subs	r0, #0
 800a9b2:	bf18      	it	ne
 800a9b4:	2001      	movne	r0, #1
 800a9b6:	e72b      	b.n	800a810 <__ieee754_pow+0x220>
 800a9b8:	60000000 	.word	0x60000000
 800a9bc:	3ff71547 	.word	0x3ff71547
 800a9c0:	f85ddf44 	.word	0xf85ddf44
 800a9c4:	3e54ae0b 	.word	0x3e54ae0b
 800a9c8:	55555555 	.word	0x55555555
 800a9cc:	3fd55555 	.word	0x3fd55555
 800a9d0:	652b82fe 	.word	0x652b82fe
 800a9d4:	3ff71547 	.word	0x3ff71547
 800a9d8:	00000000 	.word	0x00000000
 800a9dc:	bff00000 	.word	0xbff00000
 800a9e0:	3ff00000 	.word	0x3ff00000
 800a9e4:	3fd00000 	.word	0x3fd00000
 800a9e8:	3fe00000 	.word	0x3fe00000
 800a9ec:	408fffff 	.word	0x408fffff
 800a9f0:	4bd5      	ldr	r3, [pc, #852]	; (800ad48 <__ieee754_pow+0x758>)
 800a9f2:	402b      	ands	r3, r5
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	b92b      	cbnz	r3, 800aa04 <__ieee754_pow+0x414>
 800a9f8:	4bd4      	ldr	r3, [pc, #848]	; (800ad4c <__ieee754_pow+0x75c>)
 800a9fa:	f7f5 fda9 	bl	8000550 <__aeabi_dmul>
 800a9fe:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800aa02:	460c      	mov	r4, r1
 800aa04:	1523      	asrs	r3, r4, #20
 800aa06:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800aa0a:	4413      	add	r3, r2
 800aa0c:	9305      	str	r3, [sp, #20]
 800aa0e:	4bd0      	ldr	r3, [pc, #832]	; (800ad50 <__ieee754_pow+0x760>)
 800aa10:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800aa14:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800aa18:	429c      	cmp	r4, r3
 800aa1a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800aa1e:	dd08      	ble.n	800aa32 <__ieee754_pow+0x442>
 800aa20:	4bcc      	ldr	r3, [pc, #816]	; (800ad54 <__ieee754_pow+0x764>)
 800aa22:	429c      	cmp	r4, r3
 800aa24:	f340 8162 	ble.w	800acec <__ieee754_pow+0x6fc>
 800aa28:	9b05      	ldr	r3, [sp, #20]
 800aa2a:	3301      	adds	r3, #1
 800aa2c:	9305      	str	r3, [sp, #20]
 800aa2e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800aa32:	2400      	movs	r4, #0
 800aa34:	00e3      	lsls	r3, r4, #3
 800aa36:	9307      	str	r3, [sp, #28]
 800aa38:	4bc7      	ldr	r3, [pc, #796]	; (800ad58 <__ieee754_pow+0x768>)
 800aa3a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800aa3e:	ed93 7b00 	vldr	d7, [r3]
 800aa42:	4629      	mov	r1, r5
 800aa44:	ec53 2b17 	vmov	r2, r3, d7
 800aa48:	eeb0 9a47 	vmov.f32	s18, s14
 800aa4c:	eef0 9a67 	vmov.f32	s19, s15
 800aa50:	4682      	mov	sl, r0
 800aa52:	f7f5 fbc5 	bl	80001e0 <__aeabi_dsub>
 800aa56:	4652      	mov	r2, sl
 800aa58:	4606      	mov	r6, r0
 800aa5a:	460f      	mov	r7, r1
 800aa5c:	462b      	mov	r3, r5
 800aa5e:	ec51 0b19 	vmov	r0, r1, d9
 800aa62:	f7f5 fbbf 	bl	80001e4 <__adddf3>
 800aa66:	4602      	mov	r2, r0
 800aa68:	460b      	mov	r3, r1
 800aa6a:	2000      	movs	r0, #0
 800aa6c:	49bb      	ldr	r1, [pc, #748]	; (800ad5c <__ieee754_pow+0x76c>)
 800aa6e:	f7f5 fe99 	bl	80007a4 <__aeabi_ddiv>
 800aa72:	ec41 0b1a 	vmov	d10, r0, r1
 800aa76:	4602      	mov	r2, r0
 800aa78:	460b      	mov	r3, r1
 800aa7a:	4630      	mov	r0, r6
 800aa7c:	4639      	mov	r1, r7
 800aa7e:	f7f5 fd67 	bl	8000550 <__aeabi_dmul>
 800aa82:	2300      	movs	r3, #0
 800aa84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aa88:	9302      	str	r3, [sp, #8]
 800aa8a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800aa8e:	46ab      	mov	fp, r5
 800aa90:	106d      	asrs	r5, r5, #1
 800aa92:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800aa96:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800aa9a:	ec41 0b18 	vmov	d8, r0, r1
 800aa9e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	4640      	mov	r0, r8
 800aaa6:	4649      	mov	r1, r9
 800aaa8:	4614      	mov	r4, r2
 800aaaa:	461d      	mov	r5, r3
 800aaac:	f7f5 fd50 	bl	8000550 <__aeabi_dmul>
 800aab0:	4602      	mov	r2, r0
 800aab2:	460b      	mov	r3, r1
 800aab4:	4630      	mov	r0, r6
 800aab6:	4639      	mov	r1, r7
 800aab8:	f7f5 fb92 	bl	80001e0 <__aeabi_dsub>
 800aabc:	ec53 2b19 	vmov	r2, r3, d9
 800aac0:	4606      	mov	r6, r0
 800aac2:	460f      	mov	r7, r1
 800aac4:	4620      	mov	r0, r4
 800aac6:	4629      	mov	r1, r5
 800aac8:	f7f5 fb8a 	bl	80001e0 <__aeabi_dsub>
 800aacc:	4602      	mov	r2, r0
 800aace:	460b      	mov	r3, r1
 800aad0:	4650      	mov	r0, sl
 800aad2:	4659      	mov	r1, fp
 800aad4:	f7f5 fb84 	bl	80001e0 <__aeabi_dsub>
 800aad8:	4642      	mov	r2, r8
 800aada:	464b      	mov	r3, r9
 800aadc:	f7f5 fd38 	bl	8000550 <__aeabi_dmul>
 800aae0:	4602      	mov	r2, r0
 800aae2:	460b      	mov	r3, r1
 800aae4:	4630      	mov	r0, r6
 800aae6:	4639      	mov	r1, r7
 800aae8:	f7f5 fb7a 	bl	80001e0 <__aeabi_dsub>
 800aaec:	ec53 2b1a 	vmov	r2, r3, d10
 800aaf0:	f7f5 fd2e 	bl	8000550 <__aeabi_dmul>
 800aaf4:	ec53 2b18 	vmov	r2, r3, d8
 800aaf8:	ec41 0b19 	vmov	d9, r0, r1
 800aafc:	ec51 0b18 	vmov	r0, r1, d8
 800ab00:	f7f5 fd26 	bl	8000550 <__aeabi_dmul>
 800ab04:	a37c      	add	r3, pc, #496	; (adr r3, 800acf8 <__ieee754_pow+0x708>)
 800ab06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab0a:	4604      	mov	r4, r0
 800ab0c:	460d      	mov	r5, r1
 800ab0e:	f7f5 fd1f 	bl	8000550 <__aeabi_dmul>
 800ab12:	a37b      	add	r3, pc, #492	; (adr r3, 800ad00 <__ieee754_pow+0x710>)
 800ab14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab18:	f7f5 fb64 	bl	80001e4 <__adddf3>
 800ab1c:	4622      	mov	r2, r4
 800ab1e:	462b      	mov	r3, r5
 800ab20:	f7f5 fd16 	bl	8000550 <__aeabi_dmul>
 800ab24:	a378      	add	r3, pc, #480	; (adr r3, 800ad08 <__ieee754_pow+0x718>)
 800ab26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab2a:	f7f5 fb5b 	bl	80001e4 <__adddf3>
 800ab2e:	4622      	mov	r2, r4
 800ab30:	462b      	mov	r3, r5
 800ab32:	f7f5 fd0d 	bl	8000550 <__aeabi_dmul>
 800ab36:	a376      	add	r3, pc, #472	; (adr r3, 800ad10 <__ieee754_pow+0x720>)
 800ab38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab3c:	f7f5 fb52 	bl	80001e4 <__adddf3>
 800ab40:	4622      	mov	r2, r4
 800ab42:	462b      	mov	r3, r5
 800ab44:	f7f5 fd04 	bl	8000550 <__aeabi_dmul>
 800ab48:	a373      	add	r3, pc, #460	; (adr r3, 800ad18 <__ieee754_pow+0x728>)
 800ab4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab4e:	f7f5 fb49 	bl	80001e4 <__adddf3>
 800ab52:	4622      	mov	r2, r4
 800ab54:	462b      	mov	r3, r5
 800ab56:	f7f5 fcfb 	bl	8000550 <__aeabi_dmul>
 800ab5a:	a371      	add	r3, pc, #452	; (adr r3, 800ad20 <__ieee754_pow+0x730>)
 800ab5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab60:	f7f5 fb40 	bl	80001e4 <__adddf3>
 800ab64:	4622      	mov	r2, r4
 800ab66:	4606      	mov	r6, r0
 800ab68:	460f      	mov	r7, r1
 800ab6a:	462b      	mov	r3, r5
 800ab6c:	4620      	mov	r0, r4
 800ab6e:	4629      	mov	r1, r5
 800ab70:	f7f5 fcee 	bl	8000550 <__aeabi_dmul>
 800ab74:	4602      	mov	r2, r0
 800ab76:	460b      	mov	r3, r1
 800ab78:	4630      	mov	r0, r6
 800ab7a:	4639      	mov	r1, r7
 800ab7c:	f7f5 fce8 	bl	8000550 <__aeabi_dmul>
 800ab80:	4642      	mov	r2, r8
 800ab82:	4604      	mov	r4, r0
 800ab84:	460d      	mov	r5, r1
 800ab86:	464b      	mov	r3, r9
 800ab88:	ec51 0b18 	vmov	r0, r1, d8
 800ab8c:	f7f5 fb2a 	bl	80001e4 <__adddf3>
 800ab90:	ec53 2b19 	vmov	r2, r3, d9
 800ab94:	f7f5 fcdc 	bl	8000550 <__aeabi_dmul>
 800ab98:	4622      	mov	r2, r4
 800ab9a:	462b      	mov	r3, r5
 800ab9c:	f7f5 fb22 	bl	80001e4 <__adddf3>
 800aba0:	4642      	mov	r2, r8
 800aba2:	4682      	mov	sl, r0
 800aba4:	468b      	mov	fp, r1
 800aba6:	464b      	mov	r3, r9
 800aba8:	4640      	mov	r0, r8
 800abaa:	4649      	mov	r1, r9
 800abac:	f7f5 fcd0 	bl	8000550 <__aeabi_dmul>
 800abb0:	4b6b      	ldr	r3, [pc, #428]	; (800ad60 <__ieee754_pow+0x770>)
 800abb2:	2200      	movs	r2, #0
 800abb4:	4606      	mov	r6, r0
 800abb6:	460f      	mov	r7, r1
 800abb8:	f7f5 fb14 	bl	80001e4 <__adddf3>
 800abbc:	4652      	mov	r2, sl
 800abbe:	465b      	mov	r3, fp
 800abc0:	f7f5 fb10 	bl	80001e4 <__adddf3>
 800abc4:	2000      	movs	r0, #0
 800abc6:	4604      	mov	r4, r0
 800abc8:	460d      	mov	r5, r1
 800abca:	4602      	mov	r2, r0
 800abcc:	460b      	mov	r3, r1
 800abce:	4640      	mov	r0, r8
 800abd0:	4649      	mov	r1, r9
 800abd2:	f7f5 fcbd 	bl	8000550 <__aeabi_dmul>
 800abd6:	4b62      	ldr	r3, [pc, #392]	; (800ad60 <__ieee754_pow+0x770>)
 800abd8:	4680      	mov	r8, r0
 800abda:	4689      	mov	r9, r1
 800abdc:	2200      	movs	r2, #0
 800abde:	4620      	mov	r0, r4
 800abe0:	4629      	mov	r1, r5
 800abe2:	f7f5 fafd 	bl	80001e0 <__aeabi_dsub>
 800abe6:	4632      	mov	r2, r6
 800abe8:	463b      	mov	r3, r7
 800abea:	f7f5 faf9 	bl	80001e0 <__aeabi_dsub>
 800abee:	4602      	mov	r2, r0
 800abf0:	460b      	mov	r3, r1
 800abf2:	4650      	mov	r0, sl
 800abf4:	4659      	mov	r1, fp
 800abf6:	f7f5 faf3 	bl	80001e0 <__aeabi_dsub>
 800abfa:	ec53 2b18 	vmov	r2, r3, d8
 800abfe:	f7f5 fca7 	bl	8000550 <__aeabi_dmul>
 800ac02:	4622      	mov	r2, r4
 800ac04:	4606      	mov	r6, r0
 800ac06:	460f      	mov	r7, r1
 800ac08:	462b      	mov	r3, r5
 800ac0a:	ec51 0b19 	vmov	r0, r1, d9
 800ac0e:	f7f5 fc9f 	bl	8000550 <__aeabi_dmul>
 800ac12:	4602      	mov	r2, r0
 800ac14:	460b      	mov	r3, r1
 800ac16:	4630      	mov	r0, r6
 800ac18:	4639      	mov	r1, r7
 800ac1a:	f7f5 fae3 	bl	80001e4 <__adddf3>
 800ac1e:	4606      	mov	r6, r0
 800ac20:	460f      	mov	r7, r1
 800ac22:	4602      	mov	r2, r0
 800ac24:	460b      	mov	r3, r1
 800ac26:	4640      	mov	r0, r8
 800ac28:	4649      	mov	r1, r9
 800ac2a:	f7f5 fadb 	bl	80001e4 <__adddf3>
 800ac2e:	a33e      	add	r3, pc, #248	; (adr r3, 800ad28 <__ieee754_pow+0x738>)
 800ac30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac34:	2000      	movs	r0, #0
 800ac36:	4604      	mov	r4, r0
 800ac38:	460d      	mov	r5, r1
 800ac3a:	f7f5 fc89 	bl	8000550 <__aeabi_dmul>
 800ac3e:	4642      	mov	r2, r8
 800ac40:	ec41 0b18 	vmov	d8, r0, r1
 800ac44:	464b      	mov	r3, r9
 800ac46:	4620      	mov	r0, r4
 800ac48:	4629      	mov	r1, r5
 800ac4a:	f7f5 fac9 	bl	80001e0 <__aeabi_dsub>
 800ac4e:	4602      	mov	r2, r0
 800ac50:	460b      	mov	r3, r1
 800ac52:	4630      	mov	r0, r6
 800ac54:	4639      	mov	r1, r7
 800ac56:	f7f5 fac3 	bl	80001e0 <__aeabi_dsub>
 800ac5a:	a335      	add	r3, pc, #212	; (adr r3, 800ad30 <__ieee754_pow+0x740>)
 800ac5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac60:	f7f5 fc76 	bl	8000550 <__aeabi_dmul>
 800ac64:	a334      	add	r3, pc, #208	; (adr r3, 800ad38 <__ieee754_pow+0x748>)
 800ac66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac6a:	4606      	mov	r6, r0
 800ac6c:	460f      	mov	r7, r1
 800ac6e:	4620      	mov	r0, r4
 800ac70:	4629      	mov	r1, r5
 800ac72:	f7f5 fc6d 	bl	8000550 <__aeabi_dmul>
 800ac76:	4602      	mov	r2, r0
 800ac78:	460b      	mov	r3, r1
 800ac7a:	4630      	mov	r0, r6
 800ac7c:	4639      	mov	r1, r7
 800ac7e:	f7f5 fab1 	bl	80001e4 <__adddf3>
 800ac82:	9a07      	ldr	r2, [sp, #28]
 800ac84:	4b37      	ldr	r3, [pc, #220]	; (800ad64 <__ieee754_pow+0x774>)
 800ac86:	4413      	add	r3, r2
 800ac88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac8c:	f7f5 faaa 	bl	80001e4 <__adddf3>
 800ac90:	4682      	mov	sl, r0
 800ac92:	9805      	ldr	r0, [sp, #20]
 800ac94:	468b      	mov	fp, r1
 800ac96:	f7f5 fbf1 	bl	800047c <__aeabi_i2d>
 800ac9a:	9a07      	ldr	r2, [sp, #28]
 800ac9c:	4b32      	ldr	r3, [pc, #200]	; (800ad68 <__ieee754_pow+0x778>)
 800ac9e:	4413      	add	r3, r2
 800aca0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800aca4:	4606      	mov	r6, r0
 800aca6:	460f      	mov	r7, r1
 800aca8:	4652      	mov	r2, sl
 800acaa:	465b      	mov	r3, fp
 800acac:	ec51 0b18 	vmov	r0, r1, d8
 800acb0:	f7f5 fa98 	bl	80001e4 <__adddf3>
 800acb4:	4642      	mov	r2, r8
 800acb6:	464b      	mov	r3, r9
 800acb8:	f7f5 fa94 	bl	80001e4 <__adddf3>
 800acbc:	4632      	mov	r2, r6
 800acbe:	463b      	mov	r3, r7
 800acc0:	f7f5 fa90 	bl	80001e4 <__adddf3>
 800acc4:	2000      	movs	r0, #0
 800acc6:	4632      	mov	r2, r6
 800acc8:	463b      	mov	r3, r7
 800acca:	4604      	mov	r4, r0
 800accc:	460d      	mov	r5, r1
 800acce:	f7f5 fa87 	bl	80001e0 <__aeabi_dsub>
 800acd2:	4642      	mov	r2, r8
 800acd4:	464b      	mov	r3, r9
 800acd6:	f7f5 fa83 	bl	80001e0 <__aeabi_dsub>
 800acda:	ec53 2b18 	vmov	r2, r3, d8
 800acde:	f7f5 fa7f 	bl	80001e0 <__aeabi_dsub>
 800ace2:	4602      	mov	r2, r0
 800ace4:	460b      	mov	r3, r1
 800ace6:	4650      	mov	r0, sl
 800ace8:	4659      	mov	r1, fp
 800acea:	e610      	b.n	800a90e <__ieee754_pow+0x31e>
 800acec:	2401      	movs	r4, #1
 800acee:	e6a1      	b.n	800aa34 <__ieee754_pow+0x444>
 800acf0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800ad40 <__ieee754_pow+0x750>
 800acf4:	e617      	b.n	800a926 <__ieee754_pow+0x336>
 800acf6:	bf00      	nop
 800acf8:	4a454eef 	.word	0x4a454eef
 800acfc:	3fca7e28 	.word	0x3fca7e28
 800ad00:	93c9db65 	.word	0x93c9db65
 800ad04:	3fcd864a 	.word	0x3fcd864a
 800ad08:	a91d4101 	.word	0xa91d4101
 800ad0c:	3fd17460 	.word	0x3fd17460
 800ad10:	518f264d 	.word	0x518f264d
 800ad14:	3fd55555 	.word	0x3fd55555
 800ad18:	db6fabff 	.word	0xdb6fabff
 800ad1c:	3fdb6db6 	.word	0x3fdb6db6
 800ad20:	33333303 	.word	0x33333303
 800ad24:	3fe33333 	.word	0x3fe33333
 800ad28:	e0000000 	.word	0xe0000000
 800ad2c:	3feec709 	.word	0x3feec709
 800ad30:	dc3a03fd 	.word	0xdc3a03fd
 800ad34:	3feec709 	.word	0x3feec709
 800ad38:	145b01f5 	.word	0x145b01f5
 800ad3c:	be3e2fe0 	.word	0xbe3e2fe0
 800ad40:	00000000 	.word	0x00000000
 800ad44:	3ff00000 	.word	0x3ff00000
 800ad48:	7ff00000 	.word	0x7ff00000
 800ad4c:	43400000 	.word	0x43400000
 800ad50:	0003988e 	.word	0x0003988e
 800ad54:	000bb679 	.word	0x000bb679
 800ad58:	0800b490 	.word	0x0800b490
 800ad5c:	3ff00000 	.word	0x3ff00000
 800ad60:	40080000 	.word	0x40080000
 800ad64:	0800b4b0 	.word	0x0800b4b0
 800ad68:	0800b4a0 	.word	0x0800b4a0
 800ad6c:	a3b5      	add	r3, pc, #724	; (adr r3, 800b044 <__ieee754_pow+0xa54>)
 800ad6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad72:	4640      	mov	r0, r8
 800ad74:	4649      	mov	r1, r9
 800ad76:	f7f5 fa35 	bl	80001e4 <__adddf3>
 800ad7a:	4622      	mov	r2, r4
 800ad7c:	ec41 0b1a 	vmov	d10, r0, r1
 800ad80:	462b      	mov	r3, r5
 800ad82:	4630      	mov	r0, r6
 800ad84:	4639      	mov	r1, r7
 800ad86:	f7f5 fa2b 	bl	80001e0 <__aeabi_dsub>
 800ad8a:	4602      	mov	r2, r0
 800ad8c:	460b      	mov	r3, r1
 800ad8e:	ec51 0b1a 	vmov	r0, r1, d10
 800ad92:	f7f5 fe6d 	bl	8000a70 <__aeabi_dcmpgt>
 800ad96:	2800      	cmp	r0, #0
 800ad98:	f47f ae04 	bne.w	800a9a4 <__ieee754_pow+0x3b4>
 800ad9c:	4aa4      	ldr	r2, [pc, #656]	; (800b030 <__ieee754_pow+0xa40>)
 800ad9e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ada2:	4293      	cmp	r3, r2
 800ada4:	f340 8108 	ble.w	800afb8 <__ieee754_pow+0x9c8>
 800ada8:	151b      	asrs	r3, r3, #20
 800adaa:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800adae:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800adb2:	fa4a f303 	asr.w	r3, sl, r3
 800adb6:	445b      	add	r3, fp
 800adb8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800adbc:	4e9d      	ldr	r6, [pc, #628]	; (800b034 <__ieee754_pow+0xa44>)
 800adbe:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800adc2:	4116      	asrs	r6, r2
 800adc4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800adc8:	2000      	movs	r0, #0
 800adca:	ea23 0106 	bic.w	r1, r3, r6
 800adce:	f1c2 0214 	rsb	r2, r2, #20
 800add2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800add6:	fa4a fa02 	asr.w	sl, sl, r2
 800adda:	f1bb 0f00 	cmp.w	fp, #0
 800adde:	4602      	mov	r2, r0
 800ade0:	460b      	mov	r3, r1
 800ade2:	4620      	mov	r0, r4
 800ade4:	4629      	mov	r1, r5
 800ade6:	bfb8      	it	lt
 800ade8:	f1ca 0a00 	rsblt	sl, sl, #0
 800adec:	f7f5 f9f8 	bl	80001e0 <__aeabi_dsub>
 800adf0:	ec41 0b19 	vmov	d9, r0, r1
 800adf4:	4642      	mov	r2, r8
 800adf6:	464b      	mov	r3, r9
 800adf8:	ec51 0b19 	vmov	r0, r1, d9
 800adfc:	f7f5 f9f2 	bl	80001e4 <__adddf3>
 800ae00:	a37b      	add	r3, pc, #492	; (adr r3, 800aff0 <__ieee754_pow+0xa00>)
 800ae02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae06:	2000      	movs	r0, #0
 800ae08:	4604      	mov	r4, r0
 800ae0a:	460d      	mov	r5, r1
 800ae0c:	f7f5 fba0 	bl	8000550 <__aeabi_dmul>
 800ae10:	ec53 2b19 	vmov	r2, r3, d9
 800ae14:	4606      	mov	r6, r0
 800ae16:	460f      	mov	r7, r1
 800ae18:	4620      	mov	r0, r4
 800ae1a:	4629      	mov	r1, r5
 800ae1c:	f7f5 f9e0 	bl	80001e0 <__aeabi_dsub>
 800ae20:	4602      	mov	r2, r0
 800ae22:	460b      	mov	r3, r1
 800ae24:	4640      	mov	r0, r8
 800ae26:	4649      	mov	r1, r9
 800ae28:	f7f5 f9da 	bl	80001e0 <__aeabi_dsub>
 800ae2c:	a372      	add	r3, pc, #456	; (adr r3, 800aff8 <__ieee754_pow+0xa08>)
 800ae2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae32:	f7f5 fb8d 	bl	8000550 <__aeabi_dmul>
 800ae36:	a372      	add	r3, pc, #456	; (adr r3, 800b000 <__ieee754_pow+0xa10>)
 800ae38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae3c:	4680      	mov	r8, r0
 800ae3e:	4689      	mov	r9, r1
 800ae40:	4620      	mov	r0, r4
 800ae42:	4629      	mov	r1, r5
 800ae44:	f7f5 fb84 	bl	8000550 <__aeabi_dmul>
 800ae48:	4602      	mov	r2, r0
 800ae4a:	460b      	mov	r3, r1
 800ae4c:	4640      	mov	r0, r8
 800ae4e:	4649      	mov	r1, r9
 800ae50:	f7f5 f9c8 	bl	80001e4 <__adddf3>
 800ae54:	4604      	mov	r4, r0
 800ae56:	460d      	mov	r5, r1
 800ae58:	4602      	mov	r2, r0
 800ae5a:	460b      	mov	r3, r1
 800ae5c:	4630      	mov	r0, r6
 800ae5e:	4639      	mov	r1, r7
 800ae60:	f7f5 f9c0 	bl	80001e4 <__adddf3>
 800ae64:	4632      	mov	r2, r6
 800ae66:	463b      	mov	r3, r7
 800ae68:	4680      	mov	r8, r0
 800ae6a:	4689      	mov	r9, r1
 800ae6c:	f7f5 f9b8 	bl	80001e0 <__aeabi_dsub>
 800ae70:	4602      	mov	r2, r0
 800ae72:	460b      	mov	r3, r1
 800ae74:	4620      	mov	r0, r4
 800ae76:	4629      	mov	r1, r5
 800ae78:	f7f5 f9b2 	bl	80001e0 <__aeabi_dsub>
 800ae7c:	4642      	mov	r2, r8
 800ae7e:	4606      	mov	r6, r0
 800ae80:	460f      	mov	r7, r1
 800ae82:	464b      	mov	r3, r9
 800ae84:	4640      	mov	r0, r8
 800ae86:	4649      	mov	r1, r9
 800ae88:	f7f5 fb62 	bl	8000550 <__aeabi_dmul>
 800ae8c:	a35e      	add	r3, pc, #376	; (adr r3, 800b008 <__ieee754_pow+0xa18>)
 800ae8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae92:	4604      	mov	r4, r0
 800ae94:	460d      	mov	r5, r1
 800ae96:	f7f5 fb5b 	bl	8000550 <__aeabi_dmul>
 800ae9a:	a35d      	add	r3, pc, #372	; (adr r3, 800b010 <__ieee754_pow+0xa20>)
 800ae9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aea0:	f7f5 f99e 	bl	80001e0 <__aeabi_dsub>
 800aea4:	4622      	mov	r2, r4
 800aea6:	462b      	mov	r3, r5
 800aea8:	f7f5 fb52 	bl	8000550 <__aeabi_dmul>
 800aeac:	a35a      	add	r3, pc, #360	; (adr r3, 800b018 <__ieee754_pow+0xa28>)
 800aeae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeb2:	f7f5 f997 	bl	80001e4 <__adddf3>
 800aeb6:	4622      	mov	r2, r4
 800aeb8:	462b      	mov	r3, r5
 800aeba:	f7f5 fb49 	bl	8000550 <__aeabi_dmul>
 800aebe:	a358      	add	r3, pc, #352	; (adr r3, 800b020 <__ieee754_pow+0xa30>)
 800aec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aec4:	f7f5 f98c 	bl	80001e0 <__aeabi_dsub>
 800aec8:	4622      	mov	r2, r4
 800aeca:	462b      	mov	r3, r5
 800aecc:	f7f5 fb40 	bl	8000550 <__aeabi_dmul>
 800aed0:	a355      	add	r3, pc, #340	; (adr r3, 800b028 <__ieee754_pow+0xa38>)
 800aed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aed6:	f7f5 f985 	bl	80001e4 <__adddf3>
 800aeda:	4622      	mov	r2, r4
 800aedc:	462b      	mov	r3, r5
 800aede:	f7f5 fb37 	bl	8000550 <__aeabi_dmul>
 800aee2:	4602      	mov	r2, r0
 800aee4:	460b      	mov	r3, r1
 800aee6:	4640      	mov	r0, r8
 800aee8:	4649      	mov	r1, r9
 800aeea:	f7f5 f979 	bl	80001e0 <__aeabi_dsub>
 800aeee:	4604      	mov	r4, r0
 800aef0:	460d      	mov	r5, r1
 800aef2:	4602      	mov	r2, r0
 800aef4:	460b      	mov	r3, r1
 800aef6:	4640      	mov	r0, r8
 800aef8:	4649      	mov	r1, r9
 800aefa:	f7f5 fb29 	bl	8000550 <__aeabi_dmul>
 800aefe:	2200      	movs	r2, #0
 800af00:	ec41 0b19 	vmov	d9, r0, r1
 800af04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800af08:	4620      	mov	r0, r4
 800af0a:	4629      	mov	r1, r5
 800af0c:	f7f5 f968 	bl	80001e0 <__aeabi_dsub>
 800af10:	4602      	mov	r2, r0
 800af12:	460b      	mov	r3, r1
 800af14:	ec51 0b19 	vmov	r0, r1, d9
 800af18:	f7f5 fc44 	bl	80007a4 <__aeabi_ddiv>
 800af1c:	4632      	mov	r2, r6
 800af1e:	4604      	mov	r4, r0
 800af20:	460d      	mov	r5, r1
 800af22:	463b      	mov	r3, r7
 800af24:	4640      	mov	r0, r8
 800af26:	4649      	mov	r1, r9
 800af28:	f7f5 fb12 	bl	8000550 <__aeabi_dmul>
 800af2c:	4632      	mov	r2, r6
 800af2e:	463b      	mov	r3, r7
 800af30:	f7f5 f958 	bl	80001e4 <__adddf3>
 800af34:	4602      	mov	r2, r0
 800af36:	460b      	mov	r3, r1
 800af38:	4620      	mov	r0, r4
 800af3a:	4629      	mov	r1, r5
 800af3c:	f7f5 f950 	bl	80001e0 <__aeabi_dsub>
 800af40:	4642      	mov	r2, r8
 800af42:	464b      	mov	r3, r9
 800af44:	f7f5 f94c 	bl	80001e0 <__aeabi_dsub>
 800af48:	460b      	mov	r3, r1
 800af4a:	4602      	mov	r2, r0
 800af4c:	493a      	ldr	r1, [pc, #232]	; (800b038 <__ieee754_pow+0xa48>)
 800af4e:	2000      	movs	r0, #0
 800af50:	f7f5 f946 	bl	80001e0 <__aeabi_dsub>
 800af54:	ec41 0b10 	vmov	d0, r0, r1
 800af58:	ee10 3a90 	vmov	r3, s1
 800af5c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800af60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800af64:	da2b      	bge.n	800afbe <__ieee754_pow+0x9ce>
 800af66:	4650      	mov	r0, sl
 800af68:	f000 f966 	bl	800b238 <scalbn>
 800af6c:	ec51 0b10 	vmov	r0, r1, d0
 800af70:	ec53 2b18 	vmov	r2, r3, d8
 800af74:	f7ff bbed 	b.w	800a752 <__ieee754_pow+0x162>
 800af78:	4b30      	ldr	r3, [pc, #192]	; (800b03c <__ieee754_pow+0xa4c>)
 800af7a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800af7e:	429e      	cmp	r6, r3
 800af80:	f77f af0c 	ble.w	800ad9c <__ieee754_pow+0x7ac>
 800af84:	4b2e      	ldr	r3, [pc, #184]	; (800b040 <__ieee754_pow+0xa50>)
 800af86:	440b      	add	r3, r1
 800af88:	4303      	orrs	r3, r0
 800af8a:	d009      	beq.n	800afa0 <__ieee754_pow+0x9b0>
 800af8c:	ec51 0b18 	vmov	r0, r1, d8
 800af90:	2200      	movs	r2, #0
 800af92:	2300      	movs	r3, #0
 800af94:	f7f5 fd4e 	bl	8000a34 <__aeabi_dcmplt>
 800af98:	3800      	subs	r0, #0
 800af9a:	bf18      	it	ne
 800af9c:	2001      	movne	r0, #1
 800af9e:	e447      	b.n	800a830 <__ieee754_pow+0x240>
 800afa0:	4622      	mov	r2, r4
 800afa2:	462b      	mov	r3, r5
 800afa4:	f7f5 f91c 	bl	80001e0 <__aeabi_dsub>
 800afa8:	4642      	mov	r2, r8
 800afaa:	464b      	mov	r3, r9
 800afac:	f7f5 fd56 	bl	8000a5c <__aeabi_dcmpge>
 800afb0:	2800      	cmp	r0, #0
 800afb2:	f43f aef3 	beq.w	800ad9c <__ieee754_pow+0x7ac>
 800afb6:	e7e9      	b.n	800af8c <__ieee754_pow+0x99c>
 800afb8:	f04f 0a00 	mov.w	sl, #0
 800afbc:	e71a      	b.n	800adf4 <__ieee754_pow+0x804>
 800afbe:	ec51 0b10 	vmov	r0, r1, d0
 800afc2:	4619      	mov	r1, r3
 800afc4:	e7d4      	b.n	800af70 <__ieee754_pow+0x980>
 800afc6:	491c      	ldr	r1, [pc, #112]	; (800b038 <__ieee754_pow+0xa48>)
 800afc8:	2000      	movs	r0, #0
 800afca:	f7ff bb30 	b.w	800a62e <__ieee754_pow+0x3e>
 800afce:	2000      	movs	r0, #0
 800afd0:	2100      	movs	r1, #0
 800afd2:	f7ff bb2c 	b.w	800a62e <__ieee754_pow+0x3e>
 800afd6:	4630      	mov	r0, r6
 800afd8:	4639      	mov	r1, r7
 800afda:	f7ff bb28 	b.w	800a62e <__ieee754_pow+0x3e>
 800afde:	9204      	str	r2, [sp, #16]
 800afe0:	f7ff bb7a 	b.w	800a6d8 <__ieee754_pow+0xe8>
 800afe4:	2300      	movs	r3, #0
 800afe6:	f7ff bb64 	b.w	800a6b2 <__ieee754_pow+0xc2>
 800afea:	bf00      	nop
 800afec:	f3af 8000 	nop.w
 800aff0:	00000000 	.word	0x00000000
 800aff4:	3fe62e43 	.word	0x3fe62e43
 800aff8:	fefa39ef 	.word	0xfefa39ef
 800affc:	3fe62e42 	.word	0x3fe62e42
 800b000:	0ca86c39 	.word	0x0ca86c39
 800b004:	be205c61 	.word	0xbe205c61
 800b008:	72bea4d0 	.word	0x72bea4d0
 800b00c:	3e663769 	.word	0x3e663769
 800b010:	c5d26bf1 	.word	0xc5d26bf1
 800b014:	3ebbbd41 	.word	0x3ebbbd41
 800b018:	af25de2c 	.word	0xaf25de2c
 800b01c:	3f11566a 	.word	0x3f11566a
 800b020:	16bebd93 	.word	0x16bebd93
 800b024:	3f66c16c 	.word	0x3f66c16c
 800b028:	5555553e 	.word	0x5555553e
 800b02c:	3fc55555 	.word	0x3fc55555
 800b030:	3fe00000 	.word	0x3fe00000
 800b034:	000fffff 	.word	0x000fffff
 800b038:	3ff00000 	.word	0x3ff00000
 800b03c:	4090cbff 	.word	0x4090cbff
 800b040:	3f6f3400 	.word	0x3f6f3400
 800b044:	652b82fe 	.word	0x652b82fe
 800b048:	3c971547 	.word	0x3c971547

0800b04c <__ieee754_sqrt>:
 800b04c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b050:	ec55 4b10 	vmov	r4, r5, d0
 800b054:	4e55      	ldr	r6, [pc, #340]	; (800b1ac <__ieee754_sqrt+0x160>)
 800b056:	43ae      	bics	r6, r5
 800b058:	ee10 0a10 	vmov	r0, s0
 800b05c:	ee10 3a10 	vmov	r3, s0
 800b060:	462a      	mov	r2, r5
 800b062:	4629      	mov	r1, r5
 800b064:	d110      	bne.n	800b088 <__ieee754_sqrt+0x3c>
 800b066:	ee10 2a10 	vmov	r2, s0
 800b06a:	462b      	mov	r3, r5
 800b06c:	f7f5 fa70 	bl	8000550 <__aeabi_dmul>
 800b070:	4602      	mov	r2, r0
 800b072:	460b      	mov	r3, r1
 800b074:	4620      	mov	r0, r4
 800b076:	4629      	mov	r1, r5
 800b078:	f7f5 f8b4 	bl	80001e4 <__adddf3>
 800b07c:	4604      	mov	r4, r0
 800b07e:	460d      	mov	r5, r1
 800b080:	ec45 4b10 	vmov	d0, r4, r5
 800b084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b088:	2d00      	cmp	r5, #0
 800b08a:	dc10      	bgt.n	800b0ae <__ieee754_sqrt+0x62>
 800b08c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b090:	4330      	orrs	r0, r6
 800b092:	d0f5      	beq.n	800b080 <__ieee754_sqrt+0x34>
 800b094:	b15d      	cbz	r5, 800b0ae <__ieee754_sqrt+0x62>
 800b096:	ee10 2a10 	vmov	r2, s0
 800b09a:	462b      	mov	r3, r5
 800b09c:	ee10 0a10 	vmov	r0, s0
 800b0a0:	f7f5 f89e 	bl	80001e0 <__aeabi_dsub>
 800b0a4:	4602      	mov	r2, r0
 800b0a6:	460b      	mov	r3, r1
 800b0a8:	f7f5 fb7c 	bl	80007a4 <__aeabi_ddiv>
 800b0ac:	e7e6      	b.n	800b07c <__ieee754_sqrt+0x30>
 800b0ae:	1512      	asrs	r2, r2, #20
 800b0b0:	d074      	beq.n	800b19c <__ieee754_sqrt+0x150>
 800b0b2:	07d4      	lsls	r4, r2, #31
 800b0b4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800b0b8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800b0bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800b0c0:	bf5e      	ittt	pl
 800b0c2:	0fda      	lsrpl	r2, r3, #31
 800b0c4:	005b      	lslpl	r3, r3, #1
 800b0c6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800b0ca:	2400      	movs	r4, #0
 800b0cc:	0fda      	lsrs	r2, r3, #31
 800b0ce:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800b0d2:	107f      	asrs	r7, r7, #1
 800b0d4:	005b      	lsls	r3, r3, #1
 800b0d6:	2516      	movs	r5, #22
 800b0d8:	4620      	mov	r0, r4
 800b0da:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800b0de:	1886      	adds	r6, r0, r2
 800b0e0:	428e      	cmp	r6, r1
 800b0e2:	bfde      	ittt	le
 800b0e4:	1b89      	suble	r1, r1, r6
 800b0e6:	18b0      	addle	r0, r6, r2
 800b0e8:	18a4      	addle	r4, r4, r2
 800b0ea:	0049      	lsls	r1, r1, #1
 800b0ec:	3d01      	subs	r5, #1
 800b0ee:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800b0f2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800b0f6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b0fa:	d1f0      	bne.n	800b0de <__ieee754_sqrt+0x92>
 800b0fc:	462a      	mov	r2, r5
 800b0fe:	f04f 0e20 	mov.w	lr, #32
 800b102:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800b106:	4281      	cmp	r1, r0
 800b108:	eb06 0c05 	add.w	ip, r6, r5
 800b10c:	dc02      	bgt.n	800b114 <__ieee754_sqrt+0xc8>
 800b10e:	d113      	bne.n	800b138 <__ieee754_sqrt+0xec>
 800b110:	459c      	cmp	ip, r3
 800b112:	d811      	bhi.n	800b138 <__ieee754_sqrt+0xec>
 800b114:	f1bc 0f00 	cmp.w	ip, #0
 800b118:	eb0c 0506 	add.w	r5, ip, r6
 800b11c:	da43      	bge.n	800b1a6 <__ieee754_sqrt+0x15a>
 800b11e:	2d00      	cmp	r5, #0
 800b120:	db41      	blt.n	800b1a6 <__ieee754_sqrt+0x15a>
 800b122:	f100 0801 	add.w	r8, r0, #1
 800b126:	1a09      	subs	r1, r1, r0
 800b128:	459c      	cmp	ip, r3
 800b12a:	bf88      	it	hi
 800b12c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800b130:	eba3 030c 	sub.w	r3, r3, ip
 800b134:	4432      	add	r2, r6
 800b136:	4640      	mov	r0, r8
 800b138:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800b13c:	f1be 0e01 	subs.w	lr, lr, #1
 800b140:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800b144:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b148:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800b14c:	d1db      	bne.n	800b106 <__ieee754_sqrt+0xba>
 800b14e:	430b      	orrs	r3, r1
 800b150:	d006      	beq.n	800b160 <__ieee754_sqrt+0x114>
 800b152:	1c50      	adds	r0, r2, #1
 800b154:	bf13      	iteet	ne
 800b156:	3201      	addne	r2, #1
 800b158:	3401      	addeq	r4, #1
 800b15a:	4672      	moveq	r2, lr
 800b15c:	f022 0201 	bicne.w	r2, r2, #1
 800b160:	1063      	asrs	r3, r4, #1
 800b162:	0852      	lsrs	r2, r2, #1
 800b164:	07e1      	lsls	r1, r4, #31
 800b166:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800b16a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800b16e:	bf48      	it	mi
 800b170:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800b174:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800b178:	4614      	mov	r4, r2
 800b17a:	e781      	b.n	800b080 <__ieee754_sqrt+0x34>
 800b17c:	0ad9      	lsrs	r1, r3, #11
 800b17e:	3815      	subs	r0, #21
 800b180:	055b      	lsls	r3, r3, #21
 800b182:	2900      	cmp	r1, #0
 800b184:	d0fa      	beq.n	800b17c <__ieee754_sqrt+0x130>
 800b186:	02cd      	lsls	r5, r1, #11
 800b188:	d50a      	bpl.n	800b1a0 <__ieee754_sqrt+0x154>
 800b18a:	f1c2 0420 	rsb	r4, r2, #32
 800b18e:	fa23 f404 	lsr.w	r4, r3, r4
 800b192:	1e55      	subs	r5, r2, #1
 800b194:	4093      	lsls	r3, r2
 800b196:	4321      	orrs	r1, r4
 800b198:	1b42      	subs	r2, r0, r5
 800b19a:	e78a      	b.n	800b0b2 <__ieee754_sqrt+0x66>
 800b19c:	4610      	mov	r0, r2
 800b19e:	e7f0      	b.n	800b182 <__ieee754_sqrt+0x136>
 800b1a0:	0049      	lsls	r1, r1, #1
 800b1a2:	3201      	adds	r2, #1
 800b1a4:	e7ef      	b.n	800b186 <__ieee754_sqrt+0x13a>
 800b1a6:	4680      	mov	r8, r0
 800b1a8:	e7bd      	b.n	800b126 <__ieee754_sqrt+0xda>
 800b1aa:	bf00      	nop
 800b1ac:	7ff00000 	.word	0x7ff00000

0800b1b0 <with_errno>:
 800b1b0:	b570      	push	{r4, r5, r6, lr}
 800b1b2:	4604      	mov	r4, r0
 800b1b4:	460d      	mov	r5, r1
 800b1b6:	4616      	mov	r6, r2
 800b1b8:	f7fe ffde 	bl	800a178 <__errno>
 800b1bc:	4629      	mov	r1, r5
 800b1be:	6006      	str	r6, [r0, #0]
 800b1c0:	4620      	mov	r0, r4
 800b1c2:	bd70      	pop	{r4, r5, r6, pc}

0800b1c4 <xflow>:
 800b1c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b1c6:	4614      	mov	r4, r2
 800b1c8:	461d      	mov	r5, r3
 800b1ca:	b108      	cbz	r0, 800b1d0 <xflow+0xc>
 800b1cc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b1d0:	e9cd 2300 	strd	r2, r3, [sp]
 800b1d4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b1d8:	4620      	mov	r0, r4
 800b1da:	4629      	mov	r1, r5
 800b1dc:	f7f5 f9b8 	bl	8000550 <__aeabi_dmul>
 800b1e0:	2222      	movs	r2, #34	; 0x22
 800b1e2:	b003      	add	sp, #12
 800b1e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b1e8:	f7ff bfe2 	b.w	800b1b0 <with_errno>

0800b1ec <__math_uflow>:
 800b1ec:	b508      	push	{r3, lr}
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b1f4:	f7ff ffe6 	bl	800b1c4 <xflow>
 800b1f8:	ec41 0b10 	vmov	d0, r0, r1
 800b1fc:	bd08      	pop	{r3, pc}

0800b1fe <__math_oflow>:
 800b1fe:	b508      	push	{r3, lr}
 800b200:	2200      	movs	r2, #0
 800b202:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800b206:	f7ff ffdd 	bl	800b1c4 <xflow>
 800b20a:	ec41 0b10 	vmov	d0, r0, r1
 800b20e:	bd08      	pop	{r3, pc}

0800b210 <fabs>:
 800b210:	ec51 0b10 	vmov	r0, r1, d0
 800b214:	ee10 2a10 	vmov	r2, s0
 800b218:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b21c:	ec43 2b10 	vmov	d0, r2, r3
 800b220:	4770      	bx	lr

0800b222 <finite>:
 800b222:	b082      	sub	sp, #8
 800b224:	ed8d 0b00 	vstr	d0, [sp]
 800b228:	9801      	ldr	r0, [sp, #4]
 800b22a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800b22e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800b232:	0fc0      	lsrs	r0, r0, #31
 800b234:	b002      	add	sp, #8
 800b236:	4770      	bx	lr

0800b238 <scalbn>:
 800b238:	b570      	push	{r4, r5, r6, lr}
 800b23a:	ec55 4b10 	vmov	r4, r5, d0
 800b23e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800b242:	4606      	mov	r6, r0
 800b244:	462b      	mov	r3, r5
 800b246:	b99a      	cbnz	r2, 800b270 <scalbn+0x38>
 800b248:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b24c:	4323      	orrs	r3, r4
 800b24e:	d036      	beq.n	800b2be <scalbn+0x86>
 800b250:	4b39      	ldr	r3, [pc, #228]	; (800b338 <scalbn+0x100>)
 800b252:	4629      	mov	r1, r5
 800b254:	ee10 0a10 	vmov	r0, s0
 800b258:	2200      	movs	r2, #0
 800b25a:	f7f5 f979 	bl	8000550 <__aeabi_dmul>
 800b25e:	4b37      	ldr	r3, [pc, #220]	; (800b33c <scalbn+0x104>)
 800b260:	429e      	cmp	r6, r3
 800b262:	4604      	mov	r4, r0
 800b264:	460d      	mov	r5, r1
 800b266:	da10      	bge.n	800b28a <scalbn+0x52>
 800b268:	a32b      	add	r3, pc, #172	; (adr r3, 800b318 <scalbn+0xe0>)
 800b26a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b26e:	e03a      	b.n	800b2e6 <scalbn+0xae>
 800b270:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800b274:	428a      	cmp	r2, r1
 800b276:	d10c      	bne.n	800b292 <scalbn+0x5a>
 800b278:	ee10 2a10 	vmov	r2, s0
 800b27c:	4620      	mov	r0, r4
 800b27e:	4629      	mov	r1, r5
 800b280:	f7f4 ffb0 	bl	80001e4 <__adddf3>
 800b284:	4604      	mov	r4, r0
 800b286:	460d      	mov	r5, r1
 800b288:	e019      	b.n	800b2be <scalbn+0x86>
 800b28a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b28e:	460b      	mov	r3, r1
 800b290:	3a36      	subs	r2, #54	; 0x36
 800b292:	4432      	add	r2, r6
 800b294:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800b298:	428a      	cmp	r2, r1
 800b29a:	dd08      	ble.n	800b2ae <scalbn+0x76>
 800b29c:	2d00      	cmp	r5, #0
 800b29e:	a120      	add	r1, pc, #128	; (adr r1, 800b320 <scalbn+0xe8>)
 800b2a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b2a4:	da1c      	bge.n	800b2e0 <scalbn+0xa8>
 800b2a6:	a120      	add	r1, pc, #128	; (adr r1, 800b328 <scalbn+0xf0>)
 800b2a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b2ac:	e018      	b.n	800b2e0 <scalbn+0xa8>
 800b2ae:	2a00      	cmp	r2, #0
 800b2b0:	dd08      	ble.n	800b2c4 <scalbn+0x8c>
 800b2b2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b2b6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b2ba:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b2be:	ec45 4b10 	vmov	d0, r4, r5
 800b2c2:	bd70      	pop	{r4, r5, r6, pc}
 800b2c4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800b2c8:	da19      	bge.n	800b2fe <scalbn+0xc6>
 800b2ca:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b2ce:	429e      	cmp	r6, r3
 800b2d0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800b2d4:	dd0a      	ble.n	800b2ec <scalbn+0xb4>
 800b2d6:	a112      	add	r1, pc, #72	; (adr r1, 800b320 <scalbn+0xe8>)
 800b2d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d1e2      	bne.n	800b2a6 <scalbn+0x6e>
 800b2e0:	a30f      	add	r3, pc, #60	; (adr r3, 800b320 <scalbn+0xe8>)
 800b2e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2e6:	f7f5 f933 	bl	8000550 <__aeabi_dmul>
 800b2ea:	e7cb      	b.n	800b284 <scalbn+0x4c>
 800b2ec:	a10a      	add	r1, pc, #40	; (adr r1, 800b318 <scalbn+0xe0>)
 800b2ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d0b8      	beq.n	800b268 <scalbn+0x30>
 800b2f6:	a10e      	add	r1, pc, #56	; (adr r1, 800b330 <scalbn+0xf8>)
 800b2f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b2fc:	e7b4      	b.n	800b268 <scalbn+0x30>
 800b2fe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b302:	3236      	adds	r2, #54	; 0x36
 800b304:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b308:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800b30c:	4620      	mov	r0, r4
 800b30e:	4b0c      	ldr	r3, [pc, #48]	; (800b340 <scalbn+0x108>)
 800b310:	2200      	movs	r2, #0
 800b312:	e7e8      	b.n	800b2e6 <scalbn+0xae>
 800b314:	f3af 8000 	nop.w
 800b318:	c2f8f359 	.word	0xc2f8f359
 800b31c:	01a56e1f 	.word	0x01a56e1f
 800b320:	8800759c 	.word	0x8800759c
 800b324:	7e37e43c 	.word	0x7e37e43c
 800b328:	8800759c 	.word	0x8800759c
 800b32c:	fe37e43c 	.word	0xfe37e43c
 800b330:	c2f8f359 	.word	0xc2f8f359
 800b334:	81a56e1f 	.word	0x81a56e1f
 800b338:	43500000 	.word	0x43500000
 800b33c:	ffff3cb0 	.word	0xffff3cb0
 800b340:	3c900000 	.word	0x3c900000

0800b344 <_init>:
 800b344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b346:	bf00      	nop
 800b348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b34a:	bc08      	pop	{r3}
 800b34c:	469e      	mov	lr, r3
 800b34e:	4770      	bx	lr

0800b350 <_fini>:
 800b350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b352:	bf00      	nop
 800b354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b356:	bc08      	pop	{r3}
 800b358:	469e      	mov	lr, r3
 800b35a:	4770      	bx	lr
